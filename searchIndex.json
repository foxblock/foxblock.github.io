[
{
		"title": "Agile",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/arbeit/agile/",
		"content": "Eigene Erfahrung\n\nAlle Scrum Meetings müssen von allen Teilnehmern gut vorbereitet sein, sonst werden sie nahezu wertlos\n\nDies bedeutet einen nicht unerheblichen Aufwand für diese Vorbereitung\nZiel sollte es also nicht sein, die Zeit für das Meeting auszulasten, sondern das Ziel des Meetings so schnell wie möglich zu erreichen\nBei langen Meetings: Materialien vorher rumschicken\n\nEs dürfen nur die vorgegebenen Features entwickelt werden!\n\nUnnötige Features sind wie Lagerhaltung im Lean, sie erzeugen Probleme in jedem Schritt des weiteren Prozesses: mehr Aufwand für Testing, mehr Quellen für Bugs, mehr Aufwand für Dokumentation, ein komplexeres System mit mehr Abhängigkeiten\nUnnötige Features können Stück für Stück das Projekt lahm legen\n\nRegelmäßige Testzyklen (mit echten Usern!) sind wichtig zum Nachsteuern\n\ndementsprechend müssen Features Bug frei sein. Ansonsten: kein review und technical debt für nächsten Sprint\nTests mit echten Usern sind nicht zu ersetzen. Oftmals trifft man falsche Annahmen, was User wollen/brauchen und nur so findet man das heraus.\n\nje unklarer die Anforderungen zu Beginn des Projektes, desto schwieriger wird die Entwicklung und desto wichtiger sind PoCs. Lieber einen schnellen Test wegwerfen, als Jahre auf die falsche Technologie setzen.\ngenerell wird die zweite Version eines Produktes oft besser: also schnell PoC bauen, wegwerfen und dann Gelerntes bei richtigem Produkt anwenden\nniemals für die Probleme von morgen entwickeln, denn diese kennst du nicht (siehe unnötige Features oben)!\nWichtige Säule von Scrum: Transparenz. Gilt für alle Bereiche eines Unternehmens\nscrum funktioniert am besten mit sehr selbständigen Entwicklern, die fokussiert arbeiten und notwendige aufgaben eigenständig entdecken, sich aber an die Regeln (feature liste) halten. Je mehr micro Management notwendig ist, desto schlechter funktioniert scrum.\n\nTODO: insert vorgehen walk the board\nLiteratur\nhttps://www.craiglarman.com/wiki/downloads/misc/history-of-iterative-larman-and-basili-ieee-computer.pdf\n\nagile/iterative Entwicklung (IID) gibt es schon seit den 70ern und länger\nwasserfall war ursprünglich auch agile gedacht (&quot;do the process twice&quot;)\nagile ist nur Wasserfall in wiederkehrenden, kleinen inkrementen\njeder Schritt enthält auch wieder eine Design, Test und Dokumentation phase\nwichtig sind releaseable increments (bei Software)\nTimeboxen reichen von 6m bis 0,5d\ninspiration für scrum: japanischer IID Ansatz für Hardware bei Honda, Canon, Fujitsu: &quot;shashimi&quot; (slices)\n\n“Evolution” is a technique for producing the appearance of stability. A complex system will be most successful if it is implemented in small steps and if each step has a clear measure of successful achievement as well as a “retreat” possibility to a previous successful step upon failure. You have the opportunity of receiving some feedback from the real world before throwing in all resources intended for a system, and you can correct possible design errors…\n-- Tom Gilb\n\nManagement does not require firm estimates of completion, time, and money for the entire project. Each (small iterative) step must meet one of the following criteria (priority order): either (a) give planned return on investment payback, or, if impossible, then (b) give breakeven (no loss); or, at least, (c) some positive user benefit measurably; or, at least (d) some user environment feedback and learning.\n-- Tom Gilb\n\nThe danger in the sequence (waterfall approach) is that the project moves from being grand to being grandiose, and exceeds our human intellectual capabilities for management and control.\n-- Harlan Mills\n\nProbleme\nProbleme mit Wasserfall nach David Parnas und Paul Clements:\n\nA system’s users seldom know exactly what they want and cannot articulate all they know.\nEven if we could state all requirements, there are many details that we can only discover once we are well into implementation.\nEven if we knew all these details, as humans, we can master only so much complexity.\nEven if we could master all this complexity, external forces lead to changes in requirements, some of which may invalidate earlier decisions\n\nProbleme mit Scrum:\nhttps://www.youtube.com/watch?v=Q25lwSfVwF8",
		"tags": [ "note","experience","opinion","german"]
},

{
		"title": "Architecture",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/architecture/",
		"content": "Golden Rules\n\nFight abstractions\nUnderstand the domain\nFollow Standards\nKnow your Tech\nRefactor with caution\nQuelle: https://youtu.be/NiljDyzAOcI?feature=shared&amp;t=773\n\nEigener Ansatz:\n\nPrototyp bauen (max. 1-3 Monate) mit Fokus auf bekannte Anforderungen und Funktionen (nicht zu weit in die Zukunft schauen, zu viele Dinge annehmen. Abstraktionen minimal halten!)\nWährenddessen: Requirements und Annahmen prüfen und anpassen\nPrototyp wegwerfen\nSoftware komplett neu schreiben (mit Learnings aus Prototyp)\nAlle 2-3 Jahre (sofern aktiv an Software gearbeitet wird und sich Anforderungen ändern/hinzukommen): Technisches Brainstorming mit Senior Ingenieuren &quot;Greenfield Ansatz: Wie würden wir die Software nach heutigem Stand bauen&quot; -&gt; Mit Realität abgleichen und ggf. Refactoring einleiten\n\nSeparation of Concerns VS Locality of Behavior\n\nSoC: Trennung von Styling/Modell und Logik/Controller\nLoB: alle Teile von einem Element/Feature an einem Platz\npro SoC: kein Mix von Arbeit aus unterschiedlichen Domänen (zb Backend und Frontend)\npro LoB: alle Infos an einem Platz, einfacher in Gänze zu verstehen und zu debuggen\nich bin pro LoB in vielen Fällen\nich hasse code (meist oop im Endstadium) der eigentlich nichts macht, aber auf 100 dateien verteilt ist (Beispiel th-drivers-sdk, Clean-Code, Video)\nhttps://youtu.be/LriHRa9t1fQ?feature=shared&amp;t=2803\nhttps://htmx.org/essays/locality-of-behaviour/\n\nGlobaler State / Nebeneffekte\n\nFunktionen mit Nebeneffekten sind oft eine Quelle von Bugs und Komplexität\n\nstate changes werden dadurch verdeckt und lassen sich schlecht nachvollziehen (wann wird welche variable verändert? Welche Funktionen lesen nur, welche schreiben?)\nZustand der Applikation zu einem bestimmten Zeitpunkt wird unklarer (man muss sich mehr darum kümmern, dass ein sauberer init und cleanup des shared state passiert)\n\nState eines Programms zu verstehen, ist essentiell um das Programm an sich zu verstehen -&gt; Zentraler Punkt in Architektur\n\nVeränderungen des States müssen sichtbar und vorhersehbar sein\nState in einem struct bündeln hilft\nGlobaler State und Nebeneffekte sind problematisch\n\nKüchen Analogie: mehl bleibt an messbecher hängen und fällt einem entgegen wenn man Messbecher aus dem Schrank nimmt. Abhängigkeiten müssen immer im kopf behalten werden. Erzeugen Overhead oder probleme wenn man sie nicht bedenkt. Besser: Mehl und Messbecher können unabhängig voneinander entnommen werden.\n\nDuplikation von Funktionalität\n\nDuplikation von Funktionalität (bspw. In backend und Frontend) ist quelle für bugs\n\nalle solche Quellen müssen synhron gehalten werden\nbei einer Änderung des Datenformats müssen alle quellen verändert werden\nkein single source of truth\n\nKISS / Abstraktionen\n\nAll Problems in computer science can be solved by another level of indirection, except for the problem of too many layers of indirection.\n\nDavid Wheeler\n\nhttps://nitter.net/transmutrix/status/1750563200708309466#m\n\nNicht mit Abstraktionen starten\nWenn man nicht die einfachste single-file-procedural Lösung schreiben kann, wird man auch an der abstrahierten, generischen Lösung scheitern.\nMit der konkreten Lösung des Problems anfangen und von dort aus weiter arbeiten.\nDie Ideen, welche Systeme man überhaupt braucht und welche Probleme man lösen will, kommen erst mit der Zeit, die man sich praktisch damit beschäftigt und Sachen umsetzt (nicht alleine mit dem theoretischen Gedanken darüber). Also einfach loslegen!\n&quot;Some people are paralyzed by fear of being &quot;wrong&quot;—which is poison if you want to do anything creative which requires iterative refinement&quot;\n&quot;Abstraction has value after you have a strong hold on what you need and want to do, not before. Students would often fall into this trap, trying to solve &quot;I don't know how to make noodles&quot; by attempting to build a noodle factory. It doesn't work that way&quot;\n&quot;Understanding why you might want some abstraction is required to reap its benefits&quot;\n&quot;Structure comes from doing the concrete, then noticing patterns and generalizing. Only w/ exp can you jump right to abstractions&quot;\nMVP!\nCode, den man wie eine Zeitung lesen kann, ist viel einfacher zu verstehen, als Code der über mehrere Dateien wild umher springt\nnur so viele abstraktionslayer wie notwenig, so wenig wie möglich\n\njeder layer ermöglicht ggf eine effizientere arbeit\ngleichzeitig ist jeder layer Quelle für bugs\njeder layer verschlechtert Performance\nclosed source layer (oder generell code den man nicht kennt) muss blind vertraut werden. Bugs in diesem layer zu debuggen wird nahezu unmöglich und extrem viel zeit in Anspruch nehmen. Die Quelle eines neuen Bugs ist immer unklar! Sie könnte in einem dieser layer sein!\n\n&quot;Expect the unexpected&quot; -&gt; Abstraktionen eigenen sich nur begrenzt dafür, den Code agil zu halten. Per Definition wird man immer mal wieder falsch liegen und hat dann die falsche Abstraktion gebaut, da die gewünschte Änderung unerwartet war. Dann ist &quot;einfacher&quot;, linearer Code schneller geändert, als eine Abstraktionsebene umgeschrieben.\n\nLieber mit den Domäne-Experten reden und das Problem richtig verstehen. Dann PoC bauen, Feedback einholen.\nhttps://youtu.be/NiljDyzAOcI?feature=shared&amp;t=766\nhttps://grugbrain.dev/\n\n&quot;grug know cut point when grug see cut point, just take time to build skill in seeing, patience&quot;\nSplitten von Code in mehrere Strukturen produziert in den meisten Fällen (Ausnahme: SOA vs AOS) keinen besseren Code für den Computer. Es ist eine Methode, um Bugs wie &quot;Zugriff auf die falschen Daten&quot; zur Compile-Time abzufangen. Wenn man nicht um diese Bugs besorgt ist und man im Anwendungscode diszipliniert ist diese zu verhindern, sollte man keine Abstraktionen einbauen. Jede Abstraktion, jedes Splitten erzeugt zusätzlichen Overhead, da die Schnittstellen synchron gehalten werden müssen, man zum Verständnis des Codes zwischen mehr Stellen springen muss, etc.\n\nMan sollte einen guten Grund für jede Abstraktion/Separation von Code oder Daten haben (z.B. um mentalen Overhead reduzieren, wenn gut gekapselte Systeme wie Datenbank, Webserver-Requests, etc. abgespalten werden - oder um typische Bugs zu verhindern). Immer hinterfragen: Warum brauche ich die Abstraktion? Am besten sollte dieser Grund dann auch dokumentiert werden.\nMan kann nur selbst bewerten, ob sich der zeitliche Aufwand für eine Abstraktion durch Einsparungen an anderer Stelle auszahlt.\nhttps://youtu.be/drCnFueS4og?feature=shared&amp;t=3012 (bis ca. 1:00:00)\n\nImmer mit möglichst wenig Abstraktion und Separation starten und Grenzen später einziehen. Es ist immer einfacher eine Abstraktion aufzubauen, als eine bereits genutzte wieder abzubauen. Dies betrifft insbesondere unerforschte Bereiche des Problems. Annahmen müssen erst validiert und Entscheidungen gff. revidiert werden. Daher nicht zu viel am Anfang starr designen (außer man weiß, was man tut und hat es schon 100x gemacht).\n\nPoC Phase zum Lernen des Problems und dann rückwärts überlegen, welche Struktur angemessen ist, ist besser als anders herum.\nPoC muss so einfach und schnell wie möglich iteriert werden können.\nzu viel Struktur am Anfang schränkt Lösungsraum unnötig ein\nGo saying: dont opt into an interface, refactor to an interface\n\nKüchen Analogie: gestapelte Töpfe. Man muss immer alle Töpfe entnehmen, um an den untersten zu kommen. Zusätzlicher Aufwand für Kapselung.\n\nDRY vs inline code\n\nDon't DRY: Zu kurze Funktionen, die nur andere Funktionen aufrufen, die nur wieder eine andere Funktion aufrufen sind so schwierig nachzuvollziehen, weil man Kontext im Kopf aufbauen muss und viel hin- und herspringt. Eine größere Funktion, die die gesamte Arbeit erledigt, ist auf einen Blick zu erfassen oder lässt sich zumindest wie eine Zeitung von oben nach unten lesen.\nMartin Fowler: Refactor wenn man sich 3x wiederholt\nSmall Focused Functions that don't do anything meaningful -&gt; man muss zu viel im Code springen, um zu verstehen, was er macht. Context fehlt.\nEvery function should do something meaningful\nIdee: Code sollte im Stile einer StackOverflow Antwort geschrieben sein. Macht etwas sinnvolles und beinhaltet allen notwendigen Kontext. (https://youtu.be/NiljDyzAOcI?feature=shared&amp;t=1150)\n\nhttps://htmx.org/essays/codin-dirty/\nhttps://www.youtube.com/watch?v=hQJcGmWXDJw\n\nThere is no correlation between small functions and amount of bugs (no real empirical evidence)\nToo many classes = too much clutter, too confusing, not coherent (same with too many small functions)\nLong functions have the advantage of being visible. All long functions are important and do something meaningful. The result of a lot of small functions that call each other is not immediately apparent and can hide complex operations.\nMany big successful projects (Chrome, Redis, etc.) have lots of long functions (100+ lines)\nFunction length should be determined by what the function does and not be an independent metric that drives code architecture.\nSmall functions complicate the call graph, because they (theoretically) can each be called independently. Without a debugger or an IDE it is very hard to detect who calls who in which order.\n\nhttps://sandimetz.com/blog/2016/1/20/the-wrong-abstraction\n\nAbstraktion wird eingeführt, um gleiche Funktion perfekt zu bündeln\nNeue Anforderung passt nur zu 90% in dieses Konzept\nFalsch: Anpassen der Abstraktion (mit zusätzlichen Parametern, if/else, etc.). -&gt; wird noch mehrere Male wiederholt und führt zu versteckter Komplexität und unklarem Code mit Überraschungen\nBesser: Abstraktion rückgängig machen (code inline kopieren), notwendige Änderungen für neue Funktion durchführen, anschließend schauen, ob neue Abstraktion abgeleitet werden kann. -&gt; sauber und nachhaltig\n\nJohn Carmack on Inlined Code:\n\nIf a function is only called from a single place, consider inlining it.\nIf a function is called from multiple places, see if it is possible to arrange for the work to be done in a single place, perhaps with flags, and inline that.\nIf there are multiple versions of a function, consider making a single function with more, possibly defaulted, parameters.\nIf the work is close to purely functional, with few references to global state, try to make it completely functional.\nTry to use const on both parameters and functions when the function really must be used in multiple places.\nMinimize control flow complexity and “area under ifs”, favoring consistent execution paths and times over “optimally” avoiding unnecessary work.\n\nAPI Design\nImmer den Anwendungscode zuerst schreiben oder zumindest ein Mock-Up davon. Dies offenbart die notwendigen API Funktionen, ihre Parameter, Call-Order, etc.\nErst anschließend die Implementierung dieser Funktionen schreiben.\n-&gt; Empfehlung von Casey Muratori\nhttps://caseymuratori.com/blog_0024\nKeine globalen Variablen in Library (mutable global state) -&gt; nicht thread-safe und re-entrant.\nBesser: Kontext struct anlegen, welcher der API mitgegeben wird und von ihr mit dem aktuellen Zustand beschrieben wird.\nBei Callbacks: Thread Local Storage benutzen\nGlobal State: a Tale of Two Bad C APIs (nullprogram.com)\nsiehe auch (als ein Ansatz in C): <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/langauges/c/#opaque-struct\">C#Opaque struct</a>\nKonstanten immer public definieren (entweder als enum oder define). -&gt; Keine magic values im user-code. Macht Code deutlich lesbarer und durchsuchbarer (Konstanten findet man einfach, eine &quot;1&quot; ist nicht eindeutig identifizierbar). Kann einfach geändert und erweitert werden ohne, dass user-code vorm nächsten Kompilieren geändert werden muss.\nhttps://caseymuratori.com/blog_0025\n(CLI) Tools sollten mit Input aus Datei oder stdin gleich funktionieren. So kann man sie einfacher in eine Pipeline integrieren. Auch das Testen wird einfacher.\nhttps://youtu.be/isI1c0eGSZ0?feature=shared&amp;t=300\nmalloc()-Calls in Library vermeiden. Besser: Memory-Allokation vom Benutzer erledigen lassen. Dann kann der Anwender auswählen, ob er auf dem Stack oder Heap allokieren will oder sogar einen eigenen Allocator benutzen.\nprepped_alloc PrepThingeeForAlloc(parameters)\n{\nprepped_alloc Prep = BeginAllocPrep();\n//... bunch of macro calls here that describe all the allocations\n//... and their internal pointers to itself\nEndAllocPrep(Prep);\n}\n\nsize_t GetSizeForThingee(parameters)\n{\nprepped_alloc Prep = PrepThingeeForAlloc(parameters);\nsize_t Result = GetSize(Prep);\nreturn(Result);\n}\n\nthingee *CreateThingee(void *Memory, parameters)\n{\nprepped_alloc Prep = PrepThingeeForAlloc(parameters);\nthingee *Result = (thingee *)PlaceAlloc(Prep, Memory);\nreturn(Result);\n}\n\nhttps://hero.handmade.network/forums/code-discussion/t/763-stack_persistence_vs._api_simplicity#4335\nhttps://stackoverflow.com/questions/59547761/should-functions-that-create-structs-return-the-struct-or-a-pointer\nKleine Strukturen können auch direkt auf dem Stack erzeugt werden und als struct (nicht als Pointer) zurückgegeben werden.\nsiehe auch: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/stack-vs-heap/\">Stack vs. Heap</a>\nPremature Optimization\n\nThe full version of the quote is &quot;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.&quot; and I agree with this. Its usually not worth spending a lot of time micro-optimizing code [i.e. counting cycles] before its obvious where the performance bottlenecks are. But, conversely, when designing software at a system level, performance issues should always be considered from the beginning. A good software developer will do this automatically, having developed a feel for where performance issues will cause problems. An inexperienced developer will not bother, misguidedly believing that a bit of fine tuning at a later stage will fix any problems.\n-- Charles Cook\n\nObservation #6: Software engineers have been led to believe that their time is more valuable than CPU time; therefore, wasting CPU cycles in order to reduce development time is always a win. They've forgotten, however, that the application users' time is more valuable than their time.\n\nQuelle: The Fallacy of Premature Optimization (acm.org)\nPerformance lässt sich nicht magisch am Ende der Entwicklung herbeiführen. Insbesondere bei komplexen Systemen sind die Bottlenecks über das System verteilt, voneinander abhängig und bedingen Änderungen an der Architektur, welche am Ende sehr kostspielig und aufwendig sind.\nCmuratori zu diesem Thema: https://youtu.be/drCnFueS4og?feature=shared&amp;t=5359\nParallelisierung\nMutex / Semaphore vermeiden! Insbesondere bei steigender Komplexität (und vielen Locks) kann nicht mehr gut abgeschätzt werden, wie häufig Threads in Mutex-locks laufen und wie viel wirklich parallel gearbeitet wird.\nBesser: API Design, welche unabhängig von Parallelität ist. Beispiel: Schreiben einer Datei in parallelen chunks: Anstatt fertige Chunks in Array zu pushen oder in Datei zu schreiben (POSIX write(), Reihenfolge abhängig von Parallelität) -&gt; Thread mit offset Parameter starten und fertige Chunks mit Offset in bereits allokierten Speicher oder Datei schreiben (POSIX pwrite(), Reihenfolge unabhängig von Zeitpunkt der Fertigstellung)\nQuelle: OpenMP and pwrite() (nullprogram.com)\nProtobufs: Daten zwischen Services mit Typeninformationen teilen\n-&gt; Protobufs Protocol Buffers Documentation (protobuf.dev)\nBinärdaten\nStep 1: Platz für Versionsfeld reservieren\nDies gilt für alle Binärdaten, eigene Datenformate oder Protokolle (Learning von: Savegame in diversen Spielen, Goodnightlamp Update Protokoll)\nFunktionen\n\nwenn user input verwertet wird: so permissive wie möglich/notwendig. Zudem alles auf Plausibilität prüfen\n\nist integer im erlaubten bereich?\nist integer überhaupt ein integer (wenn String konvertieren wird)\nhat pfad ein trailing /\nhat Dateiname eine typendung\netc.\n\nansonsten: so annehmen wie übergeben (möglichst wenig error handling)\n\ncaller ist für Input verantwortlich, Funktion für Output\n\nOOP vs Data-Oriented\n\nv-tables und dynamic memory allocation machen das Programm langsamer, weil Objekte im Speicher verteilt liegen und viele cache misses erzeugen: Ryan Fleury auf X: „This illustrates why it has been helpful to me to eliminate v-tables and sum-types almost everywhere. It isn’t just about performance—it’s about strong predictive power over code, staying organized, non-pessimization, and architecture which is ready to optimize later if needed.“ / X\n!<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">memory-layout.mp4</a>\nV-Tables sind &quot;indirected function pointers&quot; und stellen eine harte Grenze für den Compiler dar. Switch statements können hingegen deutlich besser optimiert werden -&gt; <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/stack-vs-heap/\">Stack vs. Heap</a>\n\ncmuratori-discussion/cleancodeqa.md at main · unclebob/cmuratori-discussion\ncmuratori-discussion/cleancodeqa-2.md at main · unclebob/cmuratori-discussion\nhttps://www.rfleury.com/p/programmers-are-users-bad-performance\nOOP Ansatz:\n#include &quot;raw_device.h&quot;\nclass new_device : public raw_device {\npublic:\n\tvirtual file* open(char* name);\n\tvirtual void close(file* f);\n\tvirtual void read(file* f, size_t n, char* buf);\n\tvirtual void write(file* f, size_t n, char* buf);\n\tvirtual void seek(file* f, int n);\n\tvirtual void get_name();\n}\n\nData-oriented Ansatz (Typenimplementierung siehe 2. Link oben):\nvoid raw_device::Handler(raw_device_request *Packet, raw_device_result *Result)\n{\n\tswitch(Packet-&gt;Op)\n\t{\n\t\tcase RIO_read:\n\t\t// etc.\n\t\t\n\t\tcase RIO_write:\n\t\t// etc.\n\t\t\n\t\tcase RIO_get_name:\n\t\t// etc.\n\t\t\n\t\tdefault:\n\t\t// write error Result\n\t}\n}\n\nVorteile des &quot;Data-oriented Ansatzes&quot;:\n\nRequests/Calls/Aufgaben können gepuffert werden (einfach Packet in einen Array packen und später abarbeiten). Dies erlaubt auch einfacheres Multi-threading -&gt; Soll dies für den OOP-Ansatz implementiert werden, schreibt man meist den Data-oriented Code um den OOP-Code (implementiert letztendlich beide Lösungen)\nRückwärts-Kompatibilität: Wenn eine neue Funktion eingeführt wird, können alte Treiber einfach weiter funktionieren. Sie ignorieren den Op-Code (default im switch), während neue Geräte diesen implementieren. -&gt; beim OOP-Code muss die Parent-Class und damit alle Children angepasst werden\nPrivate Op-Codes, die nur von einzelnen Geräten implementiert werden sind trivial möglich.\nKeine V-Tables notwendig (schnellere Funktionsaufrufe, bessere Optimierbarkeit)\nInterne Struktur der structs und Funktionen kann sich komplett ändern. Solange die API gleich bleibt, ist user-code davon nicht betroffen. Noch besser (in C): wenn man pointer zu <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/langauges/c/#opaque-struct\">C#Opaque struct</a> an Funktion übergibt könnte man dies später sogar soweit ändern, dass pointer eigentlich ein index in einen internen cache ist.\nZiel: den Pfad der Implementierung klein halten (Anzahl an Funktionen / Interfaces), bis man zur eigentlichen Implementierung kommt. Insbesondere wenn Daten/Funktionsaufrufe durch mehrere Stellen gehen und weitergegeben werden.\n\nOOP\nf1 call ------ f1 handler ------ f1 code\nf2 ------ f2 ------ f2\nf3 ------ f3 ------ f3\nData oriented\nf1 call \\ / f1 code\nf2 ------ fx handler ------- f2 code\nf3 / \\ f3 code\n-&gt; the more handler/passthrough layers you have, the more code you have to write/maintin in the OOP case\n\nDO NOT DO:\n#include &quot;devids.h&quot;\n#include &quot;console.h&quot;\n#include &quot;paper_tape.h&quot;\n#include &quot;...&quot;\n#include &quot;...&quot;\nvoid read(file* f, char* buf, int n) {\n\tswitch(f-&gt;id) {\n\t\tcase CONSOLE: read_console(f, buf, n); break;\n\t\tcase PAPER_TAPE_READER: read_paper_tape(f, buf n);\n\t\t\tbreak;\n\t\tcase...\n\t\tcase...\n\t}\n}\n\nGood code / bad code\n\nbad code can't handle small changes in requirements\n\nCost of Dependencies\nhttps://nitter.tiekoetter.com/cmuratori/status/1426299131270615040#m\nhttps://nitter.tiekoetter.com/Jonathan_Blow/status/1923414922484232404#m",
		"tags": [ "note","experience","opinion","german","knowledge-base"]
},

{
		"title": "Collision Detection",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/collision-detection/",
		"content": "Bestes Buch zum Thema: Real Time Collision Detection von Christer Ericson\nBroad-Phase vs. Narrow-Phase\n\nErsteres für grobe Paarbildung von kollidierenden Objekten. Schnell, aber ungenau.\nLetzteres für genaue Berechnung der Kollision und notwendigen Daten zur Auflösung/Vermeidung der Kollision\nZuerst wird Broad-Phase durchgeführt, um die Anzahl an Paaren zu reduzieren, dann Narrow-Phase auf die verbleibenden Paare\nAlgorithmen\n\nBroad-Phase\n\nSweep and Prune\n\nNarrow Phase\n\nAABB\nSeparating Axis Theorem\nGJK\n\nSweep and Prune\n\nSortieren der Objekte auf einer (oder mehreren) Achsen\nWenn eine Achse: Ermöglicht frühen Abbruch des n × m Loops zum Testen auf Kollision, da A &lt; C wenn A &lt; B und B &lt; C\nBei mehreren Achsen: Ermöglicht groben boolschen Test auf Kollision: https://www.youtube.com/watch?v=E-cQaDnapjo\nEs wird ausgenutzt, dass sich die Objekte pro Zeitstep kaum bewegen, daher behält man die sortierten Listen bei und nutzt bspw. Insertion Sort (sehr effizient bei bereits fast sortierten Listen), anstatt die Liste immer neu zu erstellen\nMeist wird (implizit) die AABB-Hülle eines komplexeren Körpers für das Sortieren genutzt\nBuch: Kapitel 7.5, S. 329\nhttps://leanrada.com/notes/sweep-and-prune/\nWikipedia (nicht wirklich verständlich imo)\n\nSeparating Axis Theorem (SAT)\n\nGuter Algorithmus für 2D\nFunktioniert mit Kreisen und konvexen Polygonen\n\nkonkave Polygone müssen in mehrere konvexe geteilt werden\n\nLiefert boolsches Ergebnis oder (mit etwas mehr Aufwand) Vektor und Schnitttiefe zurück\nPrüft, ob es auf einer Achse der Körper einen Spalt gibt\nSeparating Axis Theorem (SAT) - Let's Make a Physics Engine 05 - YouTube\n\nGilbert–Johnson–Keerthi (GJK)\n\nSchneller als SAT\nFunktioniert im n-dimensionalen Raum mit konvexen Objekten jeder Art\nLiefert nur boolsches Ergebnis\nLässt sich gut für unterschiedliche Typen von Körpern abstrahieren, da die Form nur einen Schritt des Algorithmus beeinflusst\nPrüft ob die Differenz der Körper den Nullpunkt einschließt\nhttps://caseymuratori.com/blog_0003",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Data Structures & Algorithms",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/data-structures-and-algorithms/",
		"content": "Hash Tables\nGuide: How to implement a hash table (in C) (benhoyt.com)\n\nCreate Array of certain size (generally any power of 2)\nGenerate Hash from key\nhash(key) &amp; (len(array)-1) -&gt; storage position\n\nModulo would be the general case, but since size is 2n we can use binary-AND which is much faster\n\nProbe position. If already occupied (collision):\n\nOpen addressing, linear probing: Add 1 to index and try again (until empty slot found)\nSeparate chaining: Store values as linked list of results\nOther methods: Hash table - Wikipedia\n\nStore value as well as hash in the resulting position\n\nHash is needed to resolve collisions\nSome tables put the data separately in a flat array and only store hash+index, this saves space for large data structs\n\nLookup is constant (O(1) amortized) as index = hash(key) &amp; (len(array)-1) + collision resolution\n\nCertain details of the general approach listed above can vary in practice (e.g. some tables have other probing strategies)\nEntries of the hash table are usually called &quot;slots&quot;. Some tables allocate multiple slots at once in &quot;buckets&quot; (usually the size of a cache line). Sometimes the words are used interchangeably.\n&quot;Tombstones&quot; are special values often used with open addressing to mark deleted slots (since you cannot mark them as empty, which would break probing chains). They are re-used on insertion and should count towards the load factor.\nFor open addressing hash table may never be too full. Usually load factors between 0.5 and 0.9 are used, based on the tables collision resolution technique (0.75 or 0.9 seem common). Else storing and lookups can become really slow (infinite loop when table is 100% full)\nThe linked list approach requires extra memory allocations during store and handling a linked list is slower in general (not cache friendly)\nHigh performance tables use SIMD for probing by storing a small part of the hash in a separate array, skipping to a &quot;general region&quot; of that array with most of the hash bits and then checking multiple slots with SIMD + the remainder of the hash\nBenchmark: An Extensive Benchmark of C and C++ Hash Tables | A comparative, extendible benchmarking suite for C and C++ hash-table libraries.\nImplementation with detailed explanation: Hash Tables · Crafting Interpreters\n\nLinked List vs Array\nC++ benchmark - std::vector VS std::list | Blog blog(&quot;Baptiste Wicht&quot;); (baptiste-wicht.com)\nhttps://www.rfleury.com/p/in-defense-of-linked-lists\n!<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">memory-layout.mp4</a>\nSorting\nVergleich mit Animation: Sorting Algorithms Animations | Toptal®\nInsertion Sort\nEiner der besten Algorithmen, wenn Liste bereits fast sortiert ist. Ebenfalls gut, wenn Datenmenge klein ist. Wird daher oft in anderen Algorithmen verwendet, wenn Liste in kleinere Stücke geteilt wurde.\nNicht gut geeignet wenn Liste invertiert ist.\ni ← 1\nwhile i &lt; length(A)\nx ← A[i]\nj ← i\nwhile j &gt; 0 and A[j-1] &gt; x\nA[j] ← A[j-1]\nj ← j - 1\nend while\nA[j] ← x\ni ← i + 1\nend while\n\nQuicksort\nGut bei großen Datenmengen.\nSehr gut wenn Liste invertiert ist.\nNicht so gut wenn Liste bereits fast sortiert ist.\nGrundsätzlich für die meisten Anwendungen gut geeignet.\n&quot;in memory&quot; sort, braucht keinen zusätzlichen Speicher (außer eine handvoll temporäre Variablen für Wertetausch, Pivot, Iteratoren).\n// Sorts a (portion of an) array, divides it into partitions, then sorts those\nalgorithm quicksort(A, lo, hi) is\nif lo &gt;= 0 &amp;&amp; hi &gt;= 0 &amp;&amp; lo &lt; hi then\np := partition(A, lo, hi)\nquicksort(A, lo, p) // Note: the pivot is now included\nquicksort(A, p + 1, hi)\n\n// Divides array into two partitions\nalgorithm partition(A, lo, hi) is\n// Pivot value\npivot := A[lo] // Choose the first element as the pivot\n\n// Left index\ni := lo - 1\n\n// Right index\nj := hi + 1\n\nloop forever\n// Move the left index to the right at least once and while the element at\n// the left index is less than the pivot\ndo i := i + 1 while A[i] &lt; pivot\n\n// Move the right index to the left at least once and while the element at\n// the right index is greater than the pivot\ndo j := j - 1 while A[j] &gt; pivot\n\n// If the indices crossed, return\nif i &gt;= j then return j\n\n// Swap the elements at the left and right indices\nswap A[i] with A[j]\n\nIn C:\nvoid qsort( void* ptr, size_t count, size_t size,\nint (*comp)(const void*, const void*) );\n\n// ptr - start of array\n// count elements of size bytes each\n// comp - comparison function (returns -1 if first arg is &lt; second arg, 1 if &gt; and 0 if equal)\n\n// Is not guaranteed to use quicksort, some implementations use insertion sort for small arrays or merge sort\n\nstl::sort vs qsort: C qsort() vs C++ sort() - GeeksforGeeks, Beating Up on Qsort | Performance Matters\n\nstl::sort is faster because the compiler can inline the comparison code generated by the templates\nqsort on the other hand relies on indirect function pointers, which are opaque for compilers\nqsort can be made faster by copying implementation and inlining comparator\n\nRadix Sort\nSuper fast, but only for integers: Beating Up on Qsort | Performance Matters\nDirectly sorts numbers into their final buckets by comparing them &quot;digit by digit&quot; basically (usually base-256 is used instead of base-10).\nNeeds additional memory for the buckets (which can slow it down, if not properly optimized).\nTime complexity is O(n) instead of O(n*log(n)) for most other sorting algorithms.\nAlso needs special attention if negative numbers are involved (additional sort on the sign bit).\nQuadtrees and Grids\nGreat set of posts:\ndata structures - Efficient (and well explained) implementation of a Quadtree for 2D collision detection - Stack Overflow\nperformance - What is a coarse and fine grid search? - Stack Overflow",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Error handling",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/error-handling/",
		"content": "is error recoverable? -&gt; if yes, do it!\nshould User know about error? -&gt; return it / display it in the UI (ideally non-modal, but still not easily missable. Only do modal, if error is critical)\nshould developer know about error? -&gt; return it / log it\nHandle the error as close to the source as possible. Don't be lazy and just throw it up. By throwing you will lose context (or you have to go out of your way to include it with custom error types and whatnot) and the less you will be able to handle it or provide a meaningful error message.\n\nThis is one reason why explicit error handling (e.g. in Go) is superior to implicit error handling (e.g. in Typescript). Sure the Go way is more verbose. You will write a lot of if err != nil, but the language forces you to think about every error. You will be more inclined to handle it and throwing will happen less involuntarily. In Java you sometimes don't even realize an error can happen until it is too late.\nAnd it's not like you can ignore most errors.\n\nhandle error at correct Level\n\ntransmission error (e.g. bitflip) -&gt; CRC, not app code\nuser input error -&gt; UI (but probably also database)\n\ndo not change user input on the fly (see <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/design/ui-ux/\">UI - UX</a>)\n\nThink about the harm of silently changing values (i.e. some value is out of bounds -&gt; clamping it)\n\nWill the user be confused by the value change?\nWill the change allow the program to continue to function (instead of crashing without the change)?\nThis will obfuscate that an error even happened (and probably the source/cause of it) -&gt; probably a good idea to at least log something\nThis descision will always be a trade-off\n\nProvide meaningful error messages (-&gt; <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/design/ui-ux/\">UI - UX</a>). &quot;Unexpected error&quot; is not helpful for anybody!\nuser input\n\nalways check for plausibility\nnever trust anything\nbe as permissive as makes sense, if intention of user is clear, e.g.\n\nadd/remove trailing slashes from paths\nbut: do not change integer values out of range. Better to throw error (see above)",
		"tags": [ "note","opinion"]
},

{
		"title": "Game Programming",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/game-programming/",
		"content": "Lerp Smoothing\nAdvantage: Nice smoothing of animations in-place, without having to know/store the start of an animation (like you need for easing functions).\nStandard version:\n// a - current pos\n// b - target pos\n// t - factor to move a towards b in each step (0..1)\nfloat lerp(float a,b,t) {\n\treturn (1-t)*a + t*b;\n}\nvoid update() {\n\ta = lerp(a,b,0.01); // move a 1% closer to b each frame\n}\n\n-&gt; This is framerate dependent and stops working when framerate is not constant.\n-&gt; Cannot simply multiply t by dt, since 2*dt is not the same as calling lerp 2 times (kinda works, but is unstable and can explode if t*dt &gt; 1)\nContinuous (non recursive) version:\n// F = fraction to move after one frame\n// frame based version (n = frame counter)\nf(n) = (a-b)*(1-F)^n+b\n// time based version\nf(t) = (a-b)*(1-F)^(t/dt)+b\n\n-&gt; still framerate dependent\nFramerate independent version:\n// dt = delta time for last frame in s (Unity: Time.deltaTime)\nfloat lerp_r(float a,b,r,dt) { // r = remainder (in %) after dt\n\treturn b + (a-b)*pow(r,dt);\n\t// NOTE: pow() is about 8x slower than exp()\n}\nfloat lerp_hl(float a,b,hl,dt) { // hl = half life time in s\n\treturn b + (a-b)*exp2(-dt/hl); // exp2(n) = 2^n\n}\n\n// Generally use this one (fastest, easy to use):\nfloat lerp_decay(float a,b,l,dt) { // l = decay constant\n\treturn b + (a-b)*exp(-l*dt);\n\t// useful range for l: 1..25 (slow to fast decay)\n}\n\nSource: https://www.youtube.com/watch?v=LSNQuFEDOyQ\nBetter article with detailed explanations (and also springs!): https://theorangeduck.com/page/spring-roll-call\nEngine\nhttps://youtu.be/drCnFueS4og?feature=shared&amp;t=1740\n\nFor strategy/puzzle/simulation-type games (Chess, Sokoban):\n\nRules have to be executed exactly with reproducible results. Players have very precise expectations and the game has to satisfy them and communicate accordingly.\nRecommended: Isolate code that deals with the rules of the game and keep all of it in one place, so it is clear, condensed, easily understandable and debug-able.\n\nFor action games (Doom, C&amp;C):\n\nThere is some room of wiggle room, because players do not expect a very precise outcome (much more so in Doom than C&amp;C though)\n\nStore game state and render state in the same structure for simplicity.\n\nBasically follow the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"#fat-flat-struct-behaviors\"></a> approach\nMaintain separate values for actual game state (e.g., health, ammo) and display state (e.g., display health, display ammo).\nConsider &quot;two-sided death&quot; for entities: logical removal from the game state and gradual removal through animation.\nDON'T: Have a lot separate classes and interfaces for this stuff. Game state and rendering is strongly linked. One has to be able to quickly add stuff to this, especially in the beginning prototype phase.\nDON'T: duplicate your data and logic everywhere (e.g. by introducing an event system or animation system to smoothly interpolate display health values). This will increase complexety and introduce bugs in having to sync all these systems.\n\nStore game state after each frame for easy undo/playback/demo recording.\n\nCan always compress it, if needed (e.g. XOR-RLE)\n\nKeep all entities in a flat array and don't bother removing elements\n\nhttps://youtu.be/drCnFueS4og?t=4079&amp;feature=shared\non death, just mark as dead for gameplay, but keep data for display death Animation (see two-sided-death above)\nno null pointer dereferences, no access violation, no targeting the wrong entity (because the slot got refilled with new data)\nentity data is usually small (few Megabytes)\ncan be compressed, if needed. E.g. by using ring buffer\nAlternative methods, like multiple lists, handles or a message system (to broadcast death events) are much more complicated to achieve the same goal\nThis worked great and was very simple to implement in MathTD\n\nUse stable IDs for entities (e.g., towers) to manage their state and animations effectively.\n\nIn MathTD we just used the tower array index, which would only increment (never decrement or rollover)\nA more robust approach would be to generate a random 32 or 64bit id for each new entity and store that in the entity struct. Reference entities by their ID. IDs reach into a hashmap, e.g. by using the bottom 8-12 bits (depending on how many entities can be alive at any point divided by max fill rate -&gt; see <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/data-structures-and-algorithms/#hash-tables\">Data Structures &amp; Algorithms#Hash Tables</a>) to get an index and then compare the requested ID to the ID of the entity in that slot. -&gt; see https://youtu.be/NW6PhVdq9R8?feature=shared&amp;t=1150 (4mins)\n\nSeparate game rules from display and animation logic for clarity (as represented by the data -&gt; see above)\nEnsure your code is flexible enough to incorporate changes and optimizations based on observed gameplay needs. First explore then decide on the correct structure. Don't add too much abstraction up front, because it might be wrong and will hinder exploration and iteration and is harder to change later.\nUse the prototyping phase not only to refine design and gameplay, but also to identify common operations and performance bottlenecks.\n\nhttps://youtu.be/drCnFueS4og?feature=shared&amp;t=5000 (10min)\nUnderstand that performance requirements might evolve as the game design matures.\nStart with the simplest implementation. There will be a lot of changes in the beginning, code should be as simple as possible, because it needs to be changed frequently or thrown out. Speed of iteration matters most in the beginning.\nFor example: for a small game (&lt;1000 entities), just loop over the array for collision checking (O(N^2)). Even 1M checks is easily doable for a modern PC. This method always works, is easy to implement and debug. Optimization can happen later, but will make the code more complex.\nNOTE: This only works for small games or an explicit prototyping phase. On large projects, once the architecture is in place it will be very hard to change and optimize, so you will need to test beforehand and plan ahead. (-&gt;<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/architecture/#premature-optimization\">Architecture#Premature Optimization</a>)\n\nFor games with complex rules and a lot of dependencies between elements (e.g. Sokoban), a global event queue might be a good approach\n\nDon't apply changes (take health, kill entity, change state, etc.) immediately, instead add these requests to a queue\nCan always inspect the queue during a frame to see what is going on\nCan re-order or filter the queue based on events that happened later\nFinally can apply queue to get new state for next frame\nThis pattern also helped during development of the item ELFE (message queues)\n\nImportant for performance: Batching\n\nTODO: Find more details\n\nEntity systems\nGeneral approaches to a unit/entity system.\nPreferred way for moderately complex games: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"#preferred-fat-flat-struct-behaviors\"></a>\nFor simple games this can also work well (MathTD): <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"#naive-fat-flat-struct-entity-types\"></a>\nOOP\nclass UnitBase {\n\tVec2 pos;\n\tVec2 vel;\n\tint health;\n\tvirtual void simulate(float dt)=0;\n}\nclass UnitGoblin : public UnitBase {\n\tint damage;\n\tvoid calcDmg();\n}\n\nBase Class (has general properties like position, velocity, sprite - sometimes implements general behavior, otherwise functions are virtual or abstract) and child classes (which inherit Base Class, add properties and implement/overwrite behavior)\nStore all entities in one array, by storing a pointer to BaseClass* and type casting if specific stuff needs to be accessed\nDisadvantage: Additional layers of indirection through pointers and v-table indirections. Very cache unfriendly. Have to do type checks for each element (or add the same type enum as in the union approach) when processing.\n\nDiscriminated struct/union\n// Approach 1:\nenum EntityType {\n\tetNone=-1,\n\tetPlayer,\n\tetGoblin,\n\tetChest,\n};\nstruct PlayerData {\n\tint holdingItemId;\n\tint potionCount;\n};\nstruct GoblinData {\n\tint damage;\n};\nstruct Entity {\n\tEntityType type;\n\tunion {\n\t\tstruct PlayerData;\n\t\tstruct GoblinData;\n\t};\n};\n// Approach 2:\nenum DataType {\n\tdtNone=-1,\n\tdtPosition,\n\tdtHealthAndDamage,\n};\nstruct PositionData {\n\tint x,y;\n};\nstruct HealthAndDamage {\n\tint hp, dmg;\n};\nstruct Data {\n\tDataType type;\n\tunion {\n\t\tstruct PositionData;\n\t\tstruct HealthAndDamage;\n\t}\n};\nstruct Entity {\n\tData *data; // array\n\tint size;\n};\n\nstruct with general data, a &quot;type&quot; flag and a union of structs for storing the data of the different types.\nAdvantage: Can be stored in a flat array for quick and cache friendly iterating over all entities\nDisadvantage: a union is basically an if/else branch in the type, so you have to handle that type check everywhere (the correct type is hidden behind one layer of indirection, same as OOP approach). This can become confusing and very complex. Code amount multiplies by number of types, since you have to check each combination (at least to filter the correct ones). Problems arise when type checking is missed and wrong data is accessed/changed.\nUnions are a way to compress data. One has to ask: Is the compression worth it, what do we gain from it? Entity data usually is very small anyway.\n\nNaive fat/flat struct (entity types)\nstruct RenderSprite {\n\tuint8_t *data;\n\tint len;\n\tint w, h;\n};\nstruct ControlledByUser {\n\tInput in;\n};\nstruct Hostile {\n\tint damage;\n\tint aggroRange;\n};\nstruct Player {\n\tstruct RenderSprite,\n\tstruct ControlledByUser,\n\tstruct HasPhysicsShape,\n};\nstruct Tree {\n\tstruct RenderSprite,\n\tstruct HasPhysicsShape,\n\tstruct IsStatic,\n};\nstruct Jelly {\n\tstruct RenderSprite,\n\tstruct ChasePlayer,\n\tstruct HasPhysicsShape,\n\tstruct Hostile\n};\n\nHave data bundled by features in structs (without union), switch by type\nAdvantage: No indirection for the type check. More transparent, code knows exactly what data it is getting. One array per type is very cache friendly for iterating (not so much when working across types).\nDisadvantage: No union compression. Combinatoric explosion for handler functions, if there are a lot of properties.\nThis can still work for simple games with few distinct types (like MathTD)\n\nFat/Flat struct (behaviors)\n// but instead of Player, Tree, etc.:\nenum EntityProperties {\n\tepRenderSprite = 1&lt;&lt;0,\n\tepControlledByPlayer = 1&lt;&lt;1,\n\tepHasPhysicsShape = 1&lt;&lt;2,\n\tepIsStatic = 1&lt;&lt;3,\n\t// ...\n};\nstruct Entity {\n\tuint64_t props; // bitmask for active props\n\t// Sprite\n\tstruct Texture sprite;\n\tVec2 pos;\n\t// Movement\n\tVec2 vel;\n\tVec2 acc;\n\t// Control\n\tint controllerId;\n\tint health;\n\tint damage;\n\t// etc.\n};\n// Helper functions for entity &quot;types&quot;:\nEntity *MakePlayer() {\n\tEntity *entity = AllocateEntity();\n\tSetEntProp(entity, epRenderSprite);\n\tentity-&gt;sprite = ...;\n\tSetEntProp(entity, epControlledByPlayer);\n\tentity-&gt;controllerId = ...;\n\t//...\n\treturn entity;\n}\n\nHave all data for all functionality in one struct and a properties bitmask, which enables/disables part of the behavior.\nAdvantage: No need for type checks, code is getting all the data. Switch by feature/property instead of entity type. Compared to the union, code branches become about the behavior (which is more important). No combinatoric explosion, you just handle properties in a flat/linear manner (O(N) mapping to code-paths).\nDisadvantage: struct can become fairly big (but still small in comparison to other data like textures, so does it even matter?)\nFully orthogonal structs should be separated and handled differently.\nYou may map struct data 1:1 to properties, but sometimes multiple (exclusive) properties can share the same data or properties can use no data at all. This style does not enforce any mapping. Be careful and explicit with sharing data though, else you can run into nasty side-effects.\nSimilar to ECS (e.g. in Unity), but ECS has a 1:1 mapping between data and behavior and Unity also splits each into its own file (which you probably don't want, since it spreads behavior out a lot and makes it harder to debug).\nNice approach for procedural games: You can easily create a 2^N feature space (by looping over the properties) and explore which combinations make sense and which one to disable.\nAlternative to bitmask when more than 64 features are required: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/langauges/c/#bitmask-with-more-than-64-entries\">C#Bitmask with more than 64 entries</a>\nExample: hatebin - oykukwtnoo with sort-of explanations here Why don't use discriminated union rather than Sparse System for entity system? | Handmade Network (read posts by Ryan Fleury). A little bit more background here: The Yin and Yang of Data Formats\nSimilar kinds of features can be packed into one struct (similar to a discriminated union):\n\n// Property: epTrigger\nenum TriggerKind { ... };\nstruct Trigger\n{\nTriggerKind kind;\nInput input;\nShape shape;\nEntityHandle source_entity;\n// for type tkChest:\nItemKind collect_item_kind;\nItem *collect_item;\n// for type tkHazard:\nf32 seconds_to_allow_source_entity;\nAttackFlags attack_flags;\n// can pack the variables associated with\n// types into an union: more compression, but\n// can only access data after type check\n};\n\nYou can also build a tree of Entities and assign certain behaviors only to parts:\n\ne.g. PlayerBody -&gt; Hand -&gt; Weapon and only Weapon has &quot;do damage&quot; property, only PlayerBody has &quot;health&quot; and &quot;damage-able&quot; property\nor you can have per component health and the hand can be damaged separately from the body (all with the same system)\nIf some data maps to multiple features you can have a combination by having multiple entities (instead of duplicating the data one each entity)\n\nstruct Entity\n{\nEntity *first_child;\nEntity *last_child;\nEntity *next;\nEntity *prev;\nEntity *parent;\n// other data ...\n};",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Batch",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/batch/",
		"content": "Best practices\n\n@echo off (disable echo by default)\nwhen setting variables surround whole statement with quotes set &quot;var=value&quot; (this handles spaces and other special characters better)\nBetter not handle passwords, if you really need to see <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"#handle-passwords\"></a>\nsurround whole script with setlocal and endlocal (to not pollute the variable space)\nUse these instead of hard-coded paths: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"#useful-windows-variables\"></a>\nfor %%a in (%*) do (set &quot;%%a=1&quot;) is the simplest parser for flags\nKeep conditions (if/else) to a minimum (many pitfalls: brackets may break comments, variables are expanded only once, code becomes less linear, etc. - goto avoids some of these, but makes the code even less linear)\n\nCheatsheet\necho\n:: turn off echoing all commands executed\n@echo off\n:: @-symbol: run one command without echo\n@set somevar=1\n:: echo Text and variable\necho Hello, %username%\n:: Blank line\necho.\n:: echo message with brackets need escaping when in if/for\nif condition (echo text ^(hint^))\n\nrem This is a comment\n:: This is also a comment, but causes problems in if/for blocks\n:: see: https://www.robvanderwoude.com/comments.php\n\nVariables\nSet\n:: set without %, use surrounded with %\n:: if value contains spaces, surround whole statement with &quot;&quot;\nset &quot;var=path\\to\\exe --whatever&quot;\necho %var%\n:: Prints: path\\to\\exe --whatever\n:: if only value is surrounded, &quot;&quot; will become part of value\n:: value of %var% will be baked into %var2% at this point\nset var2=&quot;pre\\%var%&quot;\necho %var2%\n:: Prints: &quot;pre\\path\\to\\exe --whatever&quot;\n:: numeric vars (val == 6)\nset /A val=3+3\n:: promt user input\nset /P &quot;uservar=just a comment, will be overwritten&quot;\n:: set multiple vars\n:: make sure to use &quot;&quot; else space before &amp; will be included in value\nset &quot;foo=bar&quot; &amp; set &quot;poo=bear&quot;\n\nCompare\n:: Surround var to ensure correct behavior\n:: use &quot;&quot; if value cannot contain &quot; (or it will error)\n:: use [] if value cannot contain spaces\n:: do not use single quotes ''\n%var%==true\n[%var%]==[some text]\n&quot;%1&quot;==&quot;-h &amp; shift&quot;\n&quot;%1&quot; NEQ &quot;&quot;\n&quot;%foo%&quot; EQU &quot;%bar%&quot;\n:: numeric comparisons\n:: LSS, LEQ, GTR, GEQ\nif (3 gtr 1) (echo true)\nif (&quot;B3&quot; gtr &quot;b2&quot;) (echo compares char by char, case-insensitive, b&gt;a)\n\nTest existance\n:: no % signs!\nif defined var (echo yay) else (echo nay)\n:: for arguments save to temp var first:\nset &quot;var=%~1&quot;\n:: Test for existance of foo (not test!)\nset test=foo\nif not defined %test% (echo foo not defined)\n:: alternative (test if empty)\nif &quot;%~1&quot;==&quot;&quot; (echo not defined or empty)\n\nReplace and Substring\n:: Replace &quot;to&quot; with &quot;from&quot;\nset var3=%var:to=from%\n:: Substring -&gt; th\\to\\exe --whatev\nset var4=%var:~2,-2%\n:: Remove spaces\nset var5=%var:=%\n:: Remove quotes\nset &quot;var6=%var:&quot;=%&quot;\n\nhttps://ss64.com/nt/if.html\nUseful Windows variables\nRecognized environment variables - Windows Deployment | Microsoft Learn\n%userprofile% -&gt; C:\\Users\\schaja\n%homepath% -&gt; \\Users\\schaja\n%username% -&gt; schaja\n%appdata% -&gt; C:\\Users\\schaja\\AppData\\Roaming\n%tmp% -&gt; C:\\Users\\schaja\\AppData\\Local\\Temp\n%systemroot% -&gt; C:\\Windows\n%programfiles% -&gt; C:\\Program Files\n%programfiles(x86)% -&gt; C:\\Program Files (x86)\n\nArguments / Command Line Parameters\nAufruf | Microsoft Learn\nfile.bat &quot;C:\\path\\to\\big file.exe&quot; otherfile.wav -foo\n%0 -&gt; file.bat\n%1 -&gt; &quot;C:\\path\\to\\big file.exe&quot;\n%~1 -&gt; C:\\path\\to\\big file.exe [quotes removed]\n%~d1 -&gt; C:\n%~n1 -&gt; big file\n%~p1 -&gt; \\path\\to\\\n%~x1 -&gt; .exe\n%~a1 -&gt; --a-------- (file attributes)\n%~t1 -&gt; 30.08.2021 13:42 (last change date)\n%~z1 -&gt; 1823 (file size in bytes)\n%~dp1 -&gt; C:\\path\\to\\ (combination of d and p parameters)\n%~f1 -&gt; C:\\path\\to\\big file.exe\n%f1 -&gt; f1 [needs tilde]\n%2 -&gt; otherfile.wav\n%~2 -&gt; otherfile.wav\n%~d2 -&gt; [current drive]\n%~p2 -&gt; [path to current folder]\n%~f2 -&gt; [drive+Path to current folder]\\otherfile.wav\n%3 -&gt; -foo\n%* -&gt; &quot;path/to/big file.exe&quot; otherfile.wav -foo\n\n[!info] Dropping files\nWhen dropping a file onto a batch file (in Windows Explorer), the batch is called with the path to the dropped file as first argument %1 (similar to how exes behave).\n\n[!info] Spaces\nPaths values with spaces in them need to be quoted, otherwise they will be split into multiple arguments.\n\n[!warning] Special values and PowerShell\nValues with a = in them have to be quoted as well. If the batch script is executed from a PowerShell both single and double quotes are necessary! '&quot;foo=bar&quot;'\n\nfor loop\n:: Variable name in loop has to be one letter\n:: but must not conflict with path parameters (see above)\n:: Loop over integer (start=1, increment=2, end&lt;=100)\nfor /l %%i in (1, 2, 100) do (echo %%i)\n\n:: Loop over all files (no folders) in current directory and subdirectories\nfor /r %%a in (*) do (echo %%a)\n:: Loop over all folders is current directory\nfor /D %%a in (*) do (echo %%a)\n\n:: Loop over all arguments\n:LoopArgs\nif [%1]==[] (goto AfterLoop)\nif [%1]==[-h] (goto PrintHelp)\nif [%1]==[-i] (set &quot;target=%2&quot; &amp; shift)\nshift\ngoto LoopArgs\n:AfterLoop\n\n:: Loop over arguments as flags and set variables\n:: .\\file.bat compile run -&gt; %compile%==&quot;1&quot;, %run%=&quot;1&quot;\nfor %%a in (%*) do (set &quot;%%a=1&quot;)\n\n:: Read file line by line\nfor /f &quot;tokens=*&quot; %%a in (%file%) do (echo %%a)\n\n:: Read file properties (see arguments above)\nfor %%a in (%file%) do (echo %%~ta)\n\n:: for i in ('where cmake.exe') do (echo i in ('powershell -command &quot;$password = Read-Host -AsSecureString -Prompt 'Enter password'; $plainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAuto([System.Runtime.InteropServices.Marshal]::SecureStringToBSTR($password)); Write-Output $plainPassword&quot;') do (\nset &quot;password=i in (*) do set LIST=%LIST% %%i\n:: LIST is just last file found\n\nset _html=Hello^&gt;World\necho %_html%\n:: creates a file called World\n\nset /p &quot;var=&quot;\n:: enter Hello^World!\necho %var%\n:: prints HelloWorld!\n\nsetlocal EnableDelayedExpansion\nset VAR=before\nif &quot;%VAR%&quot; == &quot;before&quot; (\nset VAR=after\nif &quot;!VAR!&quot; == &quot;after&quot; @echo If you see this, it worked\n)\nset LIST=\nfor %%i in (*) do set LIST=!LIST! %%i\n:: LIST contains all files\n\nset _html=Hello^&gt;World\necho !_html!\n:: Prints normally\n\nset /p &quot;var=&quot;\n:: enter Hello^World!\necho %var%\n:: prints Hello^World!\n\nendlocal\n\nEnableDelayedExpansion - Windows CMD - SS64.com\nbatch file - How do SETLOCAL and ENABLEDELAYEDEXPANSION work? - Stack Overflow\nPitfalls of EnableDelayedExpansion\n\n! in strings will need to be escaped\n\necho &quot;Hello World^!&quot;\n\nevery line with a ! on it in the batch will lead to any carets on that line being treated as escape chars\n\necho &quot;^^Hello^World!foo^^^bar&quot;\n:: Prints &quot;^^Hello^World!foo^^^bar&quot;\nsetlocal EnableDelayedExpansion\necho &quot;^^Hello^World!foo^^^bar&quot;\n:: Prints &quot;^HelloWorldfoo^bar&quot;\nendlocal\n\nhandling filenames with ! in them in a for loop will fail, because the string will be interpreted as a variable name\nsame goes for the usual way of masking passwords using powershell, since a for loop is used a password with ! in them will not be passed properly\n\nTidbits\ntitle My cool window title\npause\n\nWie Arbeite ich mit Batch UmgebungsVariablen Erstellung Umgang Erweiterungen Veränderungen - Administrator\nExecution order\nparsing - How does the Windows Command Interpreter (CMD.EXE) parse scripts? - Stack Overflow\nPhase 0) Read Line:\nPhase 1) Percent Expansion:\nPhase 2) Process special characters, tokenize, and build a cached command block: This is a complex process that is affected by things such as quotes, special characters, token delimiters, and caret escapes.\nPhase 3) Echo the parsed command(s) Only if the command block did not begin with @, and ECHO was ON at the start of the preceding step.\nPhase 4) FOR %X variable expansion: Only if a FOR command is active and the commands after DO are being processed.\nPhase 5) Delayed Expansion: Only if delayed expansion is enabled\nPhase 5.3) Pipe processing: Only if commands are on either side of a pipe\nPhase 5.5) Execute Redirection:\nPhase 6) CALL processing/Caret doubling: Only if the command token is CALL\nPhase 7) Execute: The command is executed",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "C",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/c/",
		"content": "strncpy, strncat\nchar * strncpy ( char * destination, const char * source, size_t num );\n\nchar * strncat ( char * destination, const char * source, size_t num );\n\n[!warning] warning\ndestination ist nicht null-terminiert, wenn strlen(source) &gt;= num\n\nBesser ist Folgendes:\n// Ineffizient wenn src deutlich kürzer, weil Rest von dest mit 0 gefüllt wird\nchar dest[64] = &quot;&quot;;\nstrncpy(dest, src, sizeof(dest) - 1);\ndest[sizeof(dest)-1] = 0\n// Besser (-1 als Platz fur \\0)\ndest[0] = 0;\nstrncat(dest, src, sizeof(dest) - 1);\n// Anhängen an Vorhandenes\nstrncat(dest, src, sizeof(dest) - strlen(dest) - 1);\n\nstrncpy füllt Buffer komplett mit 0 auf, wenn strlen(source) &lt; num, daher bei strings mit deutlich unterschiedlicher Länger als Alternative strncat oder memmove in Betracht ziehen!\nOperator Precedence\nhttps://en.cppreference.com/w/c/language/operator_precedence\n\n[!warning] warning\na &amp; b == c wird als a &amp; (b == c) evaluiert (gleiches gilt für die anderen bitwise Operatoren ^ | und Vergleiche &lt; &gt; &lt;= &gt;=).\nEvaluations Reihenfolge: (quasi alle Operatoren) -&gt; &amp; AND -&gt; ^ XOR -&gt; | OR -&gt; Logical -&gt; ternary -&gt; assignment -&gt; comma operator\n\n[!warning]\n&lt;&lt; und &gt;&gt; werden nach +-*/ evaluiert, aber vor den meisten anderen Operatoren\n\nDynamischer Array ohne Templates\nhttps://github.com/tree-sitter/tree-sitter/blob/master/lib/src/array.h\nNutzt macro zur Definition eines eigenen structs pro Type.\nmalloc + sizeof\nstruct someStruct *var = malloc(sizeof(struct someStruct));\n// better (code does not need to change if type changes):\nstruct someStruct *var = malloc(sizeof(*var));\n// usually even better (fills with 0)\nstruct someStruct *var = calloc(1, sizeof(*var));\n// usually even better (shorter, on stack, 0 init when static or one member is set in struct literal):\n// NOTE: inits to default values in C++ (0 if no defaults given)\nstruct someStruct var = {.member = 1, ...};\nstruct someStruct var = {0};\n\nhttps://felipec.wordpress.com/2024/03/03/c-skill-issue-how-the-white-house-is-wrong/\noffsetof, container_of macro\noffsetof gets the byte offset for a member in a struct:\n// Check if order of memers in two structs are equal\n// So one can be casted into the other\nstatic_assert(offsetof(Vector2, x) == offsetof(Rectangle, x) &amp;&amp; offsetof(Vector2, y) == offsetof(Rectangle, y));\n\ncontainer_of() is part of the Linux kernel and basically does the reverse, pass in a pointer to a member and get a pointer for the surrounding type: https://radek.io/2012/11/10/magical-container_of-macro/\nMacro stringification\n#define MAKESTRING(n) STRING(n)\n#define STRING(n) #n\n\n// prints __LINE__ (not expanded)\nstd::cout &lt;&lt; STRING(__LINE__) &lt;&lt; std::endl;\n// prints 42 (line number)\nstd::cout &lt;&lt; MAKESTRING(__LINE__) &lt;&lt; std::endl;\n\nThis is the stringize operation, it will produce a string literal from macro parameter (n). Two lines are required to allow extra expansion of macro parameter. (https://stackoverflow.com/a/48464280)\nOpenMP - Simple Parallelisierung\nOpenMP and pwrite() (nullprogram.com)\n/* schedule(dynamic, 1): treat the loop like a work queue */\n#pragma omp parallel for schedule(dynamic, 1)\nfor (int i = 0; i &lt; num_frames; i++) {\nstruct frame *frame = malloc(sizeof(*frame));\nfloat theta = compute_theta(i);\ncompute_frame(frame, theta, beta);\n// only one thread at a time can be in the critical section\n#pragma omp critical\n{\nwrite(STDOUT_FILENO, frame, sizeof(*frame));\n}\nfree(frame);\n}\n\n#pragma wird ignoriert, wenn OpenMP nicht unterstützt wird -&gt; Code läuft normal ab, wird nur nicht parallelisiert.\nWird auch von Windows unterstützt (bis OpenMP 2.0)\nswitch\nswitch wird in Assembler als Jump-Table umgesetzt. Input wird in Speicheradresse umgerechnet, an der sich der Code für die korrekte Anweisung aus dem switch befindet.\nComplexity: O(1) + C\nif-tree Complexity: O(n) + K | K &lt; C\n-&gt; schneller als if-tree wenn man viele Bedingungen hat\nhttps://www.youtube.com/watch?v=fjUG_y5ZaL4\nCompiler, Linker\nPreprocessor only:\n&gt; gcc -E main.c -o main.i\nCompiler:\n&gt; gcc -S main.i -o main.s\nAssembler:\n&gt; as main.s -o main.o\nPreprocessor + Compiler + Assembler:\n&gt; gcc -c main.c -o main.o\nLinker:\n&gt; ld obj1.o /usr/lib/obj2.o -lc main.o -dynamic-linker dynamiclib.so -o main.exe\nFull pipeline:\n&gt; gcc -o out.exe ./main.c -llibraryname -LLibrary/directory\n\nCompiler generiert Object-Datei (.o, .obj). Diese enthält Assembler + Informationen zu Abhängigkeiten und Aufbau für Linker.\nLinker verbindet mehrere Objekt-Dateien zu einer Executable.\nDump Assembler:\n&gt; gcc -S file.c\n&gt; gcc -S -o asm_output.s file.c\n\nDump from Object-file:\n(-S intermixes source code)\n(-rwC show symbol relocations, disable line-wrapping, demangle)\n&gt; objdump -S -d -rwC -Mintel file.o &gt; file.dump\n\nDump Assembler optimized:\nhttps://stackoverflow.com/a/38552509\n&gt; g++ -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti -fverbose-asm -Wall -Wextra foo.cpp -O3 -masm=intel -S -o- | less\n\nShow dependencies:\nldd main.exe\n\np == NULL vs NULL == p\nvoid *p = malloc(8);\nif (p = NULL) {} // no error, p is assigned NULL\nif (NULL = p) {} // error, we wanted to write NULL == p\n\nmain()\nmain() wird vom Compiler anders optimiert, da die Funktion nur einmal aufgerufen wird (Aussage irgendwo bei Stackoverflow gelesen)\nBit Hacks\nhttps://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\nCount set bits in an int32 and more...\nBitmask with more than 64 entries\ninternal b32\nEntityHasProperty(Entity *entity, EntityProperty property)\n{\nreturn !!(entity-&gt;properties[property / 64] &amp; (1ull &lt;&lt; (property % 64)));\n}\n\ninternal Entity *\nSetEntityProperty(Entity *entity, EntityProperty property)\n{\nentity-&gt;properties[property / 64] |= 1ull &lt;&lt; (property % 64);\nreturn entity;\n}\n\nenum EntityProperty {\n\tENT_PROP_NONE=0,\n\tENT_PROP_TOGGLE,\n\t//...\n\tEntityProperty_MAX\n}\n\n#define EntityProperty_MAX 123\nstruct Entity {\n\tu64 properties[(EntityProperty_MAX+63)/64];\n\t// ...\n}\n\nSimple solution of using an &quot;automatically&quot; scaling array (at compile time) and accessor functions, which target the right entry for a given value.\nStack space\nStack space is limited and you can run out, especially if you place a large array on it.\nDefault limits\n\nMSVC: 1MB\nLinux: 8MB (defined by OS)\nTo increase the limit\nMSVC: /F compiler option Documentation\nGCC (Windows): -Wl,--stack,&lt;bytes&gt; option Source\nLinux: ulimit -s (globally) or locally\nIf you run out of stack due to allocations, the program might crash directly after startup (usually without an error message). The error will be in the chkstk.asm module. c++ - App crash after modifying a structure - Stack Overflow\n\nOpaque struct\n// foo.h\ntypedef struct foo foo;\nfoo *init();\nvoid doStuff(foo *f);\nvoid freeFoo(foo *f);\n\n// foo.c\nstruct foo {\nint x;\nint y;\n};\n\nHides internal details, datamembers and functions of a struct from the user (i.e. only the struct name is known to the public API). Essentially this means: do not access the internals of this struct manually, only pass it to the accompanying API functions. Is the equivalent of making things protected/private in C++.\nAdvantage: Implementation details of struct can change and user-code is unaffected.\nBitshift\n// &gt;&gt; shifts all bits right and fills with 0 (+int and uint) or 1 (-int, preserves sign bit, technically compiler dependant)\n// -1 is all bits=1 in two's complement\n// &lt;&lt; always fills with 0 and preserves sign bit on int\n\nint test = 1;\nprintf(&quot;%d | %d\\n&quot;, test &lt;&lt; 2, test &gt;&gt; 2);\n// prints 4 | 0\ntest = -1;\nprintf(&quot;%d %d\\n&quot;, test &lt;&lt; 2, test &gt;&gt; 2);\n// prints -4 | -1\n\nMore info: https://en.wikipedia.org/wiki/Bitwise_operations_in_C#Right_shift_&gt;&gt;\nRounding\nval | cast | floorf | roundf | ceilf\n-1.9 | -1 | -2.0 | -2.0 | -1.0\n-1.5 | -1 | -2.0 | -2.0 | -1.0\n-1.2 | -1 | -2.0 | -1.0 | -1.0\n-0.9 | 0 | -1.0 | -1.0 | -0.0\n-0.5 | 0 | -1.0 | -1.0 | -0.0\n-0.1 | 0 | -1.0 | -0.0 | -0.0\n0.1 | 0 | 0.0 | 0.0 | 1.0\n0.5 | 0 | 0.0 | 1.0 | 1.0\n0.9 | 0 | 0.0 | 1.0 | 1.0\n1.2 | 1 | 1.0 | 1.0 | 2.0\n1.5 | 1 | 1.0 | 2.0 | 2.0\n1.9 | 1 | 1.0 | 2.0 | 2.0\n\n(int)-cast not recommended for values that can be both positive and negative, since the range (-1,1) gets mapped to 0, basically introducing an off-by-one error whenever we cross 0 (e.g. when dealing with 2D/3D coordinates)\nfloorf and ceilf are more consistent and map the same amount of values to a single int across the whole range of float/double\nroundf is also fine in that regard, one just has to deal with the fact, that the switch from one int to the next happens in the middle of it\n\n#include &lt;stdout.h&gt;\n\nint main()\n{\nfloat values[] = {-1.9, -1.5, -1.2, -0.9, -0.5, -0.1, 0.1, 0.5, 0.9, 1.2, 1.5, 1.9};\nprintf(&quot; val | cast | floorf | roundf | ceilf\\n&quot;);\nfor (int idx = 0; idx &lt; sizeof(values) / sizeof(values[0]); ++idx)\n{\nfloat v = values[idx];\nprintf(&quot;% 4.1f | %4d | % 6.1f | % 6.1f | % 4.1f\\n&quot;, v, (int)v, floorf(v), roundf(v), ceilf(v));\n}\n}\n\nint sizes\n#include &lt;stdint.h&gt;\nint64_t test = -(1ULL &lt;&lt; 32) - 2;\nint32_t test2 = test;\nprintf(&quot;%lld %d\\n&quot;, test, test2);\n// prints: -4294967298 -2\n\nCasting a bigger int type to a smaller one will preserve the lower N-1 bits and the sign (or lower N bits for unsigned types)\n\nImplicit conversions\nImplicit conversions - cppreference.com\nBreaking it down to practical rules (ignoring niche use-cases like complex and imaginary types).\nTwo different types as argument in an arithmetic operation are converted as follows:\n\nan integer is converted to match a floating type\nthe smaller type is converted to match the larger type\nsigned integers are converted to unsigned, unless the signed type can represent all possible values of the unsigned type (i.e. the signed type is bigger)\nExamples:\n\n// rule 1\n1.f + 20000001 // 20000001 is converted to float 20000000.f\n// result after addition is float 20000000.f\n// (since 20000001.f is not representable)\n// rule 2\n1.f + 2.0 // 1.f is converted to double 1.0\n// result after addition is double 3.0\n(char)'a' + 1L // (char)'a' is converted to long 97\n// result after addition is signed long 98\n5UL - 2ULL // 2UL is converted to unsigned long long 2\n// result after addition is unsigned long long 3\n// rule 3 (+ rule 2)\n2u - 10 // 10 is converted to unsigned int 10\n// result after addition is unsigned int\n// 4294967288 (-8 modulo 2^32 -&gt; overflow)\n0UL - 1LL // 0UL is converted to signed long long 0\n// result after addition is signed long long -1\n// NOTE: this example is different on\n// cppreference and depends on the size of\n// (unsigned) long which is 32-bits in my case\n\nFiles - text vs. binary mode\nFILE *f = fopen(&quot;somefile.txt&quot;, &quot;r+&quot;); // text mode\nFILE *b = fopen(&quot;somefile.txt&quot;, &quot;r+b&quot;); // binary mode\n\nText mode converts \\r\\n to \\n on input and the other way around on output on a Windows machine (and maybe other characters too)\nbecause of this, fseek-ing into the middle of \\r\\n has some unexpected effects (probably undefined behavior)\n\nreading might not produce the expected result and actually move the file pointer backwards before the \\r\\n sequence\n\nthis is one reason why fseek() should only be called with values of ftell() for text files (as per standard definition)\nreading from a text file or fseek-ing into it is slower than with a binary file\n\ncounting line breaks is about 2-3x faster with a binary file (using fread(), a for loop and a 65K buffer)\n\nif the file is a text file fscanf, fgets, etc. work in both modes as expected (so if line endings do not matter, using binary mode can still be faster)\nLinks\n\nc++ - Difference between opening a file in binary vs text - Stack Overflow\n\nUTF8\n\nin both modes: watch out for UTF8 BOM\n\nfirst 3 bytes\nhex: 0xEF, 0xBB, 0xBF\nuint: 239, 187, 191\nchar: -17, -69, -65\nWill probably not appear in a text editor and taken into account when calculating position (e.g. in Notepad++)\nDoes appear in read chars in both text and binary mode and affects ftell()\n\nUTF8 characters (which may be more than 1 Byte) can be read in both modes. Generally it is best to just treat them as bytes/char* and pass them unmodified to printf/puts/etc. (which &quot;just works&quot;), if looking into single characters is not required.\n\nNote that strlen will not produce the &quot;expected&quot; results with multi-byte chars (i.e. count them as 2+)\nalso the buffer holding them needs to account for this and potentially be bigger\n\nLinks\n\nlinux - How to Read/Write UTF8 text files in C? - Stack Overflow\nc - Printing UTF-8 strings with printf - wide vs. multibyte string literals - Stack Overflow\n\nUnity build\n\n#include all .c files in one file and only send that to the compiler\nFaster than non-incremental builds\nSlower than &quot;clever&quot; incremental builds with tools like cmake+ninja\nIs also what raddbg uses (main .c file #includes all .h and .c files - module .c files barely #includeanything on their own - not even the corresponding .h file)\nComparing C/C++ unity build with regular build on a large codebase | Hereket\nSidenote: The C compiler is up to 10x faster than C++ compiler if templates and such are used in the C++ code\n\nMacro best practices\n\nFor multiple statements: wrap in do ... while(0) loop\nRationale: This prevents incorrect usage in unbracketed if statements, which would most likely lead to unexpected results. Also statements require a semicolon at the end as delimiter.\n\n#define foo(x) bar(x); baz(x)\nif (x &gt; 3)\n\tfoo(x)\n// will lead to\nif (x &gt; 3)\n\tbar(x);\nbaz(x);\n\n#define foo_fix(x) do { bar(x); baz(x); } while(0)\n\nWhen a macro should not be defined in one case (e.g. debug builds), replace it with ((void)0) instead of leaving it blank\nRationale: This will still work if the macro is used with the comma expression or ternary operator\n\n#ifdef NDEBUG\n\t#define debug_print(s) printf(s)\n#else\n\t#define debug_print(s) ((void)0)\n#endif\n\nfor (int idx = 0; idx &lt; len; ++idx, debug_print(&quot;foo&quot;)) { ... }\nx &gt; 0 ? debug_print(&quot;greater&quot;) : debug_print(&quot;smaller&quot;)\n\nFor macros that return a value, which is not needed, consider explicitly discarding that value to avoid compiler warnings and misuse\n\n#define textf(f) ((void)snprintf(tempBuf, sizeof(tempBuf), f))\n\nMSVC Build Insights\nFinding build bottlenecks with C++ Build Insights - C++ Team Blog\nUse the following to get insights into the build process of your C/C++ app. Find out which files are included way too often, which files take long to parse or compile.\n\nDownload and install the latest Visual Studio 2019. (vcperf seems to also be included in the Visual Studio Build Tools 2022)\nObtain WPA by downloading and installing the latest Windows ADK.\nNOTE: I do not remember doing the following two steps, so maybe they can be skipped as of 05/2025\nCopy the perf_msvcbuildinsights.dll file from your Visual Studio 2019’s MSVC installation directory to your newly installed WPA directory. This file is the C++ Build Insights WPA add-in, which must be available to WPA for correctly displaying the C++ Build Insights events.\n\nMSVC’s installation directory is typically: C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\{Edition}\\VC\\Tools\\MSVC\\{Version}\\bin\\Hostx64\\x64.\nWPA’s installation directory is typically: C:\\Program Files (x86)\\Windows Kits\\10\\Windows Performance Toolkit.\n\nOpen the perfcore.ini file in your WPA installation directory and add an entry for the perf_msvcbuildinsights.dll file. This tells WPA to load the C++ Build Insights add-in on startup.\nOpen an elevated x64 Native Tools Command Prompt for VS 20XX.\nObtain a trace of your build:\n\nRun the following command: vcperf /start MySessionName.\nBuild your C++ project from anywhere, even from within Visual Studio (vcperf collects events system-wide).\nRun the following command: vcperf /stop MySessionName outputFile.etl. This command will stop the trace, analyze all events, and save everything in the outputFile.etl trace file.\n\nOpen the trace you just collected in WPA.",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "CSS",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/css/",
		"content": "Selectors\n/*** Element types ***/\na\nimg\nbody\n/*** Attributes ***/\na[title] /* a element with title attribute */\nh1[class~=&quot;logo&quot;] /* h1 element whose class contains logo */\n/*** Classes ***/\n.myClass\nli.myClass /* only applies to li elements */\n.myClass.other /* only when both myClass and other present */\n/*** IDs ***/\n#test /* all elements with ID test */\n[id=test] /* same thing */\n/*** universal ***/\n* /* all elements */\n*.warning /* all elements with class warning */\n/*** Pseudo-classes ***/\n:hover /* mouse over */\n:active /* user actives, i.e. clicks button/link */\n:focus /* inout element with focus (e.g. active text-box) */\n:focus-within /* element or descendants have focus */\n:visited /* link/a element that has been visited */\n:target /* element with id matching fragment of URL (i.e. http://www.example.com/index.html#section2 -&gt; id=&quot;section2&quot;) */\n:first-child, :last-child\n:disabled, :read-only, :invalid, :checked\n/* there are many more */\n\nCombinators\nli li /* li elements with ancestor li - i.e. 2nd+ nested li */\n.center img /* img with any ancestor with class center */\n.content &gt; div.nice /* div with class nice and direct parent with class content */\nimg + p /* element p directly following img and same parent */\nimg ~ p /* any element p following an img with the same parent */\nspan, div /* apply same style to both span and div */\n\nClass nesting example\nJSFiddle - Code Playground\n\nem, rem\nem is factor of font pixel-size in parent container\nrem works the same, but always references the root element &lt;html&gt;. Default font-size is 16px.\n&lt;html&gt;\n\tThis text is 16px big\n\t&lt;div style=&quot;font-size:10px&quot;&gt;\n\t\tThis text is 10px big\n\t\t&lt;div style=&quot;font-size:2em&quot;&gt;\n\t\t\tThis text is 20px big (2 * 10px)\n\t\t\t&lt;div style=&quot;font-size:1.5em&quot;&gt;\n\t\t\t\tThis text is 30px big (1,5 * 2 * 10px)\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div style=&quot;font-size:1.5rem&quot;&gt;\n\t\t\t\tThis text is 24px big (1,5 * 16px)\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/html&gt;\n\nhttps://jsfiddle.net/d5rbwqza/",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Go",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/go/",
		"content": "Cheatsheet\nTypes and Zero-Values\nbool - false\nstring - &quot;&quot;\nint (int8..int64), uint (uint8..uint64) - 0\nfloat32, float64 - 0\ncomplex64, complex128 - 0\nuintptr, byte (uint8), rune (int32) - 0\ninterface{} (any) - nil\n[slice, map, pointer] - nil\n[struct] - all members = their zero-value\n\nvar, const\nvar name string = &quot;val&quot; // = val optional\nname := &quot;val&quot; // implicit typing (name is string)\nintVal := int(true) // type conversion\nconst Pi = 3.14 // no :=\nX, Y := 1, 2 // X=1, Y=2\nptr := &amp;name // type is *string\nvar any interface{}\nany = Pi\nany = &quot;hello&quot;\nname,ok := any.(string) // type assertion\n\nstruct\ntype Vertex struct {\n\tX, y float64 // X is public, y is private\n}\np := Vertex{1, 3}\np == Vertex{1, 3} // true (only shallow check!)\nvar p2 = Vertex{X:3.14} // Y:0 is implicit\npp := &amp;Vertex{} // type *Vertex, X,Y=0\nval := pp.X // access via dot (unlike C)\n\nArray, slice\nvar array [10]float32 // initialized, size is fixed\narray2 := [4]int{1,2,3,4}\nvar slice []int = array2[0:2] // [start,end) -&gt; 1,2\nlen, cap := len(slice), cap(slice) // 2, 4\nnewSlice := make([]float32, 2, 3) // dynamic, len=2, cap=3\nnewSlice = append(newSlice, Pi, 42.13) // always re-assign!\nnewSlice = append([]float32{1.0}, newSlice...) // prepend\ncopy(destSlice, sourceSlice)\nvar nilSlice []int = nil\nnilSlice = append(nilSlice, 10) // works\n\nMap operations\nvar m map[string]float32 // not initialized!\nm = make(map[string]float32)\nm2 := map[string]Vertex {\n\t&quot;foo&quot;: {1,2},\n}\ndelete(m2, &quot;foo&quot;)\nv, ok := m2[&quot;foo&quot;] // v={0,0} (zero value), ok=false\nclear(m2) // Go 1.21, also works on slices\n\nLoops, switch\nfor i := 0; i &lt; len(str); i++ // all optional, for -&gt; while\nfor i, value := range array // _,value or just i pssible\nfor i := range 10 // 0..9\nswitch os := runtime.GOOS; os { // condition optional\n\tcase &quot;linux&quot;:\n\t\tfallthrough // implicit break, explicit fallthrough\n\tcase getWorstOs(): // not just static values\n\tdefault:\n\tcase val == test(): // alt. if no condition\n}\nswitch v := i.(type) { // type switch\n\tcase int: // v will int value\n}\n\nReturn values, error handling\n// ignore return values, if with statement, error handling\nif _, err := funcWithErr(); err != nil {\n\tprintln(err) // print to stderr\n} else {\n\t// do else, err still valid here\n}\n// err no longer valid here\n\nFunctions\nfunc add(x, y int) (int, error) { } // return val\nfunc sub(x, y int) (result int) { } // naked return\nfunc compute(worker func(int, int) int) int { }\nfn := func(x int) bool { }\nfunc varArgs(vals ...int) // for i,v := range vals\ntype act func(index int) (res int)\ngo anyFunction(1,2,&quot;foo&quot;) // leightweight thread\n// same address space, needs synchronization\n\nMethods\nfunc (v Vertex) DotProduct(other Vertex) int {\n\treturn v.X * other.X + v.Y * other.Y\n}\nfunc (v *Vertex) Scale(f int) {\n\tv.X *= f\n\tv.Y *= f\n} // = func Scale(v *Vertex,f int), Scale(&amp;p,4)\nangle := p.DotProduct(Vertex{3,4})\np.Scale(4) // same operator for pointer and value\n\nInterfaces\ntype Abser interface { // define\n\tAbs() float64\n}\nfunc (v *Vertex) Abs() float64 { // implement implicitly\n\tif (v == nil) { return 0 } // need only for pointers\n\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\nvar a Abser\nval := a.Abs() // panic, since a does not hold a value\nv := Vertex{3,4}\na = &amp;v // Vertex* implements Abser, so we can assign\nfmt.Printf(&quot;%v %v %T\\n&quot;,a.Abs(),a,a) //5 &amp;{3 4} *main.Vertex\nvar v2 *Vertex\na = v2 // v2 is nil, can still call methods of it:\nfmt.Printf(&quot;%v %v %T\\n&quot;,a.Abs(),a,a) //0 &lt;nil&gt; *main.Vertex\n\nChannels\nc := make(chan int)\nc &lt;- 42 // send value to channel c (blocking)\nx := &lt;-c // receive value from channel c (blocking)\nfmt.Printf(&quot;%v %v\\n&quot;, &lt;-c, &lt;-c)\n// buffered channel (blocks: send on full, receive on empty)\ncb := make(chan int, 100) // capacity of 100 values\nclose(c) // close channel (only sender!, optional)\nv, ok := &lt;-c // ok is false if channel is empty and closed\nfor i := range c // loop until channel is empty and closed\nselect { // blocks until one case can be run (random if 2+)\n\tcase c &lt;- x: // same syntax as switch, no break needed\n\tcase &lt;-quit:\n\tdefault: // run if nothing is ready\n}\n\nPublic / Private (exported names)\n\n[!important] Capitalization is access/scope management\ntype Example struct {\nPublicField string\nprivateField int // unexported field\n}\nfunc Add(val int) int { ... } // exported\nfunc subt(val int) int { ... } // not exported\n\nstruct members and functions starting with a Capital letter are public/exported, those with lowercase letters are private/unexported (i.e. can only be accessed from the same module and will not be used in marshalling)\nOrganizing Modules\nOrganizing a Go module - The Go Programming Language\nUnofficial (for big projects): GitHub - golang-standards/project-layout: Standard Go Project Layout\ngo mod init &lt;modulename&gt;\ngo get &lt;modulename&gt;\n\nProgram with main\n-&gt; standalone, will usually not be imported into other projects\n//// go.mod file\n// module name needs to be unique in workspace\n// name can be anything, but url is preferred if public repo,\n// because this enables installation by:\n// go install github.com/someuser/modname@latest\nmodule github.com/someuser/modname\n\ngo 1.22.1\n\nrequire (\n\t// external packages (get added by go get)\n)\n\n//// main.go file\n// filename can be anything\n// package should be main\npackage main\n\nfunc main() {\n\t// ...\n}\n\nPackages / Libraries\n-&gt; might be imported into other projects\n//// go.mod file\n// path to code repository, so it can be easily imported by\n// import &quot;github.com/someuser/modname&quot;\nmodule github.com/someuser/modname\n\ngo 1.22.1\n\nrequire (\n\t// external packages (get added by go get)\n)\n\n[!INFO] Exported Symbols\nSymbols (e.g. types and functions) of a module that you want to export, need a name starting with an uppercase letter.\n\n//// modname.go file\n// package name = folder name of project (last component of module name)\npackage modname\n\nfunc main() { // not exported\n\t// ...\n}\n\nfunc Exported() {\n// ...\n}\n\nMultiple files / folders\n\nMain program or library code should be in root directory (next to go.mod)\nAll go files in the same directory declare the same package name\nSub-packages should reside in their own directories. Their package name again should be the name of the directory (e.g. hash/hash.go -&gt; package hash)\n\nimport &quot;github.com/someuser/modname/hash&quot; (assuming module name from example above)\nNo separate go.mod file required\n\nGo will not import packages placed in an internalfolder from outside of the project (e.g. internal/trace/trace.go will only be available to its module)\nMixing of program and libraries in same module/folder is possible\n\nproject-root-directory/\ngo.mod\nmodname.go -&gt; main module\nmodname_test.go -&gt; test code\nauth/\nauth.go -&gt; public package auth\nauth_test.go\ntoken/\ntoken.go -&gt; public package auth/token\ntoken_test.go\nhash/\nhash.go -&gt; public package hash\ninternal/\ntrace/\ntrace.go -&gt; private package trace\ncmd/\nprog1/\nmain.go -&gt; test or helper program\nprog2/\nmain.go -&gt; another bundled command\n\nLocal overrides\nIn go.mod:\nreplace domain.ext/path/lib =&gt; ../local/path\n\nWill load library from local files, instead of external repo/cache. Good for testing changes in library modules.\nUpdate modules\ngo get -u\ngo mod tidy\n\nTesting\n\nAdd a test - The Go Programming Language\nPackage: auth.go -&gt; Test Code: auth_test.go\nsame package name\nimport &quot;testing&quot;\nfunc TestSomething(t *testing.T) { }\nt.Fatalf(&quot;Some error occurred!&quot;)\ngo test -v to execute tests\n\npackage greetings\n\nimport (\n&quot;testing&quot;\n&quot;regexp&quot;\n)\n\n// Hello() is external function under test\nfunc TestHelloName(t *testing.T) {\nname := &quot;Gladys&quot;\nwant := regexp.MustCompile(`\\b`+name+`\\b`)\nmsg, err := Hello(&quot;Gladys&quot;)\nif !want.MatchString(msg) || err != nil {\nt.Fatalf(`Hello(&quot;Gladys&quot;) = %q, %v, want match for %#q, nil`, msg, err, want)\n}\n}\n\nfunc TestHelloEmpty(t *testing.T) {\nmsg, err := Hello(&quot;&quot;)\nif msg != &quot;&quot; || err == nil {\nt.Fatalf(`Hello(&quot;&quot;) = %q, %v, want &quot;&quot;, error`, msg, err)\n}\n}\n\nuseful modules\nfmt\nstrings\nstrconv\nioutil\nos\nflag\njson\n\nenum / iota\nconst (\n\tc0 = iota // c0 == 0\n\tc1 = iota // c1 == 1\n\tc2 = iota // c2 == 2\n)\n\nconst (\n\ta = 1 &lt;&lt; iota // a == 1 (iota has been reset)\n\tb = 1 &lt;&lt; iota // b == 2\n\tc = 1 &lt;&lt; iota // c == 4\n)\n\nconst (\n\tu = iota * 42 // u == 0 (untyped integer constant)\n\tv float64 = iota * 42 // v == 42.0 (float64 constant)\n\tw = iota * 42 // w == 84 (untyped integer constant)\n)\n\nconst x = iota // x == 0 (iota has been reset)\nconst y = iota // y == 0 (iota has been reset)\n\nconst (\n\tbit0, mask0 = iota, 1&lt;&lt;iota - 1 // bit0 == 0, mask0 == 0\n\tbit1, mask1 // bit1 == 1, mask1 == 1\n\t_, _ // skips iota == 2\n\tbit3, mask3 // bit3 == 3, mask3 == 7\n)\n\nconst (\n\tc0 = -1\n\tc1 // c1 == -1\n\tc2 = iota // c2 == 2\n)\n\nJSON\nUse `json:&quot;...&quot;` strings to add compile time encoding information. First argument is the exported name of the member. omitempty can be used to remove null values from the export.\n\n[!IMPORTANT]\nYou need to rename fields, if you want to have lowercase starting letters for fields, since only <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"#public-private-exported-names\">exported fields</a> are included in the marshalling process and exported fields need to start with a capital letter.\n\n[!WARNING] nil slices ≠ empty slices in JSON\nNil slices (unitialized slices) are exported as &quot;null&quot;, while empty slices (len=0, cap=0) are exported as empty array []. Other than that they behave mostly the same in Go. See null - nil slices vs non-nil slices vs empty slices in Go language - Stack Overflow\n\ntype Payload struct {\n\tArray []int `json:&quot;arr&quot;`\n\tArray2 []int `json:&quot;other&quot;`\n\tArray3 []int `json:&quot;three,omitempty`\n\tfoo int // not exported, not considered in json marshal/unmarshal\n}\nvar s1 []int // nil slice\ns2 := []int{} // non-nil, empty slice\ns3 := make([]int, 0) // internally same as s2\npl := Payload{s1,s2,s3}\nbytes, err := json.Marshal(pl)\n// result: {&quot;arr&quot;:null,&quot;other&quot;:[]}\n\nMarshal/Unmarshal\nMarshal = Encoding (json.Marshal(var) gibt json string als []byte zurück)\nUnmarshal = Decoding (json.Unmarshal(byteArray, outVar) dekodiert das json byte array in outVar)\nEmbedded struct\ntype Point struct {\n\tX, Y float64\n}\ntype Rect struct {\n\tPoint\n\tW, H float64\n}\n// on init, have to go through embedded type explicitly\nr := Rect{Point: Point{0,2}, W:0, H:4}\n// on access we can use the sub-member names directly\nr.X = 1\nr.W = 3\nfmt.Println(r) // {{1 2} 3 4}\n\nClosures\nfunc adder() func(int) int {\n\tsum := 0\n\t// return func has access to sum, which is bound to return func\n\treturn func(x int) int {\n\t\tsum += x\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\t// each adder has own context and sum value\n\tpos, neg := adder(), adder()\n\tfor i := 1; i &lt; 4; i++ {\n\t\tfmt.Println(\n\t\t\tpos(i),\n\t\t\tneg(-2*i),\n\t\t)\n\t}\n}\n// 1 -2\n// 3 -6\n// 6 -12\n\nDefer\npackage main\nimport &quot;fmt&quot;\nfunc main() {\n\tfmt.Print(&quot;say: &quot;)\n\tdefer fmt.Println(&quot;!&quot;)\n\tdefer fmt.Print(&quot; world&quot;)\n\tfmt.Print(&quot;hello&quot;)\n}\n// say: hello world!\n// useful for closing files, channels, etc.\n\nMutex\nimport &quot;sync&quot;\nvar mu sync.Mutex\nmu.Lock()\nmu.Unlock()\ndefer mu.Unlock() // useful to make sure mutex is unlocked\n\nNil Interfaces (expanded)\ntype I interface {\n\tM()\n}\ntype T struct {\n\tS string\n}\nfunc (t *T) M() {\n\tif t == nil {\n\t\tfmt.Println(&quot;&lt;nil&gt;&quot;)\n\t\treturn\n\t}\n\tfmt.Println(t.S)\n}\nfunc main() {\n\tvar i I\n\tvar t *T // t is nil\n\ti = t // i is nil\n\t// calling interface methods of nil values is possible\n\ti.M() // prints &lt;nil&gt;\n\t\n\tvar i2 I // nil interface holds no value or type\n\ti2.M() // runtime exception (panic) - Go does not know which method to call\n}\n\nChannels (expanded)\nChannel Axioms | Dave Cheney\n\nnil channels (default value) = BAD\n\nsend + receive on nil channels block forever\n\nCaution with closed channels\n\nsend on a closed channel panics\nreceive on a closed channel (with empty buffer) immediately returns with the zero value\n\nCommon interfaces\n// Stringer (e.g. for fmt.Println())\nimport &quot;fmt&quot;\ntype Person struct {\n\tName string\n\tAge int\n}\nfunc (p Person) String() string {\n\treturn fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)\n}\n// Error (e.g. for returning error from func)\ntype MyError struct {\n\tWhen time.Time\n\tWhat string\n}\nfunc (e *MyError) Error() string {\n\treturn fmt.Sprintf(&quot;at %v, %s&quot;,\n\t\te.When, e.What)\n}\n// Reader (implemented by files, network, compressors, etc.)\nimport &quot;io&quot;\n// interface: func (T) Read(b []byte) (n int, err error)\nr := strings.NewReader(&quot;Hello, Reader!&quot;)\nb := make([]byte, 8)\nfor {\n\tn, err := r.Read(b)\n\tfmt.Printf(&quot;n = %v err = %v b = %v\\n&quot;, n, err, b)\n\tfmt.Printf(&quot;b[:n] = %q\\n&quot;, b[:n])\n\tif err == io.EOF {\n\t\tbreak\n\t}\n}\n// n = 8 err = &lt;nil&gt; b = [72 101 108 108 111 44 32 82]\n// b[:n] = &quot;Hello, R&quot;\n// n = 6 err = &lt;nil&gt; b = [101 97 100 101 114 33 32 82]\n// b[:n] = &quot;eader!&quot;\n// n = 0 err = EOF b = [101 97 100 101 114 33 32 82]\n// b[:n] = &quot;&quot;\n\nGenerics\n// Index returns the index of x in s, or -1 if not found.\n// comparable is a special builtin interface for Generics\nfunc Index[T comparable](s []T, x T) int {\n\tfor i, v := range s {\n\t\t// v and x are type T, which has the comparable\n\t\t// constraint, so we can use == here.\n\t\tif v == x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n// Defining your own Generics interface\ntype Number interface {\n\tint | int32 | int64 | float32 | float64\n}\nfunc sum[T Number](nums []T) T {\n\tvar result T\n\tfor i := range nums {\n\t\tresult += numbers[i]\n\t}\n\treturn result\n}\n// List represents a singly-linked list that holds values of any type.\ntype List[T any] struct {\n\tnext *List[T]\n\tval T\n}\n\nBreak Labels\ndone := time.After(1 * time.Millisecond)\nnumbers := make(chan int)\nouter:\nfor {\nselect {\ncase &lt;-done:\nbreak outer\ncase num := &lt;-numbers:\nfmt.Println(num)\n}\n}\n\nFormat time string\nfmt.Println(time.Now().Format(&quot;20060102150405&quot;))\n\nconst (\nstdLongMonth = &quot;January&quot;\nstdMonth = &quot;Jan&quot;\nstdNumMonth = &quot;1&quot;\nstdZeroMonth = &quot;01&quot;\nstdLongWeekDay = &quot;Monday&quot;\nstdWeekDay = &quot;Mon&quot;\nstdDay = &quot;2&quot;\nstdUnderDay = &quot;_2&quot;\nstdZeroDay = &quot;02&quot;\nstdHour = &quot;15&quot;\nstdHour12 = &quot;3&quot;\nstdZeroHour12 = &quot;03&quot;\nstdMinute = &quot;4&quot;\nstdZeroMinute = &quot;04&quot;\nstdSecond = &quot;5&quot;\nstdZeroSecond = &quot;05&quot;\nstdLongYear = &quot;2006&quot;\nstdYear = &quot;06&quot;\nstdPM = &quot;PM&quot;\nstdpm = &quot;pm&quot;\nstdTZ = &quot;MST&quot;\nstdISO8601TZ = &quot;Z0700&quot; // prints Z for UTC\nstdISO8601ColonTZ = &quot;Z07:00&quot; // prints Z for UTC\nstdNumTZ = &quot;-0700&quot; // always numeric\nstdNumShortTZ = &quot;-07&quot; // always numeric\nstdNumColonTZ = &quot;-07:00&quot; // always numeric\nstdFracSecond0 = &quot;.0&quot;, &quot;.00&quot; // trailing zeros included\nstdFracSecond9 = &quot;.9&quot;, &quot;.99&quot; // trailing zeros omitted\n)\n\nReading a file\n// full file into memory\nwholeFile, err := ioutil.ReadFile(&quot;file.txt&quot;)\n\n// line-by-line\nfile, err := os.Open(&quot;file.txt&quot;)\nif err != nil { log.Fatal(err) }\ndefer file.Close()\nscanner := bufio.NewScanner(file)\nfor scanner.Scan() {\n\tfmt.Println(scanner.Text())\n}\nif err := scanner.Err(); err != nil { log.Fatal(err) }\n// by words\nscanner := bufio.NewScanner(file)\nscanner.Split(bufio.ScanWords)\nfor Scanner.Scan() {\n\tfmt.Println(scanner.Text())\n}\n\n// in chunks\nfile, err := os.Open(&quot;file.txt&quot;)\nif err != nil { log.Fatal(err) }\ndefer file.Close()\nconst chunkSize = 256\nbuffer := make([]byte, chunkSize)\nfor {\n\tn, err := file.Read(buffer)\n\tif err != nil &amp;&amp; err != io.EOF { log.Fatal(err) }\n\tif err == io.EOF { break }\n\tfmt.Println(string(buffer[:n]))\n\t// print the data like in a hex editor\n\tfmt.Printf(&quot;%s&quot;, hex.Dump(buffer))\n}\nfile.Seek(0,0) // return to beginning\nfile.Seek(6,0) // to byte 6 in file\nfile.Seek(6,1) // to byte 6 from location (=12)\noffset, err := file.Seek(6,2) // to offset=length-6\n\n// File stats\nfileinfo, err := file.Stat()\ntype FileInfo interface {\n\tName() string // base name of the file\n\tSize() int64 // length in bytes for regular files; system-dependent for others\n\tMode() FileMode // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool // abbreviation for Mode().IsDir()\n\tSys() any // underlying data source (can return nil)\n}\n\nCommand Line Arguments\nimport (&quot;flag&quot;)\n\n// Return values are pointers (never nil!)\nbrokerAddr := flag.String(&quot;broker&quot;, &quot;ssl://broker.hivemq.com:8883&quot;, &quot;Broker address including connection type and port&quot;)\nusername := flag.String(&quot;user&quot;, &quot;&quot;, &quot;Username for the MQTT connection (optional)&quot;)\nintervalMs := flag.Int(&quot;interval&quot;, 1000, &quot;Send interval per instance in ms&quot;)\n// Use existing variables\nvar decryptFlag bool\nflag.BoolVar(&amp;decryptFlag, &quot;d&quot;, false, &quot;decrypt the input&quot;) // shorthand\nflag.BoolVar(&amp;decryptFlag, &quot;decrypt&quot;, false, &quot;decrypt the input&quot;)\n\nflag.Usage = func() {\n\tw := flag.CommandLine.Output()\n\n\tfmt.Fprintf(w, &quot;Usage of %s:\\n&quot;, os.Args[0])\n\tfmt.Fprintln(w)\n\tconst usageStr = `Spawns a set number of clients,\nwhich send messages with random values to a MQTT broker.`\n\tfmt.Fprintln(w, usageStr)\n\tfmt.Fprintln(w)\n\n\t// Prints all flags and description text (last argument + default value)\n\tflag.PrintDefaults()\n}\n\n// fills up the variables with data from args\n// variables will get their default values (second to last argument) when ommitted\nflag.Parse()\n\n// After parsing, any unparsed flags/positional arguments can be handled\ncnt := flag.NArg()\narg := flag.Arg(i)\nfor i,v := range flag.Args() {}\n\nUsage\n\n-flag, -flag=x, --flag, --flag=x\n-flag x, --flag x (non-boolean flags only)\n\nPositional arguments are not handled as expected! Flag stops parsing on the first positional argument / unhandled flag, so named flags have to come first (while order usually does not matter).\nWorkaround: https://stackoverflow.com/a/74146375\nShorthand: Short and Long Options with Go flag standard package (antoniojgutierrez.com)\nPrinting Errors\nlog.Fatalf(&quot;ERROR: %q\\n&quot;, err)\n// Prints: 2024/10/31 15:08:52 ERROR: &quot;error message&quot;\nfmt.Printf(&quot;ERROR: %q\\n&quot;, err)\nos.Exit(1)\n// Prints: ERROR: &quot;error message&quot;\npanic(err)\n// Prints: panic: error message\\n\\n&lt;stacktrace&gt;\n// exit code 2",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "JavaScript",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/java-script/",
		"content": "Achtung\nNaN\nNaN === NaN; // false\nNaN == NaN; // false\nNumber.isNaN(NaN) // true\n\nvar vs let, implicit var\n// var declarations are hoisted to beginning of function\nfunction varTest(bool) {\n\tif (bool) {\n\t\tvar test = 4;\n\t} else {\n\t\tvar test = 2;\n\t}\n\treturn test; // 2 or 4\n}\n// Is the same as\nfunction varTest(bool) {\n\tvar test;\n\tif (bool) {\n\t\ttest = 4;\n\t} else {\n\t\ttest = 2;\n\t}\n\treturn test; // 2 or 4\n}\n// Achtung! Das folgende erzeugt nach dem Aufruf eine variable &quot;test&quot; im globalen Kontext! (implicit var)\nfunction varTest(bool) {\n\ttest = 3;\n}\n\n// let declarations are block-level (hoisted, but not initialized in temporal dead-zone)\nfunction letTest(bool) {\n\tvar test = 1;\n\tif (bool) {\n\t\ttest = 3; // ReferenceError\n\t\tlet test = 4;\n\t} else {\n\t\tlet test = 2;\n\t}\n\treturn test; // returns 1\n}\n\nconst is not const\nconst val = 3;\nval = 4; // TypeError\nconst obj = { &quot;foo&quot;: &quot;bar&quot; };\nobj.foo = &quot;baz&quot;; // allowed\nobj = { &quot;test&quot;: 123 } // TypeError\n\nAutomatic Semicolon Insertion\nfunction ReturnsUndefined() {\n\treturn\n\t{\n\t\t&quot;foo&quot;: &quot;bar&quot;\n\t}\n}\n// returns undefined\n// a semicolon is automatically inserted by the parser after &quot;return&quot;, so the object is never passed to it\n\nfunction ReturnsCorrectly() {\n\treturn {\n\t\t&quot;foo&quot;: &quot;bar&quot;\n\t}\n}\n\nArray.sort()\nArray.sort() sortiert alle Einträge zu String konvertiert! Daher im Folgenden &quot;2&quot; -&gt; &quot;33&quot; -&gt; &quot;8&quot;\nconst numbers = [33, 2, 8];\nnumbers.sort();\nconsole.log(numbers[1]); // 33 (numbers is [2,33,8])\n\nGrund dafür ist, dass Arrays Einträge mit unterschiedlichen Typen beinhalten können: [&quot;1&quot;, true, 3, {}]. Alle Typen können aber in String konvertiert werden.\nType bullshit\nGitHub - denysdovhan/wtfjs: 🤪 A list of funny and tricky JavaScript examples\nEquality comparisons and sameness - JavaScript | MDN (mozilla.org)\n== Abstract Equality konvertiert die meisten Typen zu Number, wenn die Typen nicht gleich sind ([Quelle](ECMAScript® 2020 Language Specification (ecma-international.org)))\n=== Strict Equality macht keine Typen-Konvertierung\n0 == false // true (false -&gt; 0)\n&quot;&quot; == false // true (Number(&quot;&quot;) -&gt; 0, Number(false) -&gt; 0)\n&quot;0&quot; == false // true (same as above)\n0 == '0' // true ('0' -&gt; 0)\n\n'0' == !{} // true (!{} is false -&gt; both converted to 0)\n[] == ![] // true ([] -&gt; 0, ![] -&gt; false -&gt; 0)\n!![] // true ([] is truthy, so !![] -&gt; true)\n[] == false // true (false -&gt; 0, [] -&gt; 0)\n[] == 0 // true ([] -&gt; 0)\n[] == &quot;&quot; // true\n[] == '0' // false\n[0] == &quot;&quot; // false\n[0] == '0' // true\n[null] == &quot;&quot; // true\n[null] == &quot;0&quot; // false\n[null] == [] // false\n\nfalse == '0o0' // true (0o is octal-prefix)\n!!&quot;false&quot; == !!&quot;true&quot; // true (non-emoty string is truthy)\n&quot;b&quot; + &quot;a&quot; + +&quot;a&quot; + &quot;a&quot; // 'baNaNa'\n\n!!null == false // true (null is falsy, so !![] -&gt; false)\nnull == false // false (false -&gt; 0 != null)\nnull == undefined // true (explicit rule)\n\n&quot;[object Object]&quot; == {foo:&quot;bar&quot;} // true (object -&gt; &quot;[object Object]&quot;)\n\nTruthy:\n\nObject (empty or otherwise)\nArray (empty or otherwise)\nNon-empty string\nNumbers != 0\netc.\nFalsy:\nEmpty string (&quot;&quot;)\nnull\nundefined\n0\nNaN\nfalse\n\nAnnotated ES5\n\nString comparison can be forced by: &quot;&quot; + a == &quot;&quot; + b.\nNumeric comparison can be forced by: +a == +b.\nBoolean comparison can be forced by: !a == !b.\n\nArray out-of-bounds\nlet array = [1,2,3]\narray[5] = 9;\nconsole.log(array); // [1, 2, 3, undefined, undefined, 6]\nconsole.log(array[5]); // undefined\nlet array2 = new Array(5);\narray2[3] = 9;\nconsole.log(array2); // [ 2 empty items, 9, 2 empty items ]\nconsole.log(array2[2]); // undefined\n\nArrays werden dynamisch vergrößert. Lücken sind immer undefined.\nStrings\nsind als Ropes implementiert (TL;DR: Binärbaum anstatt Array)\nOperator precedence\n\nwie bei C/C++\nbitwise Operatoren werden nach fast allen anderen interpretiert (+,&lt;=,%,&lt;&lt;,etc)\nbitwise: AND &amp; -&gt; XOR ^ -&gt; OR |\n\nDefault values\nfunction test(param) {\n\t// filters all falsy values (null, undefined, 0, false, etc.)\n\t// only works if default value is falsy or valid values are never falsy, otherwise it might overwrite falsy values of param (e.g. 0)\n\tparam = param || 0;\n\t// filters only undefined specifically (param was not passed)\n\tif (param === undefined) param = 0;\n}\n\nSpeed wise both options seem to be about the same.\nfor vs forEach\nArray Alternativen:\n\nfor (let i = 0; i &lt; array.length; ++i) { ... }\nfor (const element of array) { ... }\nfor (const {member1, member2} of array) { ... }\narray.forEach((element, index, array) =&gt; {...})\narray.reduce((accumulator, element, index, array) =&gt; { ... })\narray.map((element, index, array) =&gt; (...)})\narray.map(({member1, member2}) =&gt; (...))\nDie klassische, imperative for-Schleife ist deutlich schneller, als forEach, map.reduce, array.map, etc.\nBei kleinen Arrays (&lt;1000 Elemente) macht dies in der Praxis keinen großen Unterschied.\nfor..of ist ähnlich schnell wie for.\nMikro-Optimierungen, wie z.B. das Cachen von &quot;array.length&quot; vor dem Loop bringen keine Verbesserung (macht der Compiler vermutlich eh).\nPerformance of JavaScript .forEach, .map and .reduce vs for and for..of (leanylabs.com)\n\nEine pre-Allokation eines Ergebnis-Arrays ist deutlich schneller, als Elemente einzeln zu pushen (gilt in jeder Sprache)\n// bad\nfor (const elem of source)\n\tresult.push(elem.x + elem.y);\n// good\nconst result = Array.new(source.length);\nfor (let i=0; i &lt; source.length; ++i)\n\tresult[i] = source[i].x + source[i].y\n\nString template literals\nvar foo = 3.14;\nconsole.log(`Pi is ${foo}. This inserts a line break:\n\thalf of Pi is ${foo / 2}. This does not line break:\\\n\tboth retain the tab character at the start`);\n\nMore info: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\nAsync Order\n3 Questions: You Don't Know JavaScript | Prime Reacts (youtube.com)\n// resolve is done immediately, then is added to microtask queue\nPromise.resolve().then(() =&gt; console.log(1));\n// added to microtask queue\nqueueMicrotask(() =&gt; console.log(2));\n// added to Web API, on next tick added to macrotask queue\n// macrotask queue is executed when microtask queue is empty (so adding microtasks in a loop can starve marcotask queue)\nsetTimeout(() =&gt; console.log(3), 0);\n// just executed, this tick puts setTimeout onto macrotask queue\nconsole.log(4);\n// body of constructor is executed synchronously (only Promise.resolve is async)\nnew Promise(() =&gt; console.log(5));\n// immediately invoked async function - body is run synchronously (only awaited value is async)\n(async () =&gt; console.log(6))()\n\n// Logs in order: 4 - 5 - 6 - 1 - 2 - 3\n\nClasses\nclass Person {\n\tconstructor(name, money) {\n\t\tthis.name = name;\n\t\tthis.money = money;\n\t}\n\ttransferFunds(otherPerson, amount) { }\n\tchangeName(newName) { }\n}\nconst andy = new Person(&quot;Andy&quot;, 100);\nconst paul = new Person(&quot;Paul&quot;, 42);\n\nFunktionen sind nicht in Klasseninstanz gespeichert, sondern im gemeinsamen Prototyp.\nclass Person {\n\tconstructor(name, money) {\n\t\tthis.name = name;\n\t\tthis.money = money;\n\t\tthis.transferFunds = function(otherPerson, amount) { }\n\t\tthis.changeName = function(newName) { }\n\t}\n}\nconst andy = new Person(&quot;Andy&quot;, 100);\nconst paul = new Person(&quot;Paul&quot;, 42);\n\nJede Klasseninstanz besitzt eigene Instanzen der Funktionen -&gt; nehmen mehr Speicher in Anspruch.\nclass Dog {\n\tconstructor(name) {\n\t\tthis.name = name;\n\t\tthis.wagTail = () =&gt; {\n\t\t\treturn &quot;Wagging tail!&quot;\n\t\t}\n\t}\n\n\tbark() {\n\t\treturn &quot;Woof!&quot;;\n\t}\n}\nconst dog1 = new Dog(&quot;Max&quot;);\nconst dog2 = new Dog(&quot;Spot&quot;);\n\n// return value is same string constant\ndog1.wagTail() === dog2.wagTail() // true\n// wagTail is defined in constructor = different for each instance\ndog1.wagTail === dog2.wagTail // false\n// bark is defined in common prototype\ndog1.bark === dog2.bark // true\n// Prototype of both is the same\nObject.getPrototypeOf(dog1) === Object.getPrototypeOf(dog2) // true\n// constructor is defined in common prototype\ndog1.constructor === dog2.constructor // true\n\nGenerators\nfunction* genFunc() {\n\tyield 1;\n\tyield 2;\n\tyield 3;\n\treturn 4;\n};\nconst iterator = genFunc();\niterator.next(); // {value: 1, done:false}\niterator.next(); // {value: 2, done:false}\niterator.next(); // {value: 3, done:false}\niterator.next(); // {value: 4, done:true}\n\n// Once all values are used up, iterator returns undefined\niterator.next(); // {value: undefined, done: true}\nconsole.log([...iterator]); // []\n\n// Only yielded values are returned here:\nconsole.log([...genFunc()]); // [1, 2, 3]\nfor (const value of genFunc()) {\n\tconsole.log(value);\n} // 1 2 3\n\nStern nach &quot;function&quot; Keyword erzeugt einen &quot;Generator&quot;.\nGute Anwendung: Filesystem walkers\nAchtung: In for..of Loops und spread operators wird der Wert nach dem &quot;return&quot; nicht ausgegeben! -&gt; idealerweise am Ende &quot;return null&quot; machen (oder kein return = implicit &quot;return undefined&quot;), um zu signalisieren, dass man fertig ist.\nBitshift\n\n[!warning]\nShift Operatoren konvertieren den Input in 32-bit signed int.\n\n&lt;&lt; &gt;&gt; Signed shift (converts all numbers to 32bit signed int)\n&gt;&gt;&gt; Unsigned right shift\n\nMore info: https://stackoverflow.com/a/6798829",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Lua",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/lua/",
		"content": "Cheatsheet\nfor\nfor var=start,endVal,step do ... end -- var is local, endVal is inclusive, step is optional (default 1)\nfor i=1,f(x) do ... end -- f(x) is evaluated only once at start\nfor i,v in ipairs(array) do ... end -- array for each\nfor k,v in pairs(table) do ... end -- key value for each\nfor i=1,10 do -- do not change i during loop!\n\tif i==5 then break end\n\tif i==1 then goto continue end\n\t::continue::\nend\n\nTable ~ Array\n-- Add elements\ntable.insert(vtable, elem) -- at end\ntable.insert(vtable, 1, elem) -- at start\n-- Remove elements\nelem = table.remove(vtable, pos) -- no pos = last element\n-- Count entries in array, stops at first nil element\ntable.getn(vtable)\n#vtable -- same as getn\ntable.setn(vtable, size) -- set size of array\n-- iterate over array\nfor k, v in ipairs(vtable) do sum = sum + v end\n-- Count all entries in a table\nlocal count = 0\nfor _ in pairs(vtable) do count = count + 1 end\n-- Copy all table members from src to dst (shallow)\nfor k, v in pairs(src) do dst[k] = v end\n-- Clear table\nfor k in pairs(vtable) do table[k] = nil end\n-- Sort array\ntable.sort(vtable, orderFunc) -- orderFnc = true if a-&gt;b\n\ntypeof\ntype(var)\n&quot;nil&quot;, &quot;boolean&quot;, &quot;number&quot;, &quot;string&quot;, &quot;userdata&quot;, &quot;function&quot;, &quot;thread&quot;, &quot;table&quot;\n\nipairs vs pairs\nipairs(table) iteriert über Elemente eines arrays (also alle table Elemente mit Integer &gt;0 als key), in aufsteigeneder Reihenfolge, hält bei Lücken in den keys an.\npairs(table) iteriert über alle Elemente einer Table (Reihenfolge der Elemente ist dabei zufällig!). Elemente entfernen (=nil setzen) ist okay während for .. in loop, Elemente hinzufügen nicht.\nTenary\nhttps://stackoverflow.com/a/72021612\n-- Does not work if trueValue is falsy (false or 0)!\n(condition and trueValue or falseValue)\n-- Works all the time\n(condition and {ifTrue} or {ifFalse})[1]\n\nBlock Comments\n--[[\nprint(10) -- no action (comment)\n--]]\n\n-- Adding single hyphen to start of block comment will enable the block again:\n---[[\nprint(10) --&gt; 10\n--]]\n\nClass methods\nTODO\nlocal class = {}\nfunction class.normalFunc()\n\t-- &quot;static&quot; function\nend\nlocal obj = { someValue = 0 }\nclass.normalFunc()\nfunction class:classFunc()\n\tself.someValue = 1 -- object is passed as &quot;self&quot;\nend\nclass:classFunc()\n\nTable to string\nlocal function dump(o)\nif type(o) == 'table' then\n\t local s = '{ '\nfor k,v in pairs(o) do\nif type(k) ~= 'number' then k = '&quot;'..k..'&quot;' end\ns = s .. '['..k..'] = ' .. dump(v) .. ','\nend\nreturn s .. '} '\nelse\nreturn tostring(o)\nend\nend\n\nMetamethod cheatsheet\nhttps://gist.github.com/oatmealine/655c9e64599d0f0dd47687c1186de99f\nA metatable can be defined like\nlocal t = setmetatable({}, {\n__tostring = function() return 'custom tostring behavior!' end\n})\n\nHere are the metamethods that you can define, and their behavior\nOperators\nIn an argument signature like f(a, b), a and b don't necessarily have to be instances of your metatable. One of them will always be, but not necessarily the first. Beware!\nCalculation operators\n\n__add(a, b): the addition (+) operation. If any operand for an addition is not a number, Lua will try to call a metamethod. It starts by checking the first operand (even if it is a number); if that operand does not define a metamethod for __add, then Lua will check the second operand. If Lua can find a metamethod, it calls the metamethod with the two operands as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, if no metamethod is found, Lua raises an error.\n__sub(a, b): the subtraction (-) operation. Behavior similar to the addition operation.\n__mul(a, b): the multiplication (*) operation. Behavior similar to the addition operation.\n__div(a, b): the division (/) operation. Behavior similar to the addition operation.\n__unm(a): the negation (unary -) operation. Behavior similar to the addition operation.\n__mod(a, b) (Lua 5.1): the modulo (%) operation. Behavior similar to the addition operation.\n__pow(a, b) (Lua 5.1): the exponentiation (^) operation. Behavior similar to the addition operation.\n__idiv(a, b) (Lua 5.3): the floor division (//) operation. Behavior similar to the addition operation.\n\nBitwise operators (Lua 5.3)\n\n__band(a, b): the bitwise AND (&amp;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod if any operand is neither an integer nor a float coercible to an integer (see §3.4.3).\n__bor(a, b): the bitwise OR (|) operation. Behavior similar to the bitwise AND operation.\n__bxor(a, b): the bitwise exclusive OR (binary ~) operation. Behavior similar to the bitwise AND operation.\n__bnot(a): the bitwise NOT (unary ~) operation. Behavior similar to the bitwise AND operation.\n__shl(a, b): the bitwise left shift (&lt;&lt;) operation. Behavior similar to the bitwise AND operation.\n__shr(a): the bitwise right shift (&gt;&gt;) operation. Behavior similar to the bitwise AND operation.\n\nEquation operators\n\n__eq(a, b): the equal (=) operation. Behavior similar to the addition operation, except that Lua will try a metamethod only when the values being compared are either both tables or both full userdata and they are not primitively equal. The result of the call is always converted to a boolean.\n__lt(a, b): the less than (&lt;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod only when the values being compared are neither both numbers nor both strings. Moreover, the result of the call is always converted to a boolean.\n__le(a, b): the less equal (&lt;=) operation. Behavior similar to the less than operation.\n\nMisc operators\n\n__concat(a, b): the concatenation (..) operation. Behavior similar to the addition operation, except that Lua will try a metamethod if any operand is neither a string nor a number (which is always coercible to a string).\n__len(a) (Lua 5.1): the length (#) operation. If the object is not a string, Lua will try its metamethod. If there is a metamethod, Lua calls it with the object as argument, and the result of the call (always adjusted to one value) is the result of the operation. If there is no metamethod but the object is a table, then Lua uses the table length operation (see §3.4.7). Otherwise, Lua raises an error.\n\nBehavioral methods\nIndexing\n\n__index: The indexing access operation table[key]. This event happens when table is not a table or when key is not present in table. The metavalue is looked up in the metatable of table.\nThe metavalue for this event can be either a function, a table, or any value with an __index metavalue. If it is a function, it is called with table and key as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, the final result is the result of indexing this metavalue with key. This indexing is regular, not raw, and therefore can trigger another __index metavalue.\nExamples:local tab1 = {foo = 'bar'}\nlocal tab2 = setmetatable({}, {__index = tab1})\n\nprint(tab2.foo) --&gt; 'bar'\n\nlocal tab = setmetatable({count = 0}, {\n__index = function(self, _k)\nself.count = self.count + 1\nreturn self.count\nend\n})\n\nprint(tab.index) --&gt; 1\nprint(tab.indexagain) --&gt; 2\nprint(tab.asdfasdf) --&gt; 3\nprint(tab[1234]) --&gt; 4\n\n__newindex: The indexing assignment table[key] = value. Like the index event, this event happens when table is not a table or when key is not present in table. The metavalue is looked up in the metatable of table.\nLike with indexing, the metavalue for this event can be either a function, a table, or any value with an __newindex metavalue. If it is a function, it is called with table, key, and value as arguments. Otherwise, Lua repeats the indexing assignment over this metavalue with the same key and value. This assignment is regular, not raw, and therefore can trigger another __newindex metavalue.\nWhenever a __newindex metavalue is invoked, Lua does not perform the primitive assignment. If needed, the metamethod itself can call rawset to do the assignment.\nExamples:t = setmetatable({}, {\n__newindex = function(t, key, value)\nif type(value) == 'number' then\nrawset(t, key, value * value)\nelse\nrawset(t, key, value)\nend\nend\n})\n\nt.foo = 'foo'\nt.bar = 4\nt.la = 10\nprint(t.foo) --&gt; 'foo'\nprint(t.bar) --&gt; 16\nprint(t.la) --&gt; 100\n\nCalling\n\n__call(args): The call operation func(args). This event happens when Lua tries to call a non-function value (that is, func is not a function). The metamethod is looked up in func. If present, the metamethod is called with func as its first argument, followed by the arguments of the original call (args). All results of the call are the results of the operation. This is the only metamethod that allows multiple results.\n\nGarbage collection &amp; memory management\n\n__mode: Controls how &quot;weak&quot; a table is. If present, must be one of the following strings: &quot;k&quot;, for a table with weak keys; &quot;v&quot;, for a table with weak values; or &quot;kv&quot;, for a table with both weak keys and values.\nA table with weak keys and strong values is also called an ephemeron table. In an ephemeron table, a value is considered reachable only if its key is reachable. In particular, if the only reference to a key comes through its value, the pair is removed. (see §2.5.4)\n__close(value, err?) (Lua 5.4): Called when a variable is closed (see §3.3.8).\n__gc(): Called when the the garbage collector detects that the corresponding table or userdata is dead. See §2.5.3\n\nMisc\n\n__tostring(): If the metatable of v has a __tostring field, then tostring calls the corresponding value with v as the argument, and uses the result of the call as its result. Otherwise, if the metatable of v has a __name field with a string value, tostring may use that string in its final result.\n__metatable: Changes the behavior of getmetatable. If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a __metatable field, returns the associated value. Otherwise, returns the metatable of the given object.\n__name: Used very rarely internally (see luaL_newmetatable) and by tostring() if the __tostring metamethod is missing.\n__pairs(): Affects iteration when using the pairs() function, letting you define a custom iterator function (see pairs(), next()).\n\nReferences\nhttps://www.lua.org/manual/5.4/manual.html#2.4\nhttps://ebens.me/post/lua-metatables-tutorial/\nhttps://www.lua.org/versions.html\nhttps://www.lua.org/manual/5.4/contents.html#index",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Powershell",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/powershell/",
		"content": "Allgemeines\n\nHat keinen Drag-and-Drop Handler (anders als Batch oder exe, wo man Dateien direkt auf die Executable ziehen kann)\n\nWorkaround: https://stackoverflow.com/questions/2819908/drag-and-drop-to-a-powershell-script\n\nMan kann .NET Funktionen benutzen (sehr mächtig und gute API)\nAusführung unter Windows 10+11 per default deaktiviert\n\nabout_Execution_Policies - PowerShell | Microsoft Learn\nIn Admin PowerShell: Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned\n\nCheatsheet\nArgument Parsing\nparam (\n[string]$foo, # -foo file.txt\n[string]$bar = &quot;default&quot;,\n[string[]]$array, # -array file.txt, other.foo, bla\n[switch]$flagOn, # -flagOn\n[DateTime]$date, # -date &quot;03.12.2024 13:10:42&quot; -&gt; 12.03.2024 13:10:42\n[int]$num # -num 3.5 -&gt; 4\n[float]$num2 # -num2 -5.42\n# .NET types: System.DayOfWeek, File, custom types, etc.\n)\nparam (\n\t# Powershell will ask user input if param not defined\n\t# HelpMessage text is displayed alongside the promt\n\t[Parameter(Mandatory=$true, HelpMessage=&quot;Value for req&quot;)]\n\t[string]$req,\n\t# &quot;fake&quot; mandatory -&gt; throw if empty\n[ValidateNotNullOrEmpty()] # Alternative to default throw\n\t[string]$req=$(throw &quot;Error parameter req missing&quot;)\n\t# Eplicitly bind to position, others then must be bound by name\n\t[Parameter(Position=0)]\n\t[int]$first\n)\n# Only bind by name\n[CmdletBinding(PositionalBinding=$false)]\nparam (...)\n# Display bound parameters\necho $PSBoundParameters\n\nParameter werden nach Name ODER Position geparst. Position 0 ist dabei das erste Argument, welches nicht nach Name zugeordnet werden konnte\nSobald ein Parameter explizit eine Position zugewiesen bekommt, werden die anderen nicht mehr implizit nach Position gebindet\n\nDokumentation / Hilfe\n&lt;#\n.SYNOPSIS\nBuild LUA project for the Playdate\n.PARAMETER in\nPath to your project folder (main folder or Source directory)\n.PARAMETER xyz\nAnother parameter cool\n.DESCRIPTION\nLonger description of script\n.INPUTS\nDetails about input via pipes\n.OUTPUTS\nDetails about output you can pipe\n.EXAMPLE\nPS&gt; .\\yourscript.ps1 -example call\n.LINK\nOnline help: https://yourwebsite.biz\n#&gt;\nparam (\n[string]$in,\n[int]$xyz\n)\n&lt;&lt; your script here &gt;&gt;\n\n# Print info about parameters\nGet-Help .\\script.ps1\n\nVariablen\n# Operators\n-eq, -ne, -and, -or, -not\n\nDatei oder Ordner\n# Check if file oder folder (error if not exists)\n(Get-Item $path) -is [System.IO.DirectoryInfo]\n# Check if file exists\n[System.IO.File]::Exists($path)\n# Test if path is valid and exists\nTest-Path $path\n\nUmbenennen\nAlle Dateien in aktuellem Ordner mit fortlaufender Nummer umbenennen\nls | %{Rename-Item $_ -NewName (&quot;Bilder_{0}.jpg&quot; -f $nr++)}\n\nWeird shit\n$input\nNiemals $inputals Variablenname oder param nutzen!\nhttps://stackoverflow.com/questions/30546750/function-parameter-always-empty-why\n\n$Input\nContains an enumerator that enumerates all input that is passed to a function. The $input variable is available only to functions and script blocks (which are unnamed functions). In the Process block of a function, the $input variable enumerates the object that is currently in the pipeline. When the Process block completes, there are no objects left in the pipeline, so the $input variable enumerates an empty collection. If the function does not have a Process block, then in the End block, the $input variable enumerates the collection of all input to the function.\n\nHelpMessage\nparam (\n\t# HelpMessage is displayed in promt for missing mandatory\n\t# params, but only if user first inputs !? in promt\n\t[Parameter(Mandatory=$true, HelpMessage=&quot;Value for req&quot;)]\n\t[string]$req\n)\n\nTODO\nfor loop over files",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "REST vs. Websockets",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/rest-vs-websockets/",
		"content": "Don't Use Websockets (Until You Try This…) (youtube.com)\nREST API (HTTP) vs Websockets - Concept Overview With Example (youtube.com)\nWebhooks vs Websockets vs HTTP Streaming - Which Event-Driven API to use? (youtube.com)\nREST\n\nTCP\nstateless\nClient Request -&gt; Server Response\nCRUD -&gt; HTTP Method\n\nCreate -&gt; POST\nRead -&gt; GET\nUpdate -&gt; PUT\nDelete -&gt; DELETE\n\nSehr einfach zu implementieren, viel Doku und Beispiele\nIdeal geeignet für CRUD, einzelne (statische) Datenbankabfragen und Live-Updates mit langem Intervall (&gt;1s) bei einem/wenigen Clients\nWeniger geeignet für Live-Apps mit kurzem Intervall (&lt;1s) und vielen Clients - z.B. Chat oder Spiele (zu viel HTTP Overhead und Latency)\nEinfach zu skalieren (horizontal wie vertikal), da stateless\nShort Polling: Client Request -&gt; Direkte Antwort vom Server (klassisches Modell)\nLong Polling: Client Request -&gt; Verzögerte Antwort vom Server nachdem neue Daten eingetroffen sind (Verbindung wird solange aufrecht gehalten, Timeouts beachten!), nicht mehr stateless\n\nHTTP Streaming\n\nTCP\nServer Side Events (SSE) -&gt; Ähnlich Long Polling, aber Request wird nach Push von Daten nicht geschlossen und für weitere Updates genutzt (nur bei Read/GET möglich) nicht mehr stateless\n\nHeader: Content-Type: text/event-stream, Cache-Control: no-cache\nBody EVENT: id (fortlaufend), event: onProgress (und final dann &quot;done&quot;, um den Stream zu schließen), data\nIn Go: Writer.Flush() ohne Writer.Close()\nFrontend: new EventSource, EventSource.addEventListener\n\nAlternative: Transfer-encoding Header &quot;Chunked&quot; (üblich für Server-Server-Kommunikation)\n\nWebsockets\n\nTCP\nStateful (Informationen zu bestehenden Verbindungen müssen gemanaged werden)\nClient baut dauerhafte Verbindung auf, welche für Full-Duplex Kommunikation genutzt werden kann\nStand 2024 von allen großen Browsern unterstützt\nIdeal geeignet für Live-Apps mit kurzem Intervall (&lt;1s), geringer Latenz und vielen Clients\nOverkill für statische Apps und langes Update-Intervall\nKomplizierter zu implementieren\nHerausfordernd zu skalieren, da Sessions/Verbindungen über Server-Instanzen synchronisiert werden müssen\n\nz.B. mit Redis\n\nWebhooks\n\nTCP\nSpezielle HTTP Endpoints an einem Server zum Abonieren von Updates\nClient muss ebenfalls öffentlichen HTTP Endpoint für Callbacks bereitstellen\nClient sendet Request zu Webhook API mit der Liste an Events, welcher er abonieren will und einem/mehreren Endpoints, wohin die API Callbacks ausführen soll\nIdeal geeignet für selten auftretende Events, welche asynchron verarbeitet werden können/sollen (REST hätte viel Overhead, Websockets wären overkill)",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Rules for Code Comments",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/rules-for-code-comments/",
		"content": ".container {font-family: sans-serif; text-align: center;} .button-wrapper button {z-index: 1;height: 40px; width: 100px; margin: 10px;padding: 5px;} .excalidraw .App-menu_top .buttonList { display: flex;} .excalidraw-wrapper { height: 800px; margin: 50px; position: relative;} :root[dir=\"ltr\"] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left {transform: none;} (function(){const InitialData={\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.10.1\",\"elements\":[{\"type\":\"diamond\",\"version\":242,\"versionNonce\":261255413,\"isDeleted\":false,\"id\":\"E02_zOcpqN6QTtv-jgTxF\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-864.9305555555555,\"y\":-862.2152777777778,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":360,\"height\":170,\"seed\":1116960449,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"0Pegy4lt\"},{\"id\":\"GJK9OGogKrybUpAvKov3s\",\"type\":\"arrow\"},{\"id\":\"hOtTbsLuhuA9F6ujbMhTc\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"a0\"},{\"type\":\"text\",\"version\":268,\"versionNonce\":1036059867,\"isDeleted\":false,\"id\":\"0Pegy4lt\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-761.1024305555555,\"y\":-813.2152777777778,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":152.34375,\"height\":72,\"seed\":1523266241,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"are you\\nwriting code\\nor a comment?\",\"rawText\":\"are you writing code or a comment?\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"E02_zOcpqN6QTtv-jgTxF\",\"originalText\":\"are you writing code or a comment?\",\"lineHeight\":1.2,\"baseline\":67,\"autoResize\":true,\"index\":\"a1\"},{\"type\":\"arrow\",\"version\":578,\"versionNonce\":1211850331,\"isDeleted\":false,\"id\":\"GJK9OGogKrybUpAvKov3s\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-681.8174304257582,\"y\":-689.380699608195,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0.4121017527099866,\"height\":149.0746616415896,\"seed\":1980864399,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"0QuD5jhW\"}],\"updated\":1745772063883,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"E02_zOcpqN6QTtv-jgTxF\",\"focus\":-0.015946196386071816,\"gap\":8.26691098389999},\"endBinding\":{\"elementId\":\"aFf8R93gN5cMnmivT_m-Y\",\"focus\":0.008951896067003822,\"gap\":5.730408418460129},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[0.4121017527099866,149.0746616415896]],\"index\":\"a2\"},{\"type\":\"text\",\"version\":17,\"versionNonce\":916566395,\"isDeleted\":false,\"id\":\"0QuD5jhW\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-705.0532231420705,\"y\":-628.4146272367195,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":46.875,\"height\":24,\"seed\":1775122575,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"code\",\"rawText\":\"code\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"GJK9OGogKrybUpAvKov3s\",\"originalText\":\"code\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"a3\"},{\"type\":\"arrow\",\"version\":847,\"versionNonce\":897782619,\"isDeleted\":false,\"id\":\"hOtTbsLuhuA9F6ujbMhTc\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-685.7334827822903,\"y\":-867.2216888808291,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0.37400902087870236,\"height\":152.61402408795982,\"seed\":933176545,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"gWdYOkXr\"}],\"updated\":1745772063891,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"E02_zOcpqN6QTtv-jgTxF\",\"focus\":-0.0032352765690069948,\"gap\":10.433938436927946},\"endBinding\":{\"elementId\":\"E4egjr6rkvuDdDN6tCEq0\",\"focus\":-0.024318584104156448,\"gap\":9.852826583471952},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-0.37400902087870236,-152.61402408795982]],\"index\":\"a4\"},{\"type\":\"text\",\"version\":16,\"versionNonce\":1946405403,\"isDeleted\":false,\"id\":\"gWdYOkXr\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-726.9385670778945,\"y\":-956.5301651454134,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":82.03125,\"height\":24,\"seed\":1874565985,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"comment\",\"rawText\":\"comment\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"hOtTbsLuhuA9F6ujbMhTc\",\"originalText\":\"comment\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"a5\"},{\"type\":\"diamond\",\"version\":346,\"versionNonce\":378124565,\"isDeleted\":false,\"id\":\"aFf8R93gN5cMnmivT_m-Y\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-930.2638888888891,\"y\":-542.7708333333335,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":494,\"height\":260,\"seed\":144175407,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"HGhhc8kE\"},{\"id\":\"GJK9OGogKrybUpAvKov3s\",\"type\":\"arrow\"},{\"id\":\"6Y90rCFayCtO-ZSWunyxZ\",\"type\":\"arrow\"},{\"id\":\"GPugp4Lb9aDZVc-lpa7fY\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"a6\"},{\"type\":\"text\",\"version\":439,\"versionNonce\":987352763,\"isDeleted\":false,\"id\":\"HGhhc8kE\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-800.4513888888891,\"y\":-472.7708333333335,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":234.375,\"height\":120,\"seed\":491242671,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Is the code readable\\nand understandable\\nfor another\\nprogrammer of equal\\nor lower skill?\",\"rawText\":\"Is the code readable and understandable for another programmer of equal or lower skill?\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"aFf8R93gN5cMnmivT_m-Y\",\"originalText\":\"Is the code readable and understandable for another programmer of equal or lower skill?\",\"lineHeight\":1.2,\"baseline\":115,\"autoResize\":true,\"index\":\"a7\"},{\"type\":\"arrow\",\"version\":215,\"versionNonce\":60087035,\"isDeleted\":false,\"id\":\"6Y90rCFayCtO-ZSWunyxZ\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-867.5989108762467,\"y\":-372.63867039585733,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":84.66497801264245,\"height\":110.86783706252385,\"seed\":154283119,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"qOeiWMjl\"}],\"updated\":1745772063884,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"aFf8R93gN5cMnmivT_m-Y\",\"focus\":0.6222179058254884,\"gap\":10.8452090593792},\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-84.66497801264245,110.86783706252385]],\"index\":\"a8\"},{\"type\":\"text\",\"version\":12,\"versionNonce\":231096155,\"isDeleted\":false,\"id\":\"qOeiWMjl\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-928.8999262793102,\"y\":-327.38403686384856,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":35.15625,\"height\":24,\"seed\":1226837807,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"yes\",\"rawText\":\"yes\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"6Y90rCFayCtO-ZSWunyxZ\",\"originalText\":\"yes\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"a9\"},{\"type\":\"rectangle\",\"version\":112,\"versionNonce\":1212430293,\"isDeleted\":false,\"id\":\"wVgLXr24j71QKeP0ygRzD\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1082.2638888888891,\"y\":-244.77083333333348,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":201,\"height\":59,\"seed\":305187343,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"type\":\"text\",\"id\":\"JpsG3Yyz\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aA\"},{\"type\":\"text\",\"version\":125,\"versionNonce\":1998298107,\"isDeleted\":false,\"id\":\"JpsG3Yyz\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1046.2170138888891,\"y\":-239.27083333333348,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":128.90625,\"height\":48,\"seed\":1023096961,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"great! Keep\\ngoing!\",\"rawText\":\"great! Keep going!\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"wVgLXr24j71QKeP0ygRzD\",\"originalText\":\"great! Keep going!\",\"lineHeight\":1.2,\"baseline\":43,\"autoResize\":true,\"index\":\"aB\"},{\"type\":\"arrow\",\"version\":826,\"versionNonce\":422615099,\"isDeleted\":false,\"id\":\"GPugp4Lb9aDZVc-lpa7fY\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-483.4502510733486,\"y\":-380.169483367045,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":67.68946947318358,\"height\":69.62428314240492,\"seed\":1578886945,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"aPnHsc3p\"}],\"updated\":1745772063886,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"aFf8R93gN5cMnmivT_m-Y\",\"focus\":-0.7505407040362784,\"gap\":12.543293947001061},\"endBinding\":{\"elementId\":\"kj9RE4ItW4xMb4ktZpCXF\",\"focus\":0.39935148659711617,\"gap\":15.757777940344255},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[67.68946947318358,69.62428314240492]],\"index\":\"aC\"},{\"type\":\"text\",\"version\":11,\"versionNonce\":316433563,\"isDeleted\":false,\"id\":\"aPnHsc3p\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-491.8818056412716,\"y\":-338.23970586018316,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":23.4375,\"height\":24,\"seed\":832203247,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"no\",\"rawText\":\"no\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"GPugp4Lb9aDZVc-lpa7fY\",\"originalText\":\"no\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"aD\"},{\"type\":\"diamond\",\"version\":427,\"versionNonce\":1660814997,\"isDeleted\":false,\"id\":\"kj9RE4ItW4xMb4ktZpCXF\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-614.978174603175,\"y\":-322.34226190476204,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":482.3214285714286,\"height\":308,\"seed\":1358162607,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"5cDiJeVk\"},{\"id\":\"GPugp4Lb9aDZVc-lpa7fY\",\"type\":\"arrow\"},{\"id\":\"HBl42pf69sNSIr7NeLw1s\",\"type\":\"arrow\"},{\"id\":\"EVW-2FrbhUke86xP9IgFr\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aE\"},{\"type\":\"text\",\"version\":390,\"versionNonce\":1488656699,\"isDeleted\":false,\"id\":\"5cDiJeVk\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-485.22594246031787,\"y\":-240.34226190476204,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":222.65625,\"height\":144,\"seed\":33314753,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Is the code doing\\nsomething\\ncomplicated? Or did\\nit take you at\\nleast 3 tries to\\nget it working?\",\"rawText\":\"Is the code doing something complicated? Or did it take you at least 3 tries to get it working?\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"kj9RE4ItW4xMb4ktZpCXF\",\"originalText\":\"Is the code doing something complicated? Or did it take you at least 3 tries to get it working?\",\"lineHeight\":1.2,\"baseline\":139,\"autoResize\":true,\"index\":\"aF\"},{\"type\":\"arrow\",\"version\":775,\"versionNonce\":52796955,\"isDeleted\":false,\"id\":\"HBl42pf69sNSIr7NeLw1s\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-584.9342200400505,\"y\":-138.67804780229332,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":139.6171461926557,\"height\":129.0124155422711,\"seed\":2001597377,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"1jxstZrC\"}],\"updated\":1745772063888,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"kj9RE4ItW4xMb4ktZpCXF\",\"focus\":0.7488225198929629,\"gap\":14.72072200536428},\"endBinding\":{\"elementId\":\"bYdhDmk0HKvg3vNrEQBow\",\"focus\":-0.5625355097287595,\"gap\":15.714285714285808},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-139.6171461926557,129.0124155422711]],\"index\":\"aG\"},{\"type\":\"text\",\"version\":11,\"versionNonce\":639252955,\"isDeleted\":false,\"id\":\"1jxstZrC\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-657.5332439937216,\"y\":-83.61945126899667,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":35.15625,\"height\":24,\"seed\":215779151,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"yes\",\"rawText\":\"yes\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"HBl42pf69sNSIr7NeLw1s\",\"originalText\":\"yes\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"aH\"},{\"type\":\"arrow\",\"version\":791,\"versionNonce\":782312123,\"isDeleted\":false,\"id\":\"EVW-2FrbhUke86xP9IgFr\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-202.87328817434013,\"y\":-111.57102429492159,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":87.70476904162913,\"height\":117.36837724175318,\"seed\":692823599,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"PHw1x0IR\"}],\"updated\":1745772063890,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"kj9RE4ItW4xMb4ktZpCXF\",\"focus\":-0.5329278485736761,\"gap\":15.416322677209905},\"endBinding\":{\"elementId\":\"X2Py8I-2abr82I7cCgfv9\",\"focus\":0.22885269490409033,\"gap\":15.714285714285765},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[87.70476904162913,117.36837724175318]],\"index\":\"aI\"},{\"type\":\"text\",\"version\":10,\"versionNonce\":135022203,\"isDeleted\":false,\"id\":\"PHw1x0IR\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-171.90557641125088,\"y\":-66.44709817241048,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":23.4375,\"height\":24,\"seed\":1841608705,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"no\",\"rawText\":\"no\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"EVW-2FrbhUke86xP9IgFr\",\"originalText\":\"no\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"aJ\"},{\"type\":\"rectangle\",\"version\":184,\"versionNonce\":43889333,\"isDeleted\":false,\"id\":\"bYdhDmk0HKvg3vNrEQBow\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-848.9067460317467,\"y\":-3.0565476190477057,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":368.5714285714287,\"height\":154,\"seed\":1048904513,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"id\":\"HBl42pf69sNSIr7NeLw1s\",\"type\":\"arrow\"},{\"type\":\"text\",\"id\":\"2pCv94gX\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aK\"},{\"type\":\"text\",\"version\":412,\"versionNonce\":1163116315,\"isDeleted\":false,\"id\":\"2pCv94gX\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-840.4022817460324,\"y\":1.9434523809522943,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":351.5625,\"height\":144,\"seed\":690023297,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"You are probably a senior and\\nknow what you are doing. Carry\\non. Maybe think about leaving\\na comment for the confused\\nintern who has to fix a bug in\\n6 months.\",\"rawText\":\"You are probably a senior and know what you are doing. Carry on. Maybe think about leaving a comment for the confused intern who has to fix a bug in 6 months.\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"bYdhDmk0HKvg3vNrEQBow\",\"originalText\":\"You are probably a senior and know what you are doing. Carry on. Maybe think about leaving a comment for the confused intern who has to fix a bug in 6 months.\",\"lineHeight\":1.2,\"baseline\":139,\"autoResize\":true,\"index\":\"aL\"},{\"type\":\"rectangle\",\"version\":168,\"versionNonce\":975148053,\"isDeleted\":false,\"id\":\"X2Py8I-2abr82I7cCgfv9\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-211.95869408369458,\"y\":14.086309523809632,\"strokeColor\":\"#e03131\",\"backgroundColor\":\"transparent\",\"width\":228.57142857142867,\"height\":130,\"seed\":1994240929,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"type\":\"text\",\"id\":\"JyCss5N9\"},{\"id\":\"EVW-2FrbhUke86xP9IgFr\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aM\"},{\"type\":\"text\",\"version\":233,\"versionNonce\":677585851,\"isDeleted\":false,\"id\":\"JyCss5N9\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-197.28235479798025,\"y\":19.086309523809632,\"strokeColor\":\"#e03131\",\"backgroundColor\":\"transparent\",\"width\":199.21875,\"height\":120,\"seed\":819309825,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"You should\\nprobably stop and\\nrewrite your code\\n(or have a senior\\nlook at it)\",\"rawText\":\"You should probably stop and rewrite your code (or have a senior look at it)\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"X2Py8I-2abr82I7cCgfv9\",\"originalText\":\"You should probably stop and rewrite your code (or have a senior look at it)\",\"lineHeight\":1.2,\"baseline\":115,\"autoResize\":true,\"index\":\"aN\"},{\"type\":\"diamond\",\"version\":331,\"versionNonce\":1570654581,\"isDeleted\":false,\"id\":\"E4egjr6rkvuDdDN6tCEq0\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-906.5548201798204,\"y\":-1194.1298076923078,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":430.00000000000034,\"height\":170,\"seed\":509016847,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"id\":\"hOtTbsLuhuA9F6ujbMhTc\",\"type\":\"arrow\"},{\"type\":\"text\",\"id\":\"iKDKpFyo\"},{\"id\":\"ad8m8N6otkqIco3A2SS4s\",\"type\":\"arrow\"},{\"id\":\"EUDrSO6P5myvZ79jXOeDs\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aO\"},{\"type\":\"text\",\"version\":234,\"versionNonce\":157086811,\"isDeleted\":false,\"id\":\"iKDKpFyo\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-785.3048201798202,\"y\":-1145.1298076923078,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":187.5,\"height\":72,\"seed\":323027727,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Are you\\ndocumenting what\\nthe code does?\",\"rawText\":\"Are you documenting what the code does?\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"E4egjr6rkvuDdDN6tCEq0\",\"originalText\":\"Are you documenting what the code does?\",\"lineHeight\":1.2,\"baseline\":67,\"autoResize\":true,\"index\":\"aP\"},{\"type\":\"arrow\",\"version\":765,\"versionNonce\":339242299,\"isDeleted\":false,\"id\":\"ad8m8N6otkqIco3A2SS4s\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-799.0808892545534,\"y\":-1165.9550715210155,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":80.5962400782006,\"height\":138.61802780191624,\"seed\":62952449,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"X08953Gk\"}],\"updated\":1745772063893,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"E4egjr6rkvuDdDN6tCEq0\",\"focus\":-0.3464480754881543,\"gap\":20.345917751538096},\"endBinding\":{\"elementId\":\"WDKIy4_OaSn4ID3fBt9li\",\"focus\":-0.2951067495203762,\"gap\":11.619656839216105},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-80.5962400782006,-138.61802780191624]],\"index\":\"aQ\"},{\"type\":\"text\",\"version\":11,\"versionNonce\":403943675,\"isDeleted\":false,\"id\":\"X08953Gk\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-857.99383150188,\"y\":-1249.047108082741,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":35.15625,\"height\":24,\"seed\":1904309071,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"yes\",\"rawText\":\"yes\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"ad8m8N6otkqIco3A2SS4s\",\"originalText\":\"yes\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"aR\"},{\"type\":\"diamond\",\"version\":259,\"versionNonce\":1761095733,\"isDeleted\":false,\"id\":\"WDKIy4_OaSn4ID3fBt9li\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1134.3993922743923,\"y\":-1472.7872890997892,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":337.5,\"height\":212,\"seed\":284299823,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"id\":\"ad8m8N6otkqIco3A2SS4s\",\"type\":\"arrow\"},{\"type\":\"text\",\"id\":\"CktcIYNv\"},{\"id\":\"_EbRjtFcvyWacG32dlehT\",\"type\":\"arrow\"},{\"id\":\"vGvtYy-VbndBr6RVnx8RO\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aS\"},{\"type\":\"text\",\"version\":250,\"versionNonce\":1711921563,\"isDeleted\":false,\"id\":\"CktcIYNv\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1041.6962672743923,\"y\":-1414.7872890997892,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":152.34375,\"height\":96,\"seed\":321026369,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Is it a\\nstable,\\npublic facing\\nAPI?\",\"rawText\":\"Is it a stable, public facing API?\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"WDKIy4_OaSn4ID3fBt9li\",\"originalText\":\"Is it a stable, public facing API?\",\"lineHeight\":1.2,\"baseline\":91,\"autoResize\":true,\"index\":\"aT\"},{\"type\":\"arrow\",\"version\":757,\"versionNonce\":1986106139,\"isDeleted\":false,\"id\":\"_EbRjtFcvyWacG32dlehT\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1040.877658047264,\"y\":-1443.7826154182032,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":76.66894811787142,\"height\":149.1231546685217,\"seed\":159610593,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"N2rT39wb\"}],\"updated\":1745772063896,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"WDKIy4_OaSn4ID3fBt9li\",\"focus\":-0.2112149576028748,\"gap\":21.30185442608311},\"endBinding\":{\"elementId\":\"G3JlxS4W9SlifBvxoq3g6\",\"focus\":0.13452332385492413,\"gap\":16.666666666666288},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-76.66894811787142,-149.1231546685217]],\"index\":\"aU\"},{\"type\":\"text\",\"version\":11,\"versionNonce\":812772923,\"isDeleted\":false,\"id\":\"N2rT39wb\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1095.9263886473605,\"y\":-1528.663945495091,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":35.15625,\"height\":24,\"seed\":2028948769,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"yes\",\"rawText\":\"yes\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"_EbRjtFcvyWacG32dlehT\",\"originalText\":\"yes\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"aV\"},{\"type\":\"rectangle\",\"version\":241,\"versionNonce\":983000821,\"isDeleted\":false,\"id\":\"G3JlxS4W9SlifBvxoq3g6\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1243.5433316683316,\"y\":-1710.9918345543347,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":225.00000000000006,\"height\":110.00000000000001,\"seed\":106264143,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"type\":\"text\",\"id\":\"svnVXCNB\"},{\"id\":\"_EbRjtFcvyWacG32dlehT\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aW\"},{\"type\":\"text\",\"version\":306,\"versionNonce\":1781427931,\"isDeleted\":false,\"id\":\"svnVXCNB\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1230.6527066683316,\"y\":-1703.9918345543347,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":199.21875,\"height\":96,\"seed\":2066747023,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Alright, this is\\nprobably fine.\\nJust don't overdo\\nit. \",\"rawText\":\"Alright, this is probably fine. Just don't overdo it. \",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"G3JlxS4W9SlifBvxoq3g6\",\"originalText\":\"Alright, this is probably fine. Just don't overdo it. \",\"lineHeight\":1.2,\"baseline\":91,\"autoResize\":true,\"index\":\"aX\"},{\"type\":\"arrow\",\"version\":763,\"versionNonce\":546731963,\"isDeleted\":false,\"id\":\"vGvtYy-VbndBr6RVnx8RO\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-913.6860882647969,\"y\":-1456.0702242275513,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":60.989743400770635,\"height\":140.70883055725244,\"seed\":536846639,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"mpCSij4v\"}],\"updated\":1745772063897,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"WDKIy4_OaSn4ID3fBt9li\",\"focus\":0.07860108168809486,\"gap\":16.612030350554505},\"endBinding\":{\"elementId\":\"4BgMR-JW8jquLasKskum6\",\"focus\":-0.10884440105885718,\"gap\":12.499999999999773},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[60.989743400770635,-140.70883055725244]],\"index\":\"aY\"},{\"type\":\"text\",\"version\":11,\"versionNonce\":97639291,\"isDeleted\":false,\"id\":\"mpCSij4v\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-895.7155648059417,\"y\":-1536.5660518134923,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":23.4375,\"height\":24,\"seed\":1279486497,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"no\",\"rawText\":\"no\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"vGvtYy-VbndBr6RVnx8RO\",\"originalText\":\"no\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"aZ\"},{\"type\":\"rectangle\",\"version\":253,\"versionNonce\":1567092149,\"isDeleted\":false,\"id\":\"4BgMR-JW8jquLasKskum6\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-952.2933316683318,\"y\":-1708.9085012210012,\"strokeColor\":\"#e03131\",\"backgroundColor\":\"transparent\",\"width\":221.2500000000001,\"height\":106.25,\"seed\":1474775361,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"type\":\"text\",\"id\":\"jsop4sS1\"},{\"id\":\"vGvtYy-VbndBr6RVnx8RO\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"aa\"},{\"type\":\"text\",\"version\":264,\"versionNonce\":2141107227,\"isDeleted\":false,\"id\":\"jsop4sS1\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-947.1370816683318,\"y\":-1691.7835012210012,\"strokeColor\":\"#e03131\",\"backgroundColor\":\"transparent\",\"width\":210.9375,\"height\":72,\"seed\":1406209921,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Stop and write\\n(better) code or a\\ntest instead!\",\"rawText\":\"Stop and write (better) code or a test instead!\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"4BgMR-JW8jquLasKskum6\",\"originalText\":\"Stop and write (better) code or a test instead!\",\"lineHeight\":1.2,\"baseline\":67,\"autoResize\":true,\"index\":\"ab\"},{\"type\":\"arrow\",\"version\":800,\"versionNonce\":1208338523,\"isDeleted\":false,\"id\":\"EUDrSO6P5myvZ79jXOeDs\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-607.0567500903293,\"y\":-1171.341856824156,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":93.19190744303887,\"height\":98.67137011424688,\"seed\":1247863041,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"NNkmfY0Y\"}],\"updated\":1745772063897,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"E4egjr6rkvuDdDN6tCEq0\",\"focus\":0.11972468978599413,\"gap\":12.489549732142095},\"endBinding\":{\"elementId\":\"dvM1YkYPsUKICFxEOGIYh\",\"focus\":0.4250395894408385,\"gap\":13.26153098019104},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[93.19190744303887,-98.67137011424688]],\"index\":\"ac\"},{\"type\":\"text\",\"version\":25,\"versionNonce\":663189691,\"isDeleted\":false,\"id\":\"NNkmfY0Y\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-625.7142112666393,\"y\":-1231.8301968394828,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":128.90625,\"height\":24,\"seed\":1876468463,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"no, the why\",\"rawText\":\"no, the why\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"EUDrSO6P5myvZ79jXOeDs\",\"originalText\":\"no, the why\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"ad\"},{\"type\":\"diamond\",\"version\":453,\"versionNonce\":290833525,\"isDeleted\":false,\"id\":\"dvM1YkYPsUKICFxEOGIYh\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-617.0433316683318,\"y\":-1458.075167887668,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":549.6590909090912,\"height\":260,\"seed\":1507763631,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"0OYQEKHa\"},{\"id\":\"EUDrSO6P5myvZ79jXOeDs\",\"type\":\"arrow\"},{\"id\":\"CvHp73zp5f2PX6rZaLODs\",\"type\":\"arrow\"},{\"id\":\"15347cTLb3D3zficDyFsc\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"ae\"},{\"type\":\"text\",\"version\":527,\"versionNonce\":724478299,\"isDeleted\":false,\"id\":\"0OYQEKHa\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-471.034808941059,\"y\":-1388.075167887668,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":257.8125,\"height\":120,\"seed\":258550191,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Good! But can the code\\nbe changed in a way to\\nnot require comments?\\n(i.e. be self-\\nexplanatory)\",\"rawText\":\"Good! But can the code be changed in a way to not require comments? (i.e. be self-explanatory)\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"dvM1YkYPsUKICFxEOGIYh\",\"originalText\":\"Good! But can the code be changed in a way to not require comments? (i.e. be self-explanatory)\",\"lineHeight\":1.2,\"baseline\":115,\"autoResize\":true,\"index\":\"af\"},{\"type\":\"arrow\",\"version\":913,\"versionNonce\":1515930171,\"isDeleted\":false,\"id\":\"CvHp73zp5f2PX6rZaLODs\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-448.166266542179,\"y\":-1422.076445930685,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":76.42949630525237,\"height\":171.4264896752211,\"seed\":323494703,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"d1TdAjKq\"}],\"updated\":1745772063899,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"dvM1YkYPsUKICFxEOGIYh\",\"gap\":16.697082406392937,\"focus\":-0.23430046735756072},\"endBinding\":{\"elementId\":\"t1EWA-yJ78t1xz5gJLEDQ\",\"gap\":12.925824175824118,\"focus\":0.1328921442636625},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[-76.42949630525237,-171.4264896752211]],\"index\":\"ag\"},{\"type\":\"text\",\"version\":11,\"versionNonce\":1608959483,\"isDeleted\":false,\"id\":\"d1TdAjKq\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-502.51456164913475,\"y\":-1520.231992527736,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":35.15625,\"height\":24,\"seed\":348656513,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"yes\",\"rawText\":\"yes\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"CvHp73zp5f2PX6rZaLODs\",\"originalText\":\"yes\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"ah\"},{\"type\":\"rectangle\",\"version\":233,\"versionNonce\":189590325,\"isDeleted\":false,\"id\":\"t1EWA-yJ78t1xz5gJLEDQ\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-641.3766650016651,\"y\":-1712.4918345543347,\"strokeColor\":\"#e03131\",\"backgroundColor\":\"transparent\",\"width\":212.50000000000023,\"height\":112.5,\"seed\":1768570529,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"type\":\"text\",\"id\":\"dl6Pnyys\"},{\"id\":\"CvHp73zp5f2PX6rZaLODs\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"ai\"},{\"type\":\"text\",\"version\":247,\"versionNonce\":1286753947,\"isDeleted\":false,\"id\":\"dl6Pnyys\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-623.017290001665,\"y\":-1680.2418345543347,\"strokeColor\":\"#e03131\",\"backgroundColor\":\"transparent\",\"width\":175.78125,\"height\":48,\"seed\":1828018177,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Well... then do\\nthat instead.\",\"rawText\":\"Well... then do that instead.\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"t1EWA-yJ78t1xz5gJLEDQ\",\"originalText\":\"Well... then do that instead.\",\"lineHeight\":1.2,\"baseline\":43,\"autoResize\":true,\"index\":\"aj\"},{\"type\":\"arrow\",\"version\":1009,\"versionNonce\":869090011,\"isDeleted\":false,\"id\":\"15347cTLb3D3zficDyFsc\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-203.12118968697067,\"y\":-1404.1944102231719,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":116.0725040927356,\"height\":151.08200189586546,\"seed\":666665647,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[{\"type\":\"text\",\"id\":\"B9ZuKvHP\"}],\"updated\":1745772063900,\"link\":null,\"locked\":false,\"startBinding\":{\"elementId\":\"dvM1YkYPsUKICFxEOGIYh\",\"gap\":16.293433776118675,\"focus\":0.295831873190218},\"endBinding\":{\"elementId\":\"YYobtGzF2n-ANcJ7kRnaZ\",\"gap\":13.03571428571422,\"focus\":-0.3936417898210161},\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":\"arrow\",\"points\":[[0,0],[116.0725040927356,-151.08200189586546]],\"index\":\"ak\"},{\"type\":\"text\",\"version\":10,\"versionNonce\":1950597947,\"isDeleted\":false,\"id\":\"B9ZuKvHP\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-158.95533868535037,\"y\":-1492.8601444437677,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":23.4375,\"height\":24,\"seed\":785250639,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"no\",\"rawText\":\"no\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"15347cTLb3D3zficDyFsc\",\"originalText\":\"no\",\"lineHeight\":1.2,\"baseline\":19,\"autoResize\":true,\"index\":\"al\"},{\"type\":\"rectangle\",\"version\":284,\"versionNonce\":892953077,\"isDeleted\":false,\"id\":\"YYobtGzF2n-ANcJ7kRnaZ\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-312.55090742590755,\"y\":-1751.2418345543347,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":393.7500000000001,\"height\":190,\"seed\":1271689743,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":3},\"boundElements\":[{\"type\":\"text\",\"id\":\"18ks67SF\"},{\"id\":\"15347cTLb3D3zficDyFsc\",\"type\":\"arrow\"}],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"index\":\"am\"},{\"type\":\"text\",\"version\":541,\"versionNonce\":1593680859,\"isDeleted\":false,\"id\":\"18ks67SF\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-303.1759074259075,\"y\":-1740.2418345543347,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":375,\"height\":168,\"seed\":1100184431,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":3,\"text\":\"Alright. Sometimes things just\\nsuck. Be sure to include the\\ndate, your name and links to\\nexternal resources (if\\napplicable). Make sure to reduce\\nthe surprises for developers\\nfollowing in your footsteps.\",\"rawText\":\"Alright. Sometimes things just suck. Be sure to include the date, your name and links to external resources (if applicable). Make sure to reduce the surprises for developers following in your footsteps.\",\"textAlign\":\"center\",\"verticalAlign\":\"middle\",\"containerId\":\"YYobtGzF2n-ANcJ7kRnaZ\",\"originalText\":\"Alright. Sometimes things just suck. Be sure to include the date, your name and links to external resources (if applicable). Make sure to reduce the surprises for developers following in your footsteps.\",\"lineHeight\":1.2,\"baseline\":163,\"autoResize\":true,\"index\":\"an\"},{\"id\":\"0K6U8GOd\",\"type\":\"text\",\"x\":-1154.493797868798,\"y\":-793.5696456321458,\"width\":253.125,\"height\":43.199999999999996,\"angle\":0,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"seed\":221421372,\"version\":65,\"versionNonce\":1409506133,\"isDeleted\":false,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"text\":\"START HERE >\",\"rawText\":\"START HERE >\",\"fontSize\":36,\"fontFamily\":3,\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"baseline\":35,\"containerId\":null,\"originalText\":\"START HERE >\",\"lineHeight\":1.2,\"autoResize\":true,\"index\":\"ao\"},{\"type\":\"text\",\"version\":106,\"versionNonce\":1693610107,\"isDeleted\":false,\"id\":\"LToGvfgF\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-456.2650185761911,\"y\":-796.1395757020758,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":253.125,\"height\":43.199999999999996,\"seed\":702280636,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745772063714,\"link\":null,\"locked\":false,\"fontSize\":36,\"fontFamily\":3,\"text\":\"< START HERE\",\"rawText\":\"< START HERE\",\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"containerId\":null,\"originalText\":\"< START HERE\",\"lineHeight\":1.2,\"baseline\":35,\"autoResize\":true,\"index\":\"ap\"}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#1971c2\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"solid\",\"currentItemStrokeWidth\":2,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":0,\"currentItemOpacity\":100,\"currentItemFontFamily\":3,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"left\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"currentItemArrowType\":\"round\",\"scrollX\":2048.816780715676,\"scrollY\":2099.771973296992,\"zoom\":{\"value\":0.536063},\"currentItemRoundness\":\"round\",\"gridSize\":20,\"gridStep\":5,\"gridModeEnabled\":false,\"gridColor\":{\"Bold\":\"rgba(217, 217, 217, 0.5)\",\"Regular\":\"rgba(230, 230, 230, 0.5)\"},\"currentStrokeOptions\":null,\"frameRendering\":{\"enabled\":true,\"clip\":true,\"name\":true,\"outline\":true},\"objectsSnapModeEnabled\":false,\"activeTool\":{\"type\":\"selection\",\"customType\":null,\"locked\":false,\"fromSelection\":false,\"lastActiveTool\":null}},\"files\":{}};InitialData.scrollToContent=true;App=()=>{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=>{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=>{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(\"resize\",e),()=>window.removeEventListener(\"resize\",e)},[t]),React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"excalidraw-wrapper\",ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(\"Rules_for_Code_Comments_2024-03-21_0941.05.excalidraw.md1\");ReactDOM.render(React.createElement(App),excalidrawWrapper);})();\n\nonly document the &quot;why&quot;. The code should be documentation of the &quot;what&quot; in most cases\nif you had to rewrite a piece of code 3 times before it worked, write about what made it so difficult\nif you had to google or read documentations for a day before a piece of code worked, write about what made it so difficult and link the documentation/stack overflow result\nif a piece of code is much more complex than expected (<a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Bullshit detector</a>) write about the reason (or better: rewrite it)\nif you had a profound insight or learning while writing some code, leave a comment about it\nwrite about edge cases, that are easily missed\ninclude links to external resources\ncomments are often read by people who have no idea about the context (this even might just be you in a few years), so make sure to provide context (links, your name, date)\nif you are having trouble reading your own code, document it (or better: rewrite it)\nonly comment as little as possible, as much as necessary\ncomments become stale and old -&gt; do not document rapidly changing pieces, only code that has settled\n\ndocstring (/* @param ... */) for stable APIs\n\nTests can be documentation: a working example of how to use the API\nLeave a (3-5 line) summary of what a module does at the top of it. This is much better in most cases than line-by-line or function-by-function comments\nFrom comments on video DON'T Comment Your Code (youtube.com): comments should\n\nidentify dependencies that are not apparent\ndescribe reasoning for architectural choices\nsignificantly reduce surprise\n\nThe comments inserted by AI tools are usually not useful, since they just explain what the code is doing - which is mostly trivially obvious when you read it. You should not copy this style:\n// List of options to populate the dropdown\nconst optionsList = ['Option 1', 'Option 2', 'Option 3', 'Option 4'];\n\n// Function to populate the dropdown\nfunction populateDropdown(options) {\nconst dropdown = document.getElementById('dynamicDropdown');\n\n// Clear any existing options\ndropdown.innerHTML = '';\n\n// Create and append options\noptions.forEach(optionText =&gt; {\nconst option = document.createElement('option');\noption.value = optionText.toLowerCase().replace(' ', '_'); // Example of setting value\noption.textContent = optionText;\ndropdown.appendChild(option);\n});\n}\n\n// Call the function to populate the dropdown with the list\npopulateDropdown(optionsList);",
		"tags": [ "note","opinion"]
},

{
		"title": "Stack vs. Heap",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/stack-vs-heap/",
		"content": "Fazit\nPass by Value ist bei kleinen Objekten zu bevorzugen. Es kann besser optimiert werden, da es für den Compiler transparent ist.\nBei größeren Objekten ist ein gewisser overhead zur Vorbereitung des Funktionsaufrufs verbunden. Allerdings kann der Compiler mathematische Operation ggf. vorberechnen und loops unrollen. Dies gilt solange das Objekt auf dem Stack liegt, falls nicht muss es dorthin kopiert werden, das ist dann deutlich aufwendiger!\nEs müssen also die Kosten für copy auf den stack vs. Pointer indirection (und damit einhergehende Intransparenz) abgewogen werden.\nhttps://godbolt.org/z/7jPYhn9TP\nCPUs laden Daten in Chunks (Cache line). Bei modernen Desktop-CPUs ist diese 64 Byte groß - bei vielen embedded Systemen (ESP32, ARM Cortex &gt;M4) 32 Bytes. Maximalgröße für Pass-by-value sollte kleiner als eine Cache Line sein. Wenn das Object kleiner als 1-2 Words (also 8-16 Byte bei 64-bit Systemen) ist, kann es sogar direkt in einen/mehreren Registern geladen werden (und muss auch kein pointer offset berechnet werden).\nGallery of Processor Cache Effects (igoro.com)\nsiehe auch: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/tech/cpu/#cache\">CPU#Cache</a>\nAuf 8bit/16bit-Systemen mit wenigen Registern immer pass-by-reference!\nhttps://stackoverflow.com/a/30987540\nGrundlagen\n\nstack wird pro thread bei start des Programms allokiert. Größe wird von Compiler oder OS bestimmt.\n\nFür C siehe: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/langauges/c/#stack-space\">C#Stack space</a>\n\nFunktionsaufrufe, return Adresse und lokale variablen liegen im stack. Größe für lokale variablen wird beim Kompilieren bestimmt.\nglobale und static variablen liegen im &quot;code&quot; (const) oder &quot;data&quot; segment (in C/C++)\nAllokationen von Pointern reservieren platz auf dem heap\nAllokationen auf dem stack verschieben nur stack pointer (schnell)\nAllokationen auf dem heap sind deutlich aufwendiger (virtual alloc)\nAnonyme Funktionen (in C# oder Java) haben Zugriff auf variablen aus dem aufrufenden Kontext. Diese müssen temporär auf dem heap gespeichert werden!\nSpeicheradresse von Variablen auf dem Stack: 0x7f.... (x86_64)\nhttps://endjin.com/blog/2022/07/understanding-the-stack-and-heap-in-csharp-dotnet?utm_source=csharpdigest&amp;utm_medium&amp;utm_campaign=1386\n\nBeispiel\nOhne compiler Optimierung:\nPoint p = {.x=5,.y=3};\nint len = length(p);\n\nstack pointer wird verringert\nwerte werden in den stack geschrieben\nAdresse von struct wird in register geschrieben\nFunktion wird aufgerufen\n\nlädt werte aus stack in register\nmultipliziert register\n\nErgebnis wird aus register in stack geschrieben\n\nPoint *p = malloc(sizeof(Point));\np-&gt;x = 5;\nP-&gt;y = 3;\nint len = length(p);\n\nstack pointer wird verringert\nmalloc wird aufgerufen\nAdressen von membern werden einzeln in register geladen\nwerte werden an Adresse in Registern geschrieben\nAdresse von struct wird in Register geschrieben\nFunktion wird aufgerufen\n\nlädt Adresse von membern in register\nlädt wert an Adresse in anderen Register\nmultipliziert werte\n\nErgebnis wird aus register in stack geschrieben\nhttps://godbolt.org/z/h9v8PhEce\n\nMit zusätzlicher globaler count variable, um zu verhindern, dass compiler alles statisch berechnet und weg optimiert:\nFall1 mit übergebenem struct wird immer noch vom compiler weg optimiert und statisch berechnet, fall2 mit malloc und Referenz nicht!\nAber funktion mit Berechnung mit pointer wird zu Fall1 ohne pointer optimiert (aka laden der member Adressen in Register wird übersprungen). Funktion für Fall1 ohne pointer ist nun shift Operation (?).\n-&gt; optimierung von pointer fall laggt einen zyklus hinterher\nhttps://godbolt.org/z/Efdhaj65o\nPass-by-reference\nC hat kein pass-by-reference! Alles wird als value übergeben.\nPass-by-reference und pass-by-pointer in C++ produzieren denselben Assembler Code!\nhttps://godbolt.org/z/zc3asWoWc\nWeiteres Beispiel mit einem Parameter, welcher verändert werden soll (pointer) und einem zusätzlichen wert (einmal value, einmal pointer). Assembly ist sehr ähnlich, pass by pointer hat im Grunde nur einen mov und eine dereferenzierung mehr. Dies bleibt auch über unterschiedliche -Ox settings ähnlich. Bei -O wird immer nur der erste call zu addScaled weg optimiert.\nhttps://godbolt.org/z/4PW31a66o\nPraktische Betrachtung im Playdate collision code: Kein messbarer Unterschied zwischen pass-by-value und pass-by-reference für Vector2D Klasse. Auch bei 20 zusätzlichen floats nicht. Erst bei 200 sinkt die Performance von pass-by-value merklich (5-10%).",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Testing",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/testing/",
		"content": "https://youtu.be/IqHaGd9J42s?feature=shared&amp;t=1511\nhttps://www.youtube.com/watch?v=isI1c0eGSZ0\nhttps://youtu.be/kJWsFWY25GA?feature=shared\nhttps://grugbrain.dev/\nhttps://lightbrd.com/SebAaltonen/status/1924075241413705914#m\nGenerell\n\n100% Coverage ist Quatsch (trivialer Code muss nicht getestet werden und erzeugt nur Rattenschwanz an Mehraufwand). 100% sagt auch nichts darüber aus, ob wirklich alle Edge-Cases getroffen wurden (sondern nur, dass jede Zeile Code mindestens 1x von einem Test aufgerufen wird) - ist also kein Garant für Bug-freien Code.\nTests sind Code und können auch Bugs enthalten (Wer testet die Tests?)\nTests sollten so deklarativ wie möglich sein (doX; doY; doZ)\nTests müssen ordentlich funktionieren. Wenn Tests zu viele false-positives liefern werden sie irgendwann ignoriert.\n\nEin fehlender Test ist besser als ein falscher Test!\n\nTest-Code muss von mindestens so erfahrenem Entwickler geschrieben werden, wie der zu testende Application Code\n\nEs ist sehr schwierig alle Edge-Cases auf dem Schirm zu haben und zu testen. Aber hier liegt der wahre Wert von Tests.\nTests finden nur &quot;bekannte&quot; Bugs, die man vorher erwartet hat\n\nGenerell gute Idee: Wenn man einen neuen Bug findet, einen Test für den Fix schreiben (welcher ohne Fix anschlägt), um Regressionen zu vermeiden. Insbesondere bei komplexen Bugs sehr zu empfehlen.\nTestcode sollten Bereiche testen, wo der Output relativ stabil ist. Wenn sich bei Änderung der Implementierung auch der Output ändert, müssen meist die Test-Cases angepasst werden und sind damit wertlos (bzw. erzeugen nur Mehraufwand). Den Scope des Tests (Unit vs. Integration vs. E2E vs. ...) richtig zu wählen, kann hier Arbeit ersparen (bspw. keine Unit Tests für eine Implementierung schreiben, welche sich täglich ändert, sondern lieber einen E2E Test wenn das Ergebnis immer gleich ist)\n\nTest Driven Development (TDD)\n\nKann sinnvoll sein, muss aber zielgerichtet eingesetzt werden\nKann dazu führen, dass man Code schreibt, welcher sich zu sehr auf die vorher definierten Tests fokussiert und nicht auf den eigentlichen &quot;Job-to-be-done&quot; (also z.B. eine API welche die Tests super abdeckt, aber in der Praxis schwer zu benutzen ist)\nTest im vorhinein zu schreiben ist sehr schwierig, da das System oder die Aufgabe meist nicht klar definiert ist. Kann dazu führen, dass man während der Entwicklung viel Arbeit doppelt macht. Oftmals ist es einfacher ein System zu testen, sobald es sich stabilisiert hat.\nTDD scores können als Gamification-Element zur Erhöhung der Motivation beitragen (man will seinen Test-Score erhöhen und quält sich deswegen durch ein langweiliges Problem)\n\nUnit Tests\nTesten von einzelnen Code &quot;Units&quot;, also z.B. Funktionen, Datentypen, Modulen etc.\n\nKeine Logik in Unit-Tests! (if..else) -&gt; macht debugging deutlich schwieriger und man kann sich nicht darauf verlassen, dass alle Pfade richtig getestet wurden\nBei einem Refactoring müssen auch die meisten Unit Tests umgeschrieben werden\n\nZu umfangreiche Tests vermeiden\nUnit Tests für trivialen Code vermeiden\nGgf. besser: Integrations-Tests in CI/CD-Pipeline\nZu viele Tests erhöhen die Reibung bei einem notwendigen Rewrite und halten ggf. davon ab (man will keinen fertigen Code wegschmeißen)\n\nEmpfohlen bei komplexen Code (wo man Code nicht auf Anhieb richtig hinbekommen hat)\nBei Libraries empfohlen, sobald API einigermaßen fest ist\n\nTests können als eine Art Dokumentation einer API dienen, da man sieht wie Funktionen aufgerufen und welche Ergebnisse erwartet werden.\nCasey empfiehlt (-&gt;<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/architecture/#api-design\">Architecture#API Design</a>) den Anwendungscode zuerst zu schreiben. Dies kann auch in Form von Tests passieren, wenn diese nah an der realen Anwendung orientiert sind.\n\nHerausforderung: Testen von Verbindungen zu externen Quellen (Lesen/Schreiben von Dateien, Zugriff auf Datenbanken, HTTP, etc.)\n\nMocking: Simulation externer Abhängigkeiten (z.B. Datei oder Datenbank) durch eigene &quot;Fake&quot;-Implementation. (z.B. indem Zugriff in abstrakten &quot;provider&quot; gewrappt ist). Achtung: Hierbei werden ggf. nicht die Fehlerfälle getestet, welche bei echtem Zugriff entstehen können. Erfolg hängt von Qualität des Mocks ab und ist ggf. mit hohem Aufwand verbunden.\nBesser: Split von Zugriff und Verarbeitung der Daten (zweite Funktion welche z.B. byte-Array als Input nimmt). Können separat getestet werden.\nhttps://youtu.be/isI1c0eGSZ0?feature=shared&amp;t=540\n\nDie Unit Tests sollten niemals die Programm Architektur bestimmen: Gefahr, dass Code geschrieben wird, der zwar sehr &quot;testbar&quot; ist, aber die eigentliche Aufgabe nur schlecht erfüllt (zu langsam ist, schlechte API, zu viele Abstraktionen, etc.). Wird durch TDD zusätzlich erhöht, wenn Tests zuerst geschrieben werden und der Code danach nur auf die Tests ausgerichtet ist.\nTests müssen schnell sein! Iterationsgeschwindigkeit ist key und Tests dürfen dem nicht im Wege stehen\n\nZugriff auf externe Systeme (Datenbanken, Dateisystem, Web!) vermeiden und lieber &quot;golden master&quot; Testdaten im Code ablegen.\n\nProgrammiersprachen mit striktem Typensystem haben gewisse Tests eingebaut (Test auf Kompatibilität der Datentypen, Test auf Verlust bei Konvertierung, Test auf Mutability, etc.). Wenn dies genutzt werden kann, ist dies immer besser als ein vergleichbarer Unit-Test (kein zusätzlicher Code, mit größerer Sicherheit Bug-frei, schneller/effizienter).\n\nIntegration Tests\nTest des Zusammenspiels mehrerer Module (Klassen, Services, Funktionen, etc.)\n\nGute Möglichkeit Wechselwirkung und Kommunikation zwischen mehreren Bereichen des Codes zu testen (z.B. Zugriff auf Datenbank + Verarbeitung der Daten oder Authentifizierung + Login)\nUmfang und Aufwand liegt zwischen Unit- und E2E-Tests. Oftmals guter Mittelweg.\nSollten erst geschrieben werden, wenn der Systemaufbau einigermaßen stabil ist. Ansonsten zu viel Arbeit zum Maintainen\n\nEnd-To-End Tests\nTesten des gesamten Produktes anhand der Systemgrenzen (z.B. von User-Input bis GUI oder Eintreffen eines Datenpakets, über die Verarbeitung bis zum Versand einer Alert-E-Mail)\n\nIdealerweise in CI/CD-Pipeline integriert\nTesten das gesamte System mit seinen Abhängigkeiten in einer &quot;realen&quot; Umgebung\nSehr aufwändig zu implementieren und zu maintainen (müssen auch aktiv maintained werden, sonst versagen sie irgendwann und liefern false-positives)\nMüssen reproduzierbar sein, ansonsten wird debugging unmöglich\nSehr wertvoll, aber auch aufwendig, daher: Fokus auf die wichtigsten (am häufigsten genutzten) Funktionen\nAufpassen, dass Tests nicht zu sehr den internen State beschreiben/festlegen und dadurch notwendige Änderungen blockieren\n\nSnapshot Tests\n\nMan nimmt einen Schnappschuss des Systems im &quot;known good&quot; Zustand auf (&quot;golden Master&quot;) und vergleicht im Folgenden damit (bspw. Zustand des Programms nachdem gewisser Input geliefert wurde)\nAbweichungen vom Schnappschuss führen zum Fehlschlagen des Tests und Diff kann dann näher zur Ursachenforschung untersucht werden\nEine Form von Integration oder End-To-End Tests\nAufwendig aufzubauen, aber sehr hilfreich bei großen Änderungen\nHilft ungewollte Veränderung an global state zu erkennen\nNur sinnvoll, wenn der Systemzustand konstant bleibt (also bspw. die Änderungen nur den Weg dahin beeinflussen, aber nicht den Zustand an sich)\n\nTest-Framework für C\n\nassert, assertf\nµnit — C Unit Testing Framework\n\nVordefinierte assert Makros\nDefinition von Test-Suites mit Performance-Benchmark und Statistik Output",
		"tags": [ "note","experience","opinion","german"]
},

{
		"title": "Musiktheorie",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/design/musiktheorie/",
		"content": "https://www.youtube.com/watch?v=HAWUhboLW-0\nVorgehen\n\nUngefähre Melodie spielen\n&quot;Rest points&quot; identifizieren (Moment wo Melodie &quot;anhält&quot;)\nAkkord unter diese Momente legen, welcher Note aus Melodie beinhaltet (um Oktave verschoben)\nHeroes Journey\n\nCenter / Home -&gt; Call -&gt; Threshold -&gt; Learning -&gt; Coming Back\nAkkorde: I -&gt; IV, VI, III (einer oder mehrere) -&gt; II (optional) -&gt; V -&gt; I\n\nI, IV, V sind dur (III, VI moll) in C-dur -&gt; positive Emotionen\nI, IV, V sind moll (III, VI dur) in C-moll -&gt; negative Emotionen\n\nTonleiter\n\nDur\n1 -&gt; 1 -&gt; 1/2 -&gt; 1 -&gt; 1 -&gt; 1 -&gt; 1/2\n\nC-dur: C -&gt; D -&gt; E -&gt; F -&gt; G -&gt; A -&gt; B -&gt; C\nMoll\n1 -&gt; 1/2 -&gt; 1 -&gt; 1 -&gt; 1/2 -&gt; 1 -&gt; 1\n\nA-moll: A -&gt; B -&gt; C -&gt; D -&gt; E -&gt; F -&gt; G -&gt; A\nWichtigste Akkorde (C-dur)\nDur\nStart -&gt; 4 Halbtöne -&gt; 3 Halbtöne\nI -&gt; C E G\n\nIV -&gt; C F A\n\nV -&gt; G D B\n\nMoll\nStart -&gt; 3 Halbtöne -&gt; 4 Halbtöne\nIII -&gt; E G B\n\nVI -&gt; A C E",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "UI - UX",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/design/ui-ux/",
		"content": "Error / Info messages &gt; Disabled buttons &gt; Hidden buttons\n\nhiding UI elements can be useful in complex environments to filter non-applicable items\nhowever keep in mind that making an element unavailable or unclickable always comes with the user asking himself &quot;where is that button I used a minute ago?&quot; or &quot;why can't I click this now - I could before?&quot;\nif you are hiding or disabling elements, it should be totally obvious to the user why that is the case (or you could tell him in a hover text)\nbad counter example: Photoshop disabling certain options when image uses indexed color mode\n\nProvide (meaningful) error messages\n\nThis does not help anyone:\nTell the user exactly what went wrong\nIdeally include a hint on how to fix the error\nMake the error message easily googleable (use descriptive keywords, make the text copyable - old Windows error dialog boxes copied the whole content to clipboard when the user pressed Ctrl + C)\nIf you fear overly technical terms might scare the user, first reconsider the user as a competent individual, second if you are still unsure hide additional details &quot;for nerds&quot; behind a &quot;more info&quot; dropdown\n\nProvide a search option, if your program has lots of options or settings\nProvide feedback\n\n(see error messages above)\nClicking a button should do something\nIf the user does an action, there needs to be a response. If the computation takes longer, show a progress bar for example.\n\nDon't overuse animations\n\nThey can be handy to direct the users attention\nThey can make an interface feel more smooth\nBe mindful: They increase complexity of the code, since you now have &quot;intermediate&quot; state and lerps you need to track. To keep things simple, just keep an &quot;actual value&quot; and an &quot;animated value&quot; - first one is for computing, second only for drawing.\nIf you include them, make them fast and snappy. Don't waste the user's time. lerp with a high t value can be a good choice.\n\nThe user should always be in control\n\nAvoid modals\nMake long operations cancel-able\nUndo/redo\nAvoid waiting time (animations, etc.)\nAvoid editing things the user has entered (e.g. do a validation pass when the user has clicked submit on a form and highlight or correct errors then. Dont edit while the user is typing, show errors at maximum then)\nConfig options, window customization\n\nTreat the user as a intelligent individual with agency (see above)\n\nGive the power to do complex stuff\ndon't oversimplify the interface, alternatively provide an &quot;expert&quot; mode (but be aware that this doubles the amount of work and code paths)\nGive background/developer information the user can use to diagnose problems (googleable). Maybe hide those in an optional text box, but never remove them\n\nMake clickable elements obvious as such\n\nText hyperlinks are for the web, not UIs\n\nUse well known elements, don't re-invent the wheel\n\ncreate fancy new controls only if they provide a clear benefit and are absolutely necessary\nUsers interact with tons of UI every day. They don't have time to learn something new\n\nProvide meaningful defaults\n\nConfig options are nice, but don't make them necessary\n\nConsistency is key\n\nKeep a clear structure to your UI (main navigation, position of nested elements, etc.)\nDon't make one element do multiple things in different contexts (or make it very obvious, if it is totally necessary)\n\nThe less screens information is scattered on, the better\n\nScreens should not be overcluttered with buttons and information, but should not be too simple either as to require a lot of popups and screen changes\nEvery screen change removes context and makes it harder to follow\n\nwhitespace\n\nless is more: make all meamingful content actually fit the screen. Dont require popups or scrolling\ncluttering: it takes a lot to be cluttered, just group elements together in a meaningful way and thinks keep being organized even with much on the screen\nadd whitespace around elements only for touchscreens (different ui concept, different problemsl)\n\nConcurrency\nhttps://www.youtube.com/watch?v=Tvms2DaG8UY\n\nUI becomes 10x harder when the web or any server is involved\nrequests can get lost or delayed, so UI can become out of sync\nIncluding updates state in POST request: can be inconsistent, when earlier request out of multiple is delayed and applies old state on return\nupdating after POST: adds another round trip to the server (lag), plus possible inconsistent updates/jitter in between muliple request (but at least good state at the end)\nmore problems when infrastructure is scaled (state needs to be synced between servers)\ntimestamps are also tricky, since you need to carefully design at what moment to take them\nbig problem: non idempotent changes like shopping checkout, which should only be handled once\npossible solution: causal ordering. Include dependency on request 1 in data of request 2 and handle on server\ngenerally: update UI locally to show immediate feedback, do not wait or block, update when corrected data arrives\ngenerally: solution is trade off between solving state sync problems and managing concurrency with stateless sources",
		"tags": [ "note","opinion"]
},

{
		"title": "Video Games",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/design/video-games/",
		"content": "10 Lessons as per Mark Brown\nhttps://www.youtube.com/watch?v=Cm2_drGLGbc\n\nIf you want to understand why a game makes you feel a certain way, ask yourself: how do the mechanics contribute to the experience?\nThere is no definitive right or wrong mechanic. The only way to judge a mechanic, is to ask whether or not it can contribute to the experience you are trying to forge.\nYou have to decide who the game is for and tune your mechanics appropriately. (e.g. hard-code or casual, accessible or much to learn)\nOptions and bonus content can be used to make a game appealing to those who are more (or less) hardcore than the target audience. (bonus levels in Mario as an example)\nOptions, accessibility settings and easy modes don't have to pose a threat to your intended experience. (Assist mode in celeste as an example)\nDesigners should think of genres in the loosest possible terms. (Don't put yourself in a box, before designing something)\nThe best solution for a complex problem is whatever provides the most interesting experience to the player. (Iterate often, follow the fun)\nA game idea is worthless until you have proven its value through a prototype.\nFrequent playtesting should be used to make sure your design is effectively producing the results you desire. (use with caution, there is only once chance for a first impression)\nAlways figure out for yourself if a game design lesson is true for your and for the type of games you want to make. (Trends change, play a lot of games)\n\nWhat is fun?\nhttps://www.youtube.com/watch?v=TbZ3HzvFEto&amp;t=940s\n\n&quot;The degree to which the games recognizes and responds to the player's choices and actions&quot;\n\nBehavioral science equivalent: What are the reinforcers? What is the reinforcement schedule?\n\nIf you do something, the game has to react to it. If you shoot a wall, there have to be decals (and a sound effect). If the wall is ignoring the player, it inflicts a &quot;narcissistic injury&quot;\nThe game has to acknowledge back to the player that he is making choices and that he is progressing. Otherwise it loses any impact.\nIf the player stands still, the world can be quiet. But as you walk forward, something has to happen every 3-5 seconds (even if it is just a little thing like an interesting sign or a sound). https://youtu.be/TbZ3HzvFEto?feature=shared&amp;t=670\nhttps://youtu.be/nCxU-OBoISk?feature=shared&amp;t=1057\nThere needs to be a response to the action. The more meaningful the action, the bigger the response\nExaggerate a bit. Use sounds / animation / screen shake / etc.\nThe core actions of the game should feel really awesome. Create an unique experience that matches the action\nThese responses keep the player engaged\n\nCombinatorics\n\nIn many cases you want combinatoric explosion (e.g. n*m instead of n+m), because it gives you a bigger solution space to work in\n\nhttps://youtu.be/nCxU-OBoISk?feature=shared&amp;t=831\n\nExample: Draw/handle hats separately from characters, so you can put any hat on any character. Draw background for cards separately from emblem, so they can be animated individually (and don't require a spritesheet)\nMake behaviors orthogonal to each other so they can be combined in interesting ways (see <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/game-programming/#fat-flat-struct-behaviors\">Game Programming#Fat/Flat struct (behaviors)</a>)\n\nPuzzle Games\n\nWas ist das Kernthema des Spiels? (Braid: Zeit, VVVVVV: Flipping)\n\nAlle Puzzle sollten eine Eigenschaft dieses Themas behandeln (On-Topic) und nicht über Off-Topic Eigenschaften lösbar sein (z.B. Timing bei Jumps)\nAlle interessanten Effekte und Eigenschaften des Themas sollten durchgespielt werden (siehe z.B. Braid). Wie verändert das Thema ein klassisches Spiel? Was passiert wenn man XYZ hinzufügt? Was passiert, wenn man es weglässt? Was passiert wenn man Parameter XYZ davon ändert? etc.\n\nDie offensichtliche aber falsche Lösung sollte eindeutig falsch sein (ein Sprung sollte deutlich zu kurz sein, wenn das entscheidende Element fehlt und nicht nur ein bisschen zu kurz) -&gt; ansonsten denkt ein Spieler, dass es an seinen mangelnden Fähigkeiten liegt (Off-Topic Element))\n\nInsbesondere gilt dies bei &quot;analogen&quot; Spielen/Mechaniken: Die richtige Lösung sollte sich deutlich von falschen abheben (hoher &quot;margin of error&quot; bei der richtigen Lösung)\nBei präzisen Elementen kann man kleine visuelle Hinweise an der richtigen Stelle platzieren (darf nicht zu auffällig sein)\nGenauso sollte die finale Lösung einfach zu erzeugen sein, damit nach dem Aha-Moment des Spielers es nicht mehr an mechanischen Fähigkeiten scheitert (oder anderen Off-Topic Elementen)\n\nDie Grundelemente des Spiels sollten sehr simpel und verständlich sein. Ansonsten wird das Spiel zu komplex, wenn Elemente des Kernthemas dazu kommen\n\nJedes dieser Elemente ist ein Werkzeug für den Spieler. Er muss dieses gut verstehen und von den anderen Werkzeugen unterscheiden können, um die richtige Auswahl beim Lösen eines Puzzles zu treffen.\nDem Spieler Zeit geben die einzelnen Elemente einzeln und in Kombination zu lernen\nSich Gedanken a-priori über diese Elemente machen ist sehr wichtig: z.B. wie groß soll Charakter sein (beeinflusst wie viel auf den Bildschirm passt), wie schnell (beeinflusst wie viel mechanische Fähigkeiten der Spieler haben muss und wie schnell sich das Spiel anfühlt), wie hoch soll Jump sein (beeinflusst Vertikalität und wie groß Level sein kann), etc.\nKonsistenz: Die Elemente sollten sich nicht groß verändern, sodass der Spieler keine Überraschung erlebt und sich immer auf die Kernfunktionen verlassen kann (sonst: Frustration, Unklarheit)\nIdealerweise gibt es keine Elemente, die nur einmal in Spezialsituationen verwendet werden. Ansonsten wird der Spieler diese auch an anderer Stelle suchen\n\nAnaloge Elemente sind schwieriger zu designen als diskrete\n\n(s.o.) Bandbreite zwischen Lösungen ist kontinuierlich und ggf. klein\nSpieler muss viel mit den Variablen probieren um &quot;sweet spot&quot; zu finden (im Gegensatz zu einer richtigen Kombination von diskreten Einstellungen)\nPlattformer: Jump sollte vermutlich konstant sein (Länge wie Höhe). Ansonsten zu viele Variablen beim Gestalten von Puzzles (muss immer alle Variationen des Jumps testen) und zu viel Fokus auf mechanische Fähigkeiten des Spielers\n\nAntithese: Manchmal bietet es sich an, einzelne dieser Regeln zu brechen, um den Spieler auf etwas zu stoßen, andere Elemente hervorzuheben oder das Spiel aufzulockern (Braid: Hunt Levels - drehen sich nicht strikt um Zeit, haben komisches Hud und besondere Tür)\nPuzzles sollten auf ihre Essenz destilliert werden: Nicht mehr Elemente als nötig enthalten (On-Topic wie Off-Topic)\n\nIdealerweise entwickelt man ein Gefühl dafür, was ein spezielles Puzzle &quot;ausmacht&quot; und wie es sich von anderen Puzzles abhebt. Man sollte versuchen alle Elemente zu entfernen, die dafür nicht zwingend notwendig sind\nHierbei ist die Balance des Schwierigkeitsgrad und wie viele implizite oder explizite Hinweise man gibt nicht immer einfach/offensichtlich -&gt; Playtesting\nBeispiel Braid Anniversary Edition: High Jump (ideal: nur 1 Monster mit Entanglement, schlechter: mit zusätzlicher Tür und Schlüssel oder Version, wo man mit der Nase auf Lösung gestoßen wird) -&gt; &quot;Can I find a more elegant way to build this puzzle?&quot;\nViele Versionen eines Puzzles ausprobieren -&gt; guter Level Editor hilfreich, alternativ im Kopf oder auf Papier\n\nPartielle Lösbarkeit\n\nUm Frustration zu vermeiden und Erfolgsmomente auch bei schwierigen Puzzles zu erzeugen, kann man versuchen &quot;partielle&quot; Lösungen einzubauen. Dies sind Momente, wo der Spieler realisiert, dass er einen Teil des Problems richtig erfasst und gelöst hat und sich anschließend auf die weiteren Teile des Puzzles fokussieren kann.\nDies kann auch helfen, dass der Spieler auf dem richtigen Weg bleibt und nicht vorzeitig abbricht, um eine andere (falsche) Lösung zu suchen.\n\nSpieler sollten nicht per Zufall auf die richtige Lösung eines Puzzles stoßen (oftmals so in &quot;Antimatter&quot; - einfach rückwärts durch alles laufen löst gefühlt 10% der Puzzles). Nur wenn man über ein Problem nachdenkt und es bewusst löst, fühlt es sich gut an.\nSchwierigkeit sollte nicht von Größe oder Komplexität der Puzzles kommen. (siehe Notizen zu Destillat oben)\nFokus auf die interessanten Elemente und Puzzles, kein &quot;Filler&quot; einbauen. Jedes Puzzle sollte eine (neue) Idee präsentieren oder weiter ausbauen.\nMagic Moment: &quot;Dieses Puzzle ist unmöglich!&quot; -&gt; &quot;Ah! Eureka!&quot; Die Erkenntnis, wie man das &quot;unmögliche&quot; schaffen kann.\nEs ist ein Videospiel -&gt; alles ist möglich. Der Spieler geht erstmal von den &quot;üblichen&quot; Regeln aus (sofern er diese kenn, je nachdem welches Vorwissen er hat - u.U. gar keins!). Das heißt aber jede Regel kann gebrochen werden und muss erklärt oder gezeigt werden. Nichts sollte als &quot;gegeben&quot; angenommen werden.\nPuzzles, wo Elemente eine &quot;natürlich&quot; Bedeutung haben, können interessant sein (z.B. weil man sie sowieso braucht, um einen bestimmten Ort zu erreichen, aber dann nochmal konkret im Kontext des Puzzles). Fühlt sich &quot;natürlich&quot; an, weil die Elemente nicht ausschließlich für das Puzzle existieren. (-&gt; Braid &quot;Elevator action&quot;, JBlow nennt es &quot;artful excuses&quot;). Vorsicht: Werden schnell zu &quot;red herrings&quot;, wenn sie zu sehr vom eigentlichen Puzzle ablenken oder nur die Lösung verschleiern.\nFlow of ideas: Grundidee eines Puzzles mit weniger Elementen, dann nach und nach Elemente hinzufügen, die das Puzzle interessanter machen oder einen &quot;Twist&quot; erzeugen (nicht einfach nur Schwierigkeit oder Unübersichtlichkeit erhöhen)\nPuzzles sollten sich idealerweise nicht groß überlappen, um Redundanz zu vermeiden (jedes Puzzles behandelt eine eigene interessante Idee / Interaktion zwischen den Elementen des Spiels)\nDesignentscheidungen sollten davon geleitet sein, welche Variante mehr interessante Interaktionen und Puzzle zulässt\nIntrinsische vs. extrinsische Motivation:\n\nSpieler will selbst etwas erreichen\nSpiel belohnt Spieler bei Erreichen von Meilenstein mit Grafik / Sound / Text, etc.\nEs ist immer etwas extrinsische Motivation da (weil man z.B. Elemente nicht sofort zugänglich macht oder Spieler diese nicht versteht), aber man kann gestalten wie viel\nIntrinsische Motivation kann z.B. durch Story-Bits oder ähnliche Rewards entstehen, die das Spiel nicht explizit trackt oder den Spieler darauf hinweist (das Spiel weiß nicht, dass der Spieler etwas erreicht hat und kann es nicht anpreisen -&gt; er tut es nur des Ergebnisses wegen, aus freien Stücken)\nDas Verknüpfen (im Kopf des Spielers) von Gameplay-Elementen und Story zur Interpretation eines größeren Ganzen (welche der Entwickler so geplant hat), kann auch intrinsische Motivation sein -&gt; zweite Ebene. Spielt trackt es nicht und weißt nicht explizit darauf hin -&gt; Kunst\n\nJon Blow on Game Networking\nhttps://nitter.space/Jonathan_Blow/status/1894511416088170716#m\nOkay, so, like, here's a very high level overview of the issues involved in doing a networked game at a decent level of quality.\nThe first thing one discovers when doing this kind of system is that, even though web dudes love TCP, it is very bad for games if that's all you use, because the second there is any packet loss or delay in a TCP stream, it holds up everything else in the stream after, then you get all this data and it's now useless because it's late (who cares where the other player was 2 seconds ago). So in general one needs to develop a protocol on top of UDP that transmits ephemeral-data-that-may-be-lost, and then either implement a reliable protocol on top of that one to transmit data-that-cannot-be-lost, or use TCP there.\nSo now you have reliable messages and unreliable messages, and you decide what is short-term data that is okay if it gets lost (positions, orientations, whatever) and what is long-term data that cannot be lost (one-time changes of rare variables, changes of communication phase, etc).\nBut now one of the most common bugs in these systems is partitioning the logic cleanly between these two types of communication in a very complicated system -- there can be race conditions (maybe some unreliable data you didn't expect beats the reliable message that tells the client to prepare to receive that unreliable data), you get all kinds of weird softlocks etc unless this is very carefully designed.\nThen you have the problem that these games are being worked on by programmers and designers who are not doing networking at all. They are defining fields on entities and world state, and there will be some system for attempting to automatically sync these over the network. But in order for this system not to be totally dismal performance-wise, it has to be very carefully programmed, and the problem is that the more magical the system tries to be, the more prone to the above desync bugs it will be (see many Unreal engine games). But at the same time, on a big enough project it is just a reality that you need this system to exist and work. So there tends to be a two-phase approach where fields are defined but treated conservatively (reliable send always, no compression) and then get optimized later, with very careful consideration about how to get this to perform well.\nBecause network messages only come sometimes, but players are running at maybe 240Hz, there is a system on the client side that does prediction of what the current game state is, based on extrapolation from previously known states. This gets very complicated because the naive things (linear extrapolation based on previous velocity) look very bad in the face of packet loss etc. You need to attempt to emulate complex behavior by running some gameplay code similar to what the server is doing, but it's never exactly the same, and factoring the code so that it can be used in both contexts, while being understandable and maintainable, but also not painfully slow, can be a big challenge.\nNo matter how good a job you do on the client-side prediction, it's always desynced from the server, so you need to have a system that smoothly reconciles between the extrapolated state, and the new information received from the server, without snapping stuff to the target value (this looks bad and is very disorienting) but also without interpolating too slowly (since this adds too much latency). This tends to be specific to the type of any particular value.\nOn the server there also tends to be a latency compensation component to help players deal with lag: Incoming packets arrive that represent user commands, and rather than applying those commands to the current world state, in which case they will always be late, one often tries to pull up a representation of prior world state and see what the command was doing in that context (like if the command is &quot;I am shooting from position X in direction K&quot;, you are almost always going to miss the target if the server naively applies the command 'late'). A famous example of handling this is Yahn Bernier's system for Counter-Strike that he presented at GDC a long time ago (though I don't exactly like the particular things his system does).\nThe above system relies on having an accurate estimate of the latency from client to server and from server to client, which is a whole system itself.\nHow do you represent the values inside the packets? You are sending a lot of information so you want to keep them small. If you have a typical floating-point value, for example, you don't want to send 32 bits. So you represent it in a different way. How? Do you linearly quantize as an integer? Nonlinearly quantize as an integer? Make some kind of smaller float format? How many bits do you need for this value, and is it enough? Do you need to dynamically vary how many bits are used to represent this value in different contexts, and have something in the protocol to indicate this? All of these have different trade-offs and a significant amount of math is brought to bear here to make the right decisions.\nWhat about vector quantities, 3D positions or directions? What about 4D stuff like quaternions for orientation representation, or homogeneous-coordinate transformation matrices? To make good decisions here requires fluid working knowledge of all the linear algebra involved in 3D rendering, plus then knowledge of vector quantization schemes or some equivalent. Just representing quaternions in a reasonable manner is a whole thing, and it depends on the nature of how the rotations look typically.\nYou can put the data into the packet as full values, but one of the most general techniques used in data compression is to represent things as deltas from a known-previous-value rather than the full value. But deltas are only relevant straightforwardly for the reliable messages, because in unreliable messages the client may not have the previous value! (aka client and server may disagree on what that is). What do you do here? Do you negotiate a neighborhood for the value via reliable messages, that then gets used in the unreliable messages? How much bandwidth does this take, is it a win?\nYou want to entropy-code the outgoing messages to make them smaller (basically applying generic stream compression on top of the data stream you have already been trying to make small), because you are sending a lot of world state, and this involves knowledge of general data compression, which is itself a huge topic (there are entire textbooks just on the basics of how to compress data), but it's tricky because good compression relies on context, and you only know that the receiver has context on the reliable (TCP-style) messages, not the unreliable (UDP-style) messages, so maybe those two things have different compression styles (the unreliable messages cannot use context outside the message for compression).\nYou have a bandwidth and CPU usage cap on the server, so you want to decide which updates to send each frame. You don't want to oversaturate someone (if you just sent data last frame you don't want to push out more), but you do want people to get a lot of data in brief periods if a lot is happening.\nIn a 3D space some players/objects/etc are a lot further from you and others are closer, and you can't send all the data all the time, so there is some heuristic that provides more fidelity for things that need more fidelity. You might even have occlusion detection running on the server to decide that some players should get almost no information about some things (if it's a closed room-based world for example), but if an event is big enough you still need to know about it.\nBecause CPU is limited on the server and there are a lot of clients you want to quickly determine whose world state is the most erroneous and prioritize sending to those people (which will change every frame), and if you are randomly-accessing a ton of memory this will be too slow, so this involves knowledge of cache-coherent data structures and general code optimization.\nIf you are trying to serve a lot of clients you realize that this horrendous model of doing a system call per network message send or receipt (Unix or Windows-style) is really bad, so you end up wanting to code for hardware that doesn't work this way, so you use a network card that has an API that lets you talk to it via userspace without going through the kernel, and you talk to that via an asynchronous command-buffer API, and this in itself is a different paradigm than most programmers have ever dealt with, that has its own challenges.\nI have surely forgotten a lot of things here. It's a quick tweet. Each of the above paragraphs would be at least several chapters in the hypothesized book on the topic. And of course when you go do stuff in practice you run into a lot of practical problems not considered by theory (&quot;hey all our designers are writing all this Blueprint code, how in the hell are we going to client-side-predict the results of this?&quot;)\nOh, here's one I forgot: Getting UDP messages through peoples' NAT is a whole thing that is very difficult and annoying and may not work at all no matter what you try. There are some other UDP-based protocols that do their best at this if anyone is interested in what it entails.\nHave EXTRA fun if you want two clients to be able to send UDP to each other in a modern environment...",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Schlaf",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/life/schlaf/",
		"content": "Einschlafen, 3 Schritte\n\nBrainwriting: alles was schlecht lief am Tag, alles was einen bewegt (3min ununterbrochen durchschreiben)\n\nalternativ: wenn...dann Sätze aufschreiben (wenn x eintritt dann Konsequenz y und dad passiert mit Wahrscheinlichkeit z)\nalternativ: 3mal sich selbst zu allen Themen &quot;und dann?&quot; Fragen. Herausfinden, on Konsequenzen groß sind.\n\n4-8-4 Atmung (4s einatmen, 8s ausatmen, 4mal)\n5 Dinge aufschreiben, die am Tag gut liefen / für die man dankbar ist. Nicht nur externe, sondern vor allem interne Sachen (die man selbst kontrolliert).\n\nHilfe: Erbsen Methode. 5 kleine Gegenstände in rechte Tasche/Haargummis an rechten Arm. Bei jeder schönen Sache einen Gegenstand rüber nach links packen.\n\ntagsüber stress reduzieren, um nicht mit vollem Kopf einzuschlafen\n\nalle 90min kleine Pause machen. 4-8-4 oder kurz aus dem Fenster schauen reicht ggf schon\n\nnach der Arbeit Sport oder kurzen Spaziergang machen\n\njeder Mensch ist anderer Schlaf Typ (Lärche, Taube, Eule). Kann man anhand von DNA bestimmen\n\nbenötigte Menge schlaf ist auch unterschiedlich\n\nbeste Schlafzeit und menge für sich finden\n\nSchlafzyklen ca. 90min lang - Schlafzeit Vielzahl von 90min\n\nwenn man nachts aufwacht NICHT auf Handy oder Uhr schauen\n\nPowernap max 20-25min und am besten vor 14 Uhr, damit man nicht in Tiefschlaf kommt und Rhythmus stört\n\nidealerweise gleiche Schlafenszeit jeden tag (auch am Wochenende!)",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "CPU",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/cpu/",
		"content": "Cache\n\nRegister &lt;-&gt; L1-Cache &lt;-&gt; L2(L3/L4)-Cache &lt;-&gt; Main memory (RAM)&lt;-&gt;HDD (Swap)\n\nL1-Cache oftmals unterteilt in &quot;data&quot; und &quot;instruction cache&quot;\nL1 oftmals pro Core\nL1: Größe bei aktuellen Prozessoren &lt;100kB (pro Kern)\n\n5700X: 32KB, 9950X3D: 80KB\n\nL2-Cache wird unter Windows &quot;unified cache&quot; genannt\nL2 oftmals pro Core, manchmal geteilt mit mehreren Cores oder gesamter CPU\nL2: Größe bei aktuellen Prozessoren &lt; 1MB (pro Kern)\n\n5700X: 512KB, 9950X3D: 1MB\n\nL3/L4 cache meist für gesamte CPU, Größe &lt; 100MB\n\n5700X: 32MB, 9950X3D: 128MB\n\nCache Line: Die CPU lädt immer 64 Bytes auf einmal in den L1 Cache\n\nESP32: 32 Bytes\nARM Cortex M0..4: kein Cache\nARM Cortex M7+: 32 Bytes\n\nCache Miss: Programm fordert Daten an, welche nicht im L1+L2-Cache sind und daher aus dem RAM geladen werden müssen\nViele Operationen sind schneller, als das Laden aus dem RAM -&gt; Performance wird von Nutzung des Caches dominiert\n\nGallery of Processor Cache Effects (igoro.com)\nZen 1 timings\n\nL1 Cache: 4-5 cycles (1ns)\nL2 Cache: 17 cycles (4-5ns)\nL3 Cache: ~40 cycles (10ns)\nRAM: 40 cycles + 90ns (100ns)\n1 Cycle ~ 0.25ns (@4GHz)\n\n(L1) Cache Aufbau\n\nhttps://youtu.be/rLWeHpzAYhg?feature=shared&amp;t=1855\nCache funktioniert grundsätzlich wie hash table, wobei als key ein Teil der Speicheradresse genutzt wird\nCache Line ist 64 Bytes\nPointer-Adresse sind 64bit, von denen meist 48bit für Speicheradresse genutzt werden\nSpeicheradressen sind virtuell und müssen übersetzt werden. Virtuell, damit bspw swap funktioniert.\nÜbersetzung läuft über anderen cache den Translation Lookaside Buffer. Dieser Cache mappt bei x64 12bit große &quot;pages&quot; (4096 Bytes) zwischen physischem und virtuellem Speicher.\n6 LSB eines pointers sind offset in cache line\n12 LSB sind offset in page\nwir wollen nicht auf Übersetzung der Adresse warten. Daher läuft beides parallel. Cache access ist sehr schnell (&lt;5 cycles)\nzur Adressierung in Cache muss also Teil des pointers genutzt werden, welcher von Übersetzung nicht verändert wird = 12 LSB.\nunteren 6 bits davon helfen nicht, da sie nur offset in cache line sind und nicht zur Unterscheidung von cache lines helfen können.\nBleiben 6 bits übrig, was maximal 64 sets im Cache ergibt\nDaten im cache sind entweder mit virtueller oder physischer Adresse getaggt.\nnach Zugriff und paralleler Übersetzung wird überprüft, ob daten zu gewünschter Adresse gehören, da viele Speicherbereiche dieselben 12 LSB haben könnten\nSomit sind alle Adressen mit einem ähnlichen Bit-Aufbau immer im selben Set zu finden.\n\nTypischer Aufbau: N-way Associative Cache\n\nes werden N cache lines pro cache set gespeichert, gleichzeitig abgerufen und dann verglichen (mit getaggter Adresse), ob richtige Daten dabei sind\ngrößere Anzahl cache lines pro set bedeutet, dass mehr unterschiedliche Speicherbereiche mit gleicher bit Struktur im Cache Platz finden und Kollisionen verringert werden\nBeispiel Zen 4: 8-way Set, 64 sets, je line 64 Bytes also 8*64*64 Bytes = 32KByte (Architektur Limit)\nZen 5: 12-way = 48KByte\nBeispiel Apple M1/M2: 12-way Set, jedes Set hat also 12 Plätze je 128 Bytes (eine L2-Cache Line) = 1,5KB pro Set = ~10.900 Sets bei 16MB Cache\nApple M-chips haben größere pages (64K)\n\nPointers\n\nmindestens top 8 bits bei Intel und ARM Prozessoren sind nicht Teil der Speicheradresse (da unrealistisch großer Speicher benötigt werden würde), sondern können für andere Zwecke wie GC-flags genutzt werden. Meist werden nur 48bit für Speicheradresse genutzt\n\nhttps://youtu.be/uZEBkOrfUzM?feature=shared&amp;t=908\n\nAssembly\nhttps://uops.info/table.html\n\nListe von Assembly Instructions für verschiedene CPU-Typen und ihre Eigenschaften (entnommen aus den ISA-Dokumenten der CPUs)\nLatency = Anzahl Clock Cycles für Operation\nTP (Throughput) = Anzahl Clock Cycles Wartezeit zwischen 2 Operationen (Wert &lt; 1 = Mehrere Operationen pro Clock Cycle, bspw. 0.5 = 2 OPs/Cycle)\nPorts = Verfügbare Ports für Micro-OPs, Stern = Mehrere Micro-OPs auf denselben Ports, Plus = Mehrere Micro-OPs auf unterschiedlichen Ports (Bsp.: 3p015+1p23 = 3 µOps auf Port 0, 1 oder 5 und 1 µOp auf Port 2 oder 3)\nhttps://godbolt.org/\nZeigt Assembly für eingegebenen Programmcode und für verschiedene Architekturen und Compiler an\nKann auch ESP32 und Co.\nVergleich zwischen zwei Assembly möglich\nMouse-Over erklärt Assembly Instruktionen\n\nModulus (%)\nLanguage Performance Comparisons Are Junk\n\nModerne CPUs haben keine schnelle Instruktion für Modulus-Operation (und keine SIMD-Instruktion)\nModulus wird in äquivalente Instruktionen umgewandelt (z.B. Berechnung über Floats), welche ggf. mit SIMD beschleunigt werden können\n-&gt; Modulus mit zur Compile-Zeit unbekanntem Divisor ist für CPU sehr aufwändig, da diese Operation nicht umgewandelt werden kann",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Cryptography, RSA, SSL",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/cryptography-rsa-ssl/",
		"content": "Allgemeines\n\nEin Zertifikat enthält den Public Key (und weitere Textinformationen über die Webseite, Ablaufdatum, etc.) und wurde mithilfe des Private Keys erstellt\nTrapdoor-Funktion: Mathematisch sehr &quot;einfach&quot; in eine Richtung zu lösen, aber nahezu unmöglich umzukehren\nEncryption: Nutzt den public key des Empfängers um Nachricht zu verschlüsseln\nDecryption: Empfänger nutzt seinen Private Key, um Nachricht zu entschlüsseln. Nur Empfänger hat Private Key und Inhalt der Nachricht ist so sicher.\nSign: Nutzt eigenen Private Key, um Nachricht (bzw. Hash der Nachricht wegen Längenbeschränkungen) zu verschlüsseln\nVerify: Nutzt Public Key des Senders, um Nachricht=Hash zu entschlüsseln und vergleicht mit Hash der Nachricht. Jeder hat Zugang zum Public Key und kann so die Echtheit der Nachricht verifizieren.\nRSA / DSA / EC (Elliptic Curve): unterschiedliche Methoden zur Generierung der Schlüssel\nPKCS#8: Aktuelles Format für Private-Keys (in PEM erkennbar am Header BEGIN PRIVATE KEY)\nPKCS#1: Veraltetes Format für Keys (in PEM erkennbar am Header BEGIN RSA PRIVATE KEY)\nDas Zertifikat einer RootCA reicht aus, um allen untergeordneten Zertifikaten von dieser RootCA zu vertrauen (so validiert der Browser bspw. auch LetsEncrypt Zertifikate - er kann nicht die Zertifikate aller Webseiten kennen)\nMehr Info zu PKCS: https://crypto.stackexchange.com/a/103585\n\nDateitypen\n\n.pem - Format für Keys / Zertifikate / CSR, Base64-kodiert. Standardformat von OpenSSL.\n.der - binär-kodiertes Äquivalent zu .pem\n.key - Meistens der Private-Key, kann auch der Public-Key sein. Meist im PEM-Format.\n.ppk - Putty Private Key. Dateiformat, welches von Putty erzeugt wird.\n.pub - Nicht standardisiert, wird oft für Public Keys verwendet. Meist PEM-Format.\n.csr - Certificate Signing Request. Enthält Public Key und Name der Certificate Authority (CA). Wird mit Private Key erstellt und genutzt, um Zertifikat auszustellen.\n.crt - Zertifikat, meistens X509, kann PEM- oder DER-kodiert sein.\nMehr Infos: https://crypto.stackexchange.com/a/43700\nWeitere Formate (wie PKCS#7): A SSL Certificate File Extension Explanation: PEM, PKCS7, DER, and PKCS#12 - Comodo SSL Resources\n\nPEM:\n-----BEGIN ENCRYPTED PRIVATE KEY-----\n...\n-----END ENCRYPTED PRIVATE KEY-----\n-----BEGIN PRIVATE KEY-----\n...\n-----END PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n...\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE REQUEST-----\n...\n-----END CERTIFICATE REQUEST-----\netc.\n\nPPK:\nTODO\n\nDSR:\n&lt;just a bunch of binary data&gt;\n\nOne-way TLS auth\n\nTwo-way TLS auth\n\nOpenSSL Befehle\nOpenSSL kommt mit GitForWindows: C:\\Program Files\\Git\\usr\\bin\\openssl.exe\nGetestet mit Version: OpenSSL 3.2.3 3 Sep 2024 (Library: OpenSSL 3.2.3 3 Sep 2024)\nKey-Pair erzeugen (PEM)\n# Will promt for password\n# Can also supply pw: -pass pass:very4secure%pass\n# -des3 instead of -aes-128-cbc is also okay\nopenssl genpkey -algorithm RSA -out private.key -outpubkey public.pub -aes-128-cbc\n# Privte-Key ohne Verschlüsselung\nopenssl genpkey -algorithm RSA -out private.key\n# Public-Key aus Private-Key erzeugen\nopenssl rsa -in private.key -pubout &gt; public.pub\n\nUnter Windows: private.key ist ggf. UTF-16 und muss noch zu UTF-8 konvertiert werden https://superuser.com/a/1778270 (PowerShell 5.1 utf-8 ist mit BOM, aber das funktioniert mit mbedtls trotzdem)\n$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'\n\nAlternativ zu genpkey kann auch genrsa genutzt werden:\nssl - Difference between openssl genrsa and openssl genpkey -algorithm rsa? - Stack Overflow\nhttps://stackoverflow.com/questions/25459512/what-is-diffrent-between-rsa-and-rsa-des3\nSelf-Signed RootCA-Zertifikat erzeugen\nVoraussetzung: Private Key\n# CSR erzeugen. Man wird nach Infos zur CA gefragt\n# Challenge Passwort kann leer gelassen werden\nopenssl req -new -key private.key -out csr.pem\n# X509v3 RootCA erzeugen\n# Gültigkeitsdauer wie gewünscht anpassen\nopenssl req -x509 -days 365 -key private.key -in csr.pem -out root.crt\n# Ohne CSR\nopenssl req -new -x509 -days 365 -key rootCA.key -out rootCA.crt\n\nMan kann den Schritt mit dem CSR überspringen und den -in Parameter beim Erstellen des Zertifikats weglässt. Man muss dann in diesem Schritt die Infos eingeben.\nDer CSR ist nützlich, wenn man ein Zertifikat erneuern möchte, ohne nochmal die ganzen Infos (Land, E-Mail, etc.) einzugeben. Wenn man das RootCA-Zertifikat nie erneuern möchte (lange Gültigkeitsdauer), kann man sich den CSR sparen.\nInfos zu &quot;Challenge Password&quot;: openssl - What's the use of challenge password in build-key-server and build-key from Easy-RSA? - Information Security Stack Exchange\nSelf-Signed (untergeordnetes) Zertifikat erzeugen\nVoraussetzungen: Private Key (idealerweise 2: für RootCA und neues Zertifikat) und RootCA-Zertifikat\nKonfigurationsdatei subordinate.cnf erstellen:\n[ v3_ca ]\nbasicConstraints = CA:FALSE\nauthorityKeyIdentifier=keyid,issuer\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment\nsubjectAltName = @alt_names\n\n[ alt_names ]\nDNS.1 = yourdomain.com\nDNS.2 = www.yourdomain.com\nDNS.3 = 192.168.1.114\n\nsubjectAltName und der alt_names Block sind optional.\n# CSR\nopenssl req -new -key subordinate.key -out subordinate.csr\n# Zertifikat mit Config\n# Gültigkeitsdauer wie gewünscht anpassen\nopenssl x509 -req -days 3650 -in subordinate.csr -CA root.crt -CAkey root.key -CAcreateserial -out subordinate.crt -extfile subordinate.cnf -extensions v3_ca\n\nWenn man die Konfigurationsdatei nicht verwendet (und -extensions sowie -extfile weglässt), wird ein X509v1 Zertifikat erstellt. Dies ist ein veralteter Standard und kann Probleme mit neuen Rust-Libraries (siehe Links unten), sowie der Erkennung in Chrome machen.\nGgf. werden aber X509v3 Zertifikate aber von manchen MQTT-Brokern nicht erkannt (Aussage aus github Thread zu Rust-Thematik).\nMehr Info:\nopenssl - Creating an x509 v3 user certificate by signing CSR - Stack Overflow\nx509v3_config - OpenSSL Documentation\nRust unterstützt nur noch v3: https://github.com/rustls/rustls/issues/1298\nErklärung der keyUsage Parameter in der Config: https://superuser.com/a/1248085\nPKCS#1 in PKCS#8 umwandeln\nopenssl rsa -in ~/.ssh/id_rsa -outform pem &gt; id_rsa.pem\n\nInput: -----BEGIN RSA PRIVATE KEY----- (oder public)\nOutput: -----BEGIN PRIVATE KEY-----\nLinks\nErklärung zu RSA\nhttps://security.stackexchange.com/questions/68822/trying-to-understand-rsa-and-its-terminology/68836#answer-68836\nhttps://security.stackexchange.com/questions/9260/sha-rsa-and-the-relation-between-them#answer-9265\nOpenSSL Dokumentation\nopenssl-genpkey - OpenSSL Documentation\nNoch mehr Befehle, Beispiele und Erklärungen\nhttps://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Database Types",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/database-types/",
		"content": "7 Database Paradigms (youtube.com)\n1. Key-Value\nExample: Redis, Memcached\n\nEntries are just pairs of keys and values\nDatabase is usually stored in memory\nVery fast, but limited space (amount of RAM)\nNo advanced queries (e.g. join, filter), just set and get\nGood for: Caching, Pub/Sub, Highscores, unstructured data\nNot: Main/persistent app data, complex relations\n\n2. Wide-column\nExample: Cassandra, Hbase\n\nFixed columns for values\nKey -&gt; row of values\nNo schema (data types for columns is not fixed)\nQuery language is like SQL, but simpler (no join)\nScales well horizontally\nGood for: Time-series, historical records, high-write to low-read ratio\nNot: Primary app database\n\n3. Document\nExample: MongoDB, Firestore\n\nData is collection of documents\nCollections and documents can have hierarchy\nDocuments are key-value stores (unstructured, without schema)\nVery flexible in data modeling\nQuite complex on the inside\nSQL: group data by content-type (posts, comments, authors, etc.) &lt;-&gt; Mongo: group data by application\nReads can be faster (get all data for blog post from one source), but writes can be complex (update author name needs to touch all documents by that author)\nNo join, but data can be grouped into &quot;master&quot; document by references\nGood for: it is very general purpose, unstructured data\nNot: it is too general purpose, also graphs (needs join)\n\n4. Relational\nExample: MySQL, Postgres\n\nData is grouped by content-type (e.g. 3 tables for users, comments, posts)\nEach entry has its own unique key\nEntries can reference elements from other tables by these keys\nJoin fetches the data from the referenced &quot;foreign&quot; tables into one\nSchema is required (column names and data-types are fixed)\nACID complicant: atomicity, consistency, isolation, durability\nDifficult to scale\nGood for: most data\nNot: unstructured data\n\n5. Graph\nExample: Neo4j, Dgraph\n\nData is nodes, relationships are edges in a graph\nCustom query language\nNo join required, queries can be more concise\nGood for: graphs, recommendation engines\nNot: not-graphs?\n\n6. Search / Index\nExample: Elasticsearch, Lucene, Solr, Meiliserach\n\nSimilar to Document-type\nDB analyzes text in documents and creates index of searchable terms\nCan add algorithms for ranking, spell-checking, filtering, etc.\nVery fast for its main purpose (search only hits index, not all documents)\nAdds overhead, can be expensive at scale\nGood for: Search\n\n7. Multi-model\nExample: FaunaDB\n\nFrontend describes how it wants to access data in GraphQL schema\nFauna creates collections and index from schema\nUses multiple DB models in background",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "HDD",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/hdd/",
		"content": "SMR vs CMR/PMR\nBei SMR werden die Daten leicht überlappend geschrieben. Dadurch wird eine höhere Speicherdichte erreicht, aber die Schreibraten leiden bei langen Schreibprozessen. Außerdem gibt es Erfahrungsberichte, wo SMR Platten nicht so lange halten und Datenverlust auftritt.\nSMR ist stromsparender und oft günstiger (bei gleicher Speichergröße).\nNAS Laufwerke sind meist CMR/PMR. Günstige Consumer Laufwerke oft SMR. Aber Achtung: WD hat zwischen 2 Modellgenerationen von CMR zu SMR gewechselt (WD Red). Das Datenblatt gibt hier meist mehr Auskunft (entweder direkt oder über eine Speicherdichte &gt;1000GB/in²).\nGenerell sollte man zu CMR/PMR greifen, da die Vorteile überwiegen.\n\nSMR? CMR? Welche Festplatte eignet sich am besten für welchen Zweck? - reichelt Magazin\nCMR/SMR: Der HDD-Guide zu den verschiedenen Aufnahmemethoden - Hardwareluxx\n\nU/min\n\nMehr = schneller (lesen/schreiben), aber lauter und stromhungriger\nGaming/Performance: 7200+\nNAS/Archiv: 5400\n\nCache\n\nGenerell: Mehr = besser\nCache ist meist SSD-Technik und deutlich schneller als Platten\nje größer, desto eher passen ganze Dateien in Cache, was kleine Lese- oder Schreibvorgänge beschleunigt\n\nFestplatten Arten\n\nz.B. WD Black/Blue/Red\nAm besten auf der Hersteller-Webseite gucken, für welchen Anwendungsfall die Bauart gedacht ist und sich an diese Angabe halten.\nUnterschiede sind Bauart (Anzahl Platten), U/min, SMR vs. CMR, Firmware, etc.\nNAS Festplatten sind bspw. darauf ausgelegt dauerhaft zu laufen und verkraften evtl. nicht so viele Spindowns und -ups",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Illustrator",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/illustrator/",
		"content": "Objekte auf Pfad verteilen, Spezialpinsel\nhttps://www.youtube.com/watch?v=bcOK-uNnCjU\nAbgerundetes Rechteck\nMit entsprechendem Werkzeug: Pfeiltasten zur Veränderung des Radius bei Erstellung (oder einfacher Linksklick öffnet Dialog zum Erstellen aus Werten)\nhttps://www.sachaheck.net/blog/illustrator/illustrator-abgerundetes-rechteck-werkzeug-eckenh-bearbeiten\nAlternative: Normales Rechteck zeichnen und dann Effekt -&gt; In Form Umwandeln -&gt; Abgerundetes Rechteck\nHier kann der Radius zahlenmäßig eingestellt und nachträglich verändert werden. Allerdings wird die äußere Kontur für die neue Form genommen. Das verhält sich nicht wie erwartet bei Drehung oder Bearbeitung bspw. mit dem Messer.\nObjekt -&gt; Aussehen umwandeln löst den Effekt auf und erstellt einen Pfad daraus.\nPfad umkehren\nMit Zeichenstift Werkzeug einen Endpunkt des offenen Pfades anklicken.\nBild in Pfad umwandeln / Hintergrund entfernen\n\nEinstellungen im Bildnachzeichner setzen\nObjekt &gt; Umwandeln\n\noder: Objekt &gt; Bildnachzeichner &gt; Umwandeln\n\nObjekt - lineares Muster\n\nhttps://graphicdesign.stackexchange.com/questions/95167/how-to-have-multiple-instances-of-the-same-object-in-illustrator-cc-2015\nSchnittmaske\n\nObjekt zur Schnittmaske auf selber Ebene muss oben liegen (Fenster &gt; Ebenen)\nMehrere Objekte auswählen\nObjekt &gt; Schnittmaske &gt; Erstellen\n\nGruppe umranden\nhttps://www.vektorgarten.de/tipps-konstruktion.html -&gt;&quot;Objekte mit einer gemeinsamen Kontur versehen&quot; + weitere Tips!\nhttps://www.vektorgarten.de/illu-tipps-typo.html#2xinline\n\nObjekte gruppieren\nDer Gruppe eine Kontur hinzufügen\nDer Kontur den Effekt hinzufügen Pathfinder -&gt; Hinzufügen\nBei weiteren Umrandungen jeweils noch Pfad -&gt; Pfad verschieben hinzufügen",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Linux",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/linux/",
		"content": "Folder structure\n/bin - essential binaries for all users (like cd, bash)\n/sbin - admin system binaries\n/boot - files for booting (like the kernel)\n/dev - device files (file-like access to (virtual) hardware)\n\t/dev/sda - first SATA drive\n\t/dev/random - random number generator\n\t/dev/null - no output, discard all input\n\t/dev/zero - infinite 0s\n/etc - configuration files for programs\n/home - home folders for each user (alias ~)\n\t/home/username - also contains userspace config files\n/lib - system library files (needed for programs in /bin)\n/lost+found - corrupted files after a crash will end here\n/media - removable media (USB-Drives, CDs, etc.)\n/mnt - manual mounting points (created by admins)\n/opt - optional software\n/proc - contains info about running processes\n/root - home folder for root user\n/tmp - temporary files (no guaranteed persistance)\n/usr - user binaries and program data\n\t/usr/bin - userspace /bin (contains most programs)\n\t/usr/sbin - admin programs\n\t/usr/lib - library files\n\t/usr/share - documentation\n\t/usr/include - include files for compiling\n/var - runtime information stored by programs (logs, cache)\n\t/var/log/wtmp - login history\n\nchmod\n\nNumber\nPermission\nSum\n\n0\n– – –\n0+0+0\n\n1\n– – x\n0+0+1\n\n2\n– w –\n0+2+0\n\n3\n– w x\n0+2+1\n\n4\nr – –\n4+0+0\n\n5\nr – x\n4+0+1\n\n6\nr w –\n4+2+0\n\n7\nr w x\n4+2+1\n\nThree groups:\n\nOne permission for the owner, the person who created the file or folder.\nOne permission for all of the people in the same primary group of the owner.\nOne permission for everyone else, which includes unauthenticated and anonymous users.\n\nTo change all directories under the current path to 755 (drwxr-xr-x), excluding dotfiles (recursive):\nfind . ! -path . ! -path '*/.*' -type d -exec chmod 755 '{}' \\;\n\nTo change all files in the current path to 644 (-rw-r--r--), excluding dotfiles (recursive):\nfind . ! -path '*/.*' -type f -exec chmod 644 '{}' \\;\n\nchown\nChown Command in Linux (File Ownership) | Linuxize\nchown -R USER:GROUP ./\n\nwhich\nFind out where binary lives\nwhich curl\n\nFind process\nps -aux | grep [keyword]\n\n-a: show all processes (including root, system, etc.), not just the ones belonging to current user\nu: show in &quot;user oriented format&quot;, i.e. table with more information\nx: show background processes and daemons without controlling terminal (tty)\n\nFind text in files\ngrep -HiRn [text] [files/folders]\n\n-H: print out filename of result\n-i: ignore case\n-R: recursive search in passed folders, follow symlinks\n-n: print line-number of result\n\nFind previous command\nhistory | grep [command]\n\nFind text or files starting with minus -\nPassing arguments which starts with a minus to a tool will be usually interpreted as an option. This creates a problem when you want to delete a filename or grep text starting with a minus.\nSolution: Pass -- to signify the end of the options.\nps --help | grep -- -a\nrm -- --somefile.txt\n\nSource: https://unix.stackexchange.com/a/87357\nCompress / extract zip files\ntar -czf [filename/folder]\ntar -xzf [filename]\n\n&quot;Compres Ze File&quot; / &quot;Xtract Ze File\n\n-c: compress\n-x: extract\n-z: use gzip\n-f: use file archive\n\nShow active network connections\nnetstat -tulpen\n\n-t: show TCP connections.\n-u: show UDP connections.\n-l: list only listening sockets.\n-p: show the PID and name of the program to which each socket belongs.\n-e: display extended information, including user ID and inode.\n-n: show numerical addresses instead of resolving hostnames.\n\nShow filesystems\ndf -Thal\n\n-T: show the file system type.\n-h: display sizes in a human-readable format (e.g., KB, MB, GB).\n-a: include all file systems, even those that are not currently mounted.\n-l: limit the output to local file systems only.\n\nShow disk usage\ndu -hs *\n\n-h: display sizes in a human-readable format (e.g., KB, MB, GB).\n-s: provide a summary of the disk usage for each specified file or directory, rather than listing the usage for each individual file within directories.\n\nShow files in current folder (detailed)\nls -lisah\n\n-l: Uses a long listing format, providing detailed information about each file and directory, such as permissions, number of links, owner, group, size, and modification date.\n-i: Shows the inode number for each file and directory.\n-s: Displays the size of each file in blocks.\n-a: Includes all files, even those that are hidden (files starting with a dot .).\n-h: Displays sizes in a human-readable format (e.g., KB, MB, GB).\n\nLogrotate\n\n[!WARNING]\nDoes not work properly on CentOS6, but seems to work as intended on Ubuntu 24.04\n\nhttps://linux.die.net/man/8/logrotate\nPut a file (usually named after the program/logfile you are rotating) in /etc/logrotate.d/. For example: /etc/logrotate.d/mosquitto\n/var/log/mosquitto/mosquitto.log {\nrotate 12\nmonthly\ncompress\ndelaycompress\nsize 100k\nnocreate\nmissingok\npostrotate\nif invoke-rc.d mosquitto status &gt; /dev/null 2&gt;&amp;1; then \\\ninvoke-rc.d mosquitto reload &gt; /dev/null 2&gt;&amp;1; \\\nfi;\nendscript\n}\n\nrotate 12: keeps at most 12 versions of the file specified at the very beginning\nmonthly: rotate on first run of the month (i.e. keep one file per month), can also be daily, weekly or yearly\ncompress, delaycompress: compress rotated files after 2 rotations (i.e. keep file for current and last month uncompressed)\nsize: rotate only if size is bigger than specified limit (100k = 100KiB, 100M = 100MiB, 100G = 100Gib)\nnocreate: logrotate does not create the new log file after rotating (the original program has to do it)\nmissingok: don't raise an error if file is missing\npostrotate: what to do after rotation - we just kept the script, which was generated by mosquitto on install",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "NodeRed",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/node-red/",
		"content": "Function node - Rückgabewert\n// Message passthorugh, normal return\nreturn msg;\n// Will stop flow at this point and not pass anything to next node\nreturn null;\n// Send array of messages to single output\narr = new Array(10);\nreturn [arr];\nreturn <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">msg1, msg2, msg3</a>;\n// Send msg1 to output 1, msg2 to output 2, msg3 to output 3\nreturn [msg1, msg2, msg3];\n// Send msg only to second output (of 4)\nreturn [null, msg, null, null];\n// Send 2 messages to first output, none to second, one to third\nreturn [[msg1, msg2], null, msg3];\n\nContext\nDaten lesen und speichern. Doku: Writing Functions : Node-RED (nodered.org)\nlet data = context.get(&quot;key&quot;)\ncontext.set(&quot;key&quot;, &quot;value&quot;);\nlet data = flow.get(&quot;key&quot;);\nflow.set(&quot;key&quot;, &quot;value&quot;);\nlet data = global.get(&quot;key&quot;);\nglobal.set(&quot;key&quot;, &quot;value&quot;);\n// get/set multiple (NodeRED 0.19+)\nvar values = flow.get([&quot;count&quot;, &quot;colour&quot;, &quot;temperature&quot;]);\n// values[0] is the 'count' value\n// values[1] is the 'colour' value\n// values[2] is the 'temperature' value\nflow.set([&quot;count&quot;, &quot;colour&quot;, &quot;temperature&quot;], [123, &quot;red&quot;, &quot;12.5&quot;]);\n\ncontext - Node\n\nWird gelöscht/zurückgesetzt, wenn sich Node ändert (Titel, Inhalt, Verknüpfungen und Position im Flow sind egal)\nNur im ausführenden Node verfügbar (gleicher Key in anderem Node liefert andere Daten)\n\nflow - Flow\n\nWird zurückgesetzt, wenn sich Flow maßgeblich ändert (Nicht ganz klar wann das ist. Bewegungen sind egal, Löschen von Verknüpfungen und einzelnen Nodes auch)\nNur im ausführenden Flow verfügbar\n\nglobal - NodeRed Instanz\n\nWird vermutlich zurückgesetzt, wenn sich Instanz neu startet\nFlow- und Node-übergreifend verfügbar (Keys überschreiben aber nicht Daten mit gleichem Key in context oder flow)\n\nWerte können beliebigen Typs sein\nEs ist auch möglich Werte asynchron zu lesen/schreiben (aber wer braucht das?)\nSeit 0.19 kann man auch den Speicherort explizit angeben (sofern mehrere eingerichtet sind)\n\nNode Status\nDoku: Node status : Node-RED (nodered.org)\nnode.status({fill:&quot;red&quot;,shape:&quot;ring&quot;,text:&quot;disconnected&quot;});\nnode.status({fill:&quot;green&quot;,shape:&quot;dot&quot;,text:&quot;connected&quot;});\nnode.status({text:&quot;Just text status&quot;});\nnode.status({}); // to clear the status\n// The `shape` property can be: `ring` or `dot`.\n// The `fill` property can be: `red`, `green`, `yellow`, `blue` or `grey`\n\n// Example:\nthis.status({fill:&quot;red&quot;,shape:&quot;ring&quot;,text:&quot;disconnected&quot;});\nthis.status({fill:&quot;green&quot;,shape:&quot;dot&quot;,text:&quot;connected&quot;});\n\nURL Parameter\nTODO\n{{{field of msg object}}}\nNützliche Links\nWorking with messages : Node-RED (nodered.org)",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Obsidian",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/obsidian/",
		"content": "Callouts\n\n[!note] Note\nThis is a note.\n\n[!tldr] tldr/summary/abstract\nToo long; didn't read.\n\n[!info] info\nHere's some information.\n\n[!todo] todo\nThings to be done.\n\n[!tip] tip/hint/important\nThis is a tip\n\n[!success] success/check/done\nThis thing is done\n\n[!question] question/help/faq\nHere's a question\n\n[!warning] warning/caution/attention\nThis is a warning!\n\n[!fail] failure/fail/missing\nThis failed!\n\n[!danger] danger/error\nError! Error!\n\n[!bug] bug\nBug reported!\n\n[!example] example\nThis is only an example.\n\n[!quote] quote/cite\nThis is a quote.\n\nSpecial Features\n\n[!note]- Foldable note\nThe minus sign after the callout type makes this text hidden on first sight! Works with all other types, too!\n\n[!question] Can callouts be nested?\n\n[!todo] Yes!, they can.\n\n[!example] You can even use multiple layers of nesting.\nWoo!\n\n[!INFO] Code in callout\n// Make sure every line begins with a &gt; in markdown\n// otherwise the callout will break\nint main(int argc, char **argv) { }\n\nMarkdown\n&gt; [!note] Note\n&gt; This is a note.\n\n&gt; [!tldr] tldr/summary/abstract\n&gt; Too long; didn't read.\n\n&gt; [!info] info\n&gt; Here's some information.\n\n&gt; [!todo] todo\n&gt; Things to be done.\n\n&gt; [!tip] tip/hint/important\n&gt; This is a tip\n\n&gt; [!success] success/check/done\n&gt; This thing is done\n\n&gt; [!question] question/help/faq\n&gt; Here's a question\n\n&gt; [!warning] warning/caution/attention\n&gt; This is a warning!\n\n&gt; [!fail] failure/fail/missing\n&gt; This failed!\n\n&gt; [!danger] danger/error\n&gt; Error! Error!\n\n&gt; [!bug] bug\n&gt; Bug reported!\n\n&gt; [!example] example\n&gt; This is only an example.\n\n&gt; [!quote] quote/cite\n&gt; This is a quote.\n\n&gt; [!note]- Foldable note\n&gt; Text only visibale after unfolding\n\n&gt; [!question] Can callouts be nested?\n&gt; &gt; [!todo] Yes!, they can.\n&gt; &gt; &gt; [!example] You can even use multiple layers of nesting.\n&gt; &gt; &gt; Woo!\n\n&gt; [!INFO] Code in callout\n&gt; ```C\n&gt; // Make sure every line begins with a &gt; in markdown\n&gt; // otherwise the callout will break\n&gt; int main(int argc, char **argv) { }\n&gt; // Remove the backslash below (since Obsidian does not like nested codeblocks)\n&gt; \\```\n\nGetting rid of unused properties\nOnce you used a property it will always show up in auto-complete. Very annoying if you misspelled it and corrected it later.\nOpen [path to your vault]/.obsidian/types.json and remove the unneeded properties. You can also just adjust property type there.\nThis is safe to do - editing a property still in use will not change or remove it from documents.\nUnused properties are also removed from the list automatically after a while.\nDigital Garden Documentation\nDigital Garden - Publish Obsidian Notes For Free\noleeskild/obsidian-digital-garden\nCSS Styling\nObsidian playbook: https://notes.nicolevanderhoeven.com/obsidian-playbook/Obsidian+Playbook+Readme\nStyling with CSS: CSS snippets - Obsidian Help\nAvailable variables and classes: Build a theme - Developer Documentation (obsidian.md)\nList of supported codeblock languages (Prism is the library used by Obsidian): https://prismjs.com/#supported-languages\nObsidian is rendering using a web-browser, so you can always Ctrl + Shift + I in Obsidian to bring up the dev tools (including the inspector to check individual classes and styling options).\nHeading 1\nTest\nHeading 2\nTest\nHeading 3\nTest\nHeading 4\nTest\nHeading 5\nTest\nHeading 6\nTest",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Op-Amps",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/op-amps/",
		"content": "Grundlagen\n.container {font-family: sans-serif; text-align: center;} .button-wrapper button {z-index: 1;height: 40px; width: 100px; margin: 10px;padding: 5px;} .excalidraw .App-menu_top .buttonList { display: flex;} .excalidraw-wrapper { height: 800px; margin: 50px; position: relative;} :root[dir=\"ltr\"] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left {transform: none;} (function(){const InitialData={\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.17\",\"elements\":[{\"type\":\"freedraw\",\"version\":76,\"versionNonce\":687317703,\"isDeleted\":false,\"id\":\"7SaDS1CJj0XJVtyXWOvih\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-94.375,\"y\":-299.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":109,\"height\":121,\"seed\":492923689,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,6],[0,14],[0,22],[0,33],[0,48],[0,60],[0,70],[1,79],[1,82],[1,86],[1,91],[1,94],[1,98],[1,102],[1,106],[1,108],[1,114],[1,116],[1,119],[0,121],[11,113],[18,108],[26,105],[32,100],[39,96],[45,92],[49,88],[53,85],[62,80],[67,75],[70,74],[73,71],[78,68],[82,67],[83,66],[85,64],[87,63],[89,62],[91,61],[95,60],[101,57],[103,56],[108,55],[109,54],[97,48],[90,45],[84,43],[74,39],[71,37],[62,34],[54,29],[45,25],[41,22],[35,20],[30,16],[25,14],[21,11],[18,9],[15,8],[10,6],[6,2],[3,0],[1,0],[1,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":23,\"versionNonce\":1037963561,\"isDeleted\":false,\"id\":\"ZHQ8ZiD4EHjR56Zmxdq-D\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-136.375,\"y\":-267.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":37,\"height\":2,\"seed\":1776790761,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[6,-1],[17,-1],[26,-2],[29,-2],[33,-2],[34,-2],[35,-2],[36,-2],[37,-2],[37,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":598061543,\"isDeleted\":false,\"id\":\"vQuUXN8MKDbqJuEHDAjPE\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-137.375,\"y\":-211.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":41,\"height\":2,\"seed\":693822025,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[3,0],[4,0],[18,0],[26,0],[31,0],[33,0],[36,-1],[38,-1],[39,-1],[40,-1],[41,-1],[41,-2],[41,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":21,\"versionNonce\":939842823,\"isDeleted\":false,\"id\":\"Ix9O6Si6Y96m71aRRjWS9\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":10.625,\"y\":-246.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":46,\"height\":2,\"seed\":1211433543,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[11,0],[16,0],[22,0],[29,0],[34,-1],[42,-2],[45,-2],[46,-2],[46,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":35,\"versionNonce\":1560845033,\"isDeleted\":false,\"id\":\"P45bC0kTfblpkNlSDLq1G\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-48.375,\"y\":-334.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":5,\"height\":59,\"seed\":888254407,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[1,4],[1,8],[2,12],[2,15],[3,19],[4,23],[4,27],[5,29],[5,33],[5,36],[5,40],[5,43],[5,45],[5,47],[5,48],[5,50],[5,51],[5,52],[5,53],[5,55],[5,57],[5,59],[5,59]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":30,\"versionNonce\":1234281511,\"isDeleted\":false,\"id\":\"TfzQ2QvRXCpySd2YRNlnu\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-42.375,\"y\":-211.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":3,\"height\":63,\"seed\":689276167,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,3],[1,8],[2,12],[2,16],[2,19],[2,26],[2,33],[3,36],[3,46],[3,49],[3,52],[3,53],[3,54],[3,55],[3,56],[3,61],[3,62],[3,63],[3,63]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":20,\"versionNonce\":216487369,\"isDeleted\":false,\"id\":\"p6AV_m4vTXG0QsL4yEZY2\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-80.375,\"y\":-264.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":14,\"height\":2,\"seed\":1972495815,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919132,\"link\":null,\"locked\":false,\"points\":[[0,0],[5,-1],[8,-1],[9,-2],[10,-2],[11,-2],[12,-2],[13,-2],[14,-2],[14,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":20,\"versionNonce\":406357831,\"isDeleted\":false,\"id\":\"3EalOqUI3R-Vsvp4TcKLn\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-74.375,\"y\":-275.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0,\"height\":16,\"seed\":721940519,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,3],[0,6],[0,9],[0,11],[0,13],[0,14],[0,15],[0,16],[0,16]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":23,\"versionNonce\":183219369,\"isDeleted\":false,\"id\":\"Jma1ttNIO70GuC3K4tNYB\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-81.375,\"y\":-219.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":14,\"height\":0,\"seed\":1424307847,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[13,0],[14,0],[14,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":22,\"versionNonce\":844498535,\"isDeleted\":false,\"id\":\"S9vjZn2-1dduHj4enJWLs\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-59.375,\"y\":-367.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0,\"height\":12,\"seed\":598961735,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,2],[0,4],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,12]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":17,\"versionNonce\":1254176649,\"isDeleted\":false,\"id\":\"SZXib8LH0mkdq3rWZeeCQ\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-66.375,\"y\":-362.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":17,\"height\":0,\"seed\":1193609959,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[6,0],[13,0],[16,0],[17,0],[17,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":33,\"versionNonce\":649503111,\"isDeleted\":false,\"id\":\"u-uCUNR-RfFVX-6uA4Hax\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-43.375,\"y\":-371.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":19,\"height\":23,\"seed\":1909355495,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[2,6],[6,11],[8,14],[8,15],[8,16],[8,17],[8,18],[8,19],[9,19],[9,17],[10,15],[11,12],[12,10],[13,7],[15,2],[17,1],[17,-1],[18,-2],[19,-3],[19,-4],[19,-4]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":18,\"versionNonce\":1050893929,\"isDeleted\":false,\"id\":\"Vq-gIbCmg8l6y_hME2Rvi\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-59.375,\"y\":-120.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":11,\"height\":2,\"seed\":1567928039,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[3,-1],[4,-1],[5,-1],[6,-1],[11,-2],[11,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":35,\"versionNonce\":1989597351,\"isDeleted\":false,\"id\":\"4ygLD94iZBX3KPoSLFLri\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-38.375,\"y\":-133.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":24,\"height\":21,\"seed\":1948025607,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,2],[3,5],[4,8],[6,11],[9,14],[9,15],[9,16],[9,17],[9,18],[9,19],[9,20],[11,19],[15,16],[16,13],[17,11],[19,7],[20,6],[21,4],[22,3],[23,1],[23,0],[23,-1],[24,-1],[24,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":37,\"versionNonce\":1201875911,\"isDeleted\":false,\"id\":\"8pfAdMw-Z29yJ6wIzT472\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":109.625,\"y\":-238.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":13,\"height\":17,\"seed\":1105839751,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,0],[-2,1],[-3,3],[-5,5],[-6,8],[-5,14],[-2,16],[-1,17],[0,17],[3,17],[4,17],[5,16],[7,14],[7,12],[7,10],[7,8],[7,7],[6,6],[5,5],[5,4],[4,3],[3,3],[1,2],[-1,1],[-1,0],[-1,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":17,\"versionNonce\":1442323175,\"isDeleted\":false,\"id\":\"XxhTuuJYdy_6ejq5Zqi14\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-158.375,\"y\":-262.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":4,\"height\":12,\"seed\":1662205671,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[2,2],[3,6],[4,11],[4,12],[4,12]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":18,\"versionNonce\":962112265,\"isDeleted\":false,\"id\":\"WfH7ekManJ8IIUzDDBsyv\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-162.375,\"y\":-253.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":12,\"height\":2,\"seed\":1430824935,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,-1],[3,-1],[7,-1],[10,-1],[12,-1],[12,-2],[12,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":31,\"versionNonce\":639772167,\"isDeleted\":false,\"id\":\"MPBOt5eqPMf8QndWPdVAY\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-178.375,\"y\":-216.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":21,\"height\":18,\"seed\":870341639,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,3],[2,7],[2,10],[3,14],[4,15],[6,16],[7,16],[9,16],[11,16],[13,14],[13,13],[14,11],[14,9],[15,6],[15,2],[15,-1],[20,-1],[21,-2],[21,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":23,\"versionNonce\":1075517097,\"isDeleted\":false,\"id\":\"Is21ciaS4jP5iIsZnliki\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-156.375,\"y\":-200.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":12,\"height\":0,\"seed\":1820425415,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761955925,\"link\":null,\"locked\":false,\"points\":[[0,0],[4.8,0],[7.199999999999999,0],[12,0],[12,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":44,\"versionNonce\":1998441767,\"isDeleted\":false,\"id\":\"qQabojzUcjAz9tGtvQJkw\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-190.375,\"y\":-280.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":25,\"height\":25,\"seed\":1132246247,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919133,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,5],[1,10],[2,13],[2,14],[3,16],[4,19],[4,20],[5,21],[5,24],[5,25],[6,25],[7,25],[8,25],[10,23],[10,22],[12,21],[13,19],[14,18],[15,16],[15,12],[15,9],[15,6],[15,5],[15,4],[18,4],[20,4],[22,3],[22,2],[24,1],[25,1],[25,0],[25,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":39,\"versionNonce\":1817066697,\"isDeleted\":false,\"id\":\"HhEljZAcZLM6XG4UyyVzS\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":73.625,\"y\":-256.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":26,\"height\":21,\"seed\":2017758791,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"points\":[[0,0],[4,13],[5,16],[5,18],[7,20],[7,21],[8,21],[10,21],[12,21],[13,21],[14,21],[15,20],[16,19],[18,18],[18,17],[18,15],[17,10],[15,7],[15,4],[14,2],[15,2],[16,3],[18,3],[19,3],[21,3],[23,3],[25,3],[26,3],[26,3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"line\",\"version\":41,\"versionNonce\":1951895623,\"isDeleted\":false,\"id\":\"bNpB6Tyo6Dwvvh8iQs23H\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":336.625,\"y\":-370.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":6,\"height\":285,\"seed\":626077479,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[6,285]]},{\"type\":\"line\",\"version\":69,\"versionNonce\":1256045481,\"isDeleted\":false,\"id\":\"rBYbc1rUKutDsxtLgWE1C\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":175.625,\"y\":-225.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":340,\"height\":2,\"seed\":453831687,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[340,-2]]},{\"type\":\"line\",\"version\":46,\"versionNonce\":665579367,\"isDeleted\":false,\"id\":\"4AT4g1SL3r4nWw6QBayeB\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":285.625,\"y\":-137.2421875,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":114,\"height\":191,\"seed\":870002793,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[114,-191]]},{\"type\":\"line\",\"version\":32,\"versionNonce\":1826250377,\"isDeleted\":false,\"id\":\"cPFlwRAs5tSy356mrzPyA\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":399.625,\"y\":-327.2421875,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":100,\"height\":1,\"seed\":405819369,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[100,-1]]},{\"type\":\"line\",\"version\":30,\"versionNonce\":728197767,\"isDeleted\":false,\"id\":\"sJPsRZYueDn5Q7RpwqAkH\",\"fillStyle\":\"solid\",\"strokeWidth\":2,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":286.625,\"y\":-137.2421875,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":134,\"height\":2,\"seed\":177445673,\"groupIds\":[],\"frameId\":null,\"roundness\":{\"type\":2},\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"startBinding\":null,\"endBinding\":null,\"lastCommittedPoint\":null,\"startArrowhead\":null,\"endArrowhead\":null,\"points\":[[0,0],[-134,2]]},{\"type\":\"freedraw\",\"version\":31,\"versionNonce\":1266005191,\"isDeleted\":false,\"id\":\"DfF4O_wfijR5_lv5jxUwr\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":345.625,\"y\":-382.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":20,\"height\":20,\"seed\":1306513991,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[1,4],[3,8],[5,14],[6,15],[7,16],[9,17],[13,17],[14,17],[15,15],[15,14],[15,11],[16,7],[16,5],[16,3],[16,2],[15,1],[15,0],[15,-1],[18,-1],[20,-2],[20,-3],[20,-3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":36,\"versionNonce\":394403625,\"isDeleted\":false,\"id\":\"TVT3el1-7b4UWSqvhBRhu\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":370.625,\"y\":-373.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":9,\"height\":8,\"seed\":211922023,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,0],[-1,1],[-1,2],[-1,3],[-1,4],[-1,6],[-1,7],[0,7],[0,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[8,7],[8,5],[7,4],[7,3],[6,3],[6,2],[5,2],[5,1],[4,1],[4,0],[3,0],[3,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":32,\"versionNonce\":814842855,\"isDeleted\":false,\"id\":\"P_rLMSn5BHmS-sOZKcLW2\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":486.625,\"y\":-209.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":19,\"height\":17,\"seed\":632385063,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,3],[0,6],[1,10],[1,12],[4,16],[5,17],[6,17],[7,17],[8,17],[9,17],[10,15],[11,13],[11,12],[12,10],[13,8],[14,7],[14,5],[14,2],[14,0],[16,0],[18,0],[19,0],[19,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":13,\"versionNonce\":729884905,\"isDeleted\":false,\"id\":\"AWS3TbcOmptV4mL_edvg1\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":507.625,\"y\":-193.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":10,\"height\":0,\"seed\":1450130057,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919134,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[4,0],[5,0],[6,0],[9,0],[10,0],[10,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":16,\"versionNonce\":657520167,\"isDeleted\":false,\"id\":\"pxJ6oV3xJilQFVyxCLRUL\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":514.625,\"y\":-198.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":13,\"seed\":65161321,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,0],[-1,1],[-1,2],[-1,4],[-1,9],[0,10],[0,11],[0,12],[0,13],[0,13]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":10,\"versionNonce\":1495147465,\"isDeleted\":false,\"id\":\"fn2nMYwo8fyKx_W_jpS0K\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":532.625,\"y\":-200.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":10,\"height\":1,\"seed\":82907881,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[4,0],[9,-1],[10,-1],[10,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":24,\"versionNonce\":1780324679,\"isDeleted\":false,\"id\":\"lI1bvrI-PHWo3-0DrQek4\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":554.625,\"y\":-210.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":16,\"height\":22,\"seed\":1165627433,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,18],[1,20],[3,20],[5,21],[6,21],[7,20],[10,17],[10,15],[11,12],[11,6],[11,4],[11,2],[11,1],[11,0],[11,-1],[14,-1],[16,-1],[16,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":10,\"versionNonce\":1774770279,\"isDeleted\":false,\"id\":\"CpVQajPd3mb560Ve3PrpX\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":571.625,\"y\":-189.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":6,\"height\":1,\"seed\":480155879,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[5,0],[6,0],[6,-1],[6,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":31,\"versionNonce\":370967945,\"isDeleted\":false,\"id\":\"nl0j6BR8-vjAUnYW2l1nj\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":368.625,\"y\":-273.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":24,\"height\":41,\"seed\":1420607785,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[9,0],[14,0],[19,0],[20,0],[22,0],[23,0],[24,0],[24,-2],[24,-10],[24,-13],[24,-17],[24,-21],[24,-23],[24,-26],[24,-28],[24,-30],[24,-33],[24,-34],[24,-35],[24,-36],[24,-37],[24,-39],[24,-40],[24,-41],[24,-41]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":1275016071,\"isDeleted\":false,\"id\":\"8xaLePiTWsqnquATX4fKj\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":402.625,\"y\":-284.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":21,\"height\":22,\"seed\":461601193,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-1],[0,-2],[1,-4],[2,-7],[5,-10],[6,-14],[7,-16],[8,-18],[8,-19],[8,-20],[8,-22],[9,-22],[10,-22],[12,-19],[14,-14],[18,-8],[19,-6],[20,-5],[21,-4],[21,-3],[21,-2],[21,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":12,\"versionNonce\":1566895209,\"isDeleted\":false,\"id\":\"KGycoYG4E4vnLhxUFAs8_\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":408.625,\"y\":-290.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":9,\"height\":0,\"seed\":850759337,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[4,0],[6,0],[7,0],[8,0],[9,0],[9,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":15,\"versionNonce\":1224551079,\"isDeleted\":false,\"id\":\"bOU6SQe2ylpknhIP9FrYP\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":328.625,\"y\":-330.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":0,\"seed\":1990129801,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[5,0],[7,0],[8,0],[10,0],[11,0],[12,0],[13,0],[15,0],[15,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":15,\"versionNonce\":817723209,\"isDeleted\":false,\"id\":\"kRt3oTAuX6LK7Wbk4Scs0\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":284.625,\"y\":-337.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":14,\"seed\":915051273,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,0],[-1,1],[-1,5],[0,8],[0,10],[0,11],[0,12],[0,13],[0,14],[0,14]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":11,\"versionNonce\":1567571399,\"isDeleted\":false,\"id\":\"Wzn1ypjLhjWABcq00yXx7\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":278.625,\"y\":-331.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":11,\"height\":0,\"seed\":1286761865,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[3,0],[5,0],[7,0],[9,0],[11,0],[11,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":29,\"versionNonce\":1652663849,\"isDeleted\":false,\"id\":\"yldZF963rn8saNo36UPBp\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":294.625,\"y\":-343.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":19,\"height\":28,\"seed\":565548169,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[4,11],[5,13],[7,18],[8,19],[8,20],[8,22],[8,23],[8,24],[8,25],[9,25],[9,26],[9,27],[9,28],[10,28],[10,25],[12,21],[13,17],[14,14],[16,11],[17,7],[18,6],[19,4],[19,2],[19,2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":12,\"versionNonce\":1014099175,\"isDeleted\":false,\"id\":\"CSHfcR7cKtDLI0xCNvDKv\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":335.625,\"y\":-135.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":12,\"height\":0,\"seed\":1426389833,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[5,0],[6,0],[9,0],[11,0],[12,0],[12,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":11,\"versionNonce\":1839003913,\"isDeleted\":false,\"id\":\"gGF3tZwmdii_L4t5OmorR\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":359.625,\"y\":-136.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":10,\"height\":1,\"seed\":784150825,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919135,\"link\":null,\"locked\":false,\"points\":[[0,0],[7,0],[8,0],[9,0],[10,0],[10,-1],[10,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":21,\"versionNonce\":26327047,\"isDeleted\":false,\"id\":\"7un7JuKYglx_iFwUH5O5c\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":377.625,\"y\":-148.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":16,\"height\":23,\"seed\":537573417,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919136,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[3,4],[6,9],[7,13],[8,16],[8,17],[9,20],[9,21],[9,22],[12,14],[13,8],[14,4],[15,2],[16,0],[16,-1],[16,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":22,\"versionNonce\":583737127,\"isDeleted\":false,\"id\":\"19pRWRjW09U-yN3RJx7as\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-128.375,\"y\":-281.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":17,\"height\":29,\"seed\":924834279,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919136,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[5,3],[9,6],[13,9],[14,10],[17,11],[17,12],[17,14],[14,17],[13,17],[12,19],[11,21],[10,22],[9,24],[8,25],[8,27],[7,29],[7,29]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":441912009,\"isDeleted\":false,\"id\":\"WjbOc8_nsl5fgJllQsBnH\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-127.375,\"y\":-225.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":16,\"height\":29,\"seed\":1436483687,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919136,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[2,2],[5,5],[8,9],[11,10],[14,13],[15,13],[16,14],[16,15],[16,16],[14,17],[12,20],[10,22],[9,23],[8,25],[7,25],[6,26],[5,27],[4,29],[3,29],[3,29]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":22,\"versionNonce\":579510855,\"isDeleted\":false,\"id\":\"NlR8gzcs9Isueursp2qcG\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-124.375,\"y\":-167.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":11,\"height\":17,\"seed\":1239211079,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919136,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,8],[0,11],[0,13],[1,15],[2,16],[2,17],[4,17],[5,17],[6,17],[9,17],[10,17],[11,17],[11,14],[11,13],[11,12],[11,11],[11,11]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":7,\"versionNonce\":446482857,\"isDeleted\":false,\"id\":\"W7nAWbrOdO93uCWJKC8kn\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-124.375,\"y\":-176.2421875,\"strokeColor\":\"#1971c2\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":2,\"seed\":1257706183,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761919136,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,-1],[-1,-2],[-1,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":17,\"versionNonce\":99632263,\"isDeleted\":false,\"id\":\"ABt4j5casqzYQ-iGuyJ3e\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-181.375,\"y\":-293.2421875,\"strokeColor\":\"#6741d9\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":27,\"seed\":2120356231,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761935721,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-3],[0,-5],[0,-7],[0,-10],[0,-14],[0,-16],[0,-19],[-1,-22],[-1,-25],[-1,-27],[-1,-27]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":20,\"versionNonce\":1133079401,\"isDeleted\":false,\"id\":\"3V8RuP6zlujnq7WWEV3Hx\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-189.375,\"y\":-316.2421875,\"strokeColor\":\"#6741d9\",\"backgroundColor\":\"transparent\",\"width\":12,\"height\":16,\"seed\":625370663,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761935721,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-1],[0,-4],[2,-8],[3,-10],[4,-12],[4,-14],[5,-16],[7,-10],[9,-8],[9,-6],[10,-6],[11,-3],[12,-3],[12,-3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":18,\"versionNonce\":1989050121,\"isDeleted\":false,\"id\":\"zLMveWzqnxYdGsUfmktRl\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":86.625,\"y\":-271.2421875,\"strokeColor\":\"#6741d9\",\"backgroundColor\":\"transparent\",\"width\":7,\"height\":39,\"seed\":539080743,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761940247,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-1],[0,-3],[0,-5],[0,-10],[-2,-18],[-4,-24],[-5,-26],[-6,-32],[-6,-34],[-7,-37],[-7,-38],[-7,-39],[-7,-39]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":18,\"versionNonce\":1591972359,\"isDeleted\":false,\"id\":\"0lbbzbn-a2EyPn0njbfNQ\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":74.625,\"y\":-298.2421875,\"strokeColor\":\"#6741d9\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":16,\"seed\":1174471431,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761940247,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-2],[0,-4],[1,-8],[1,-10],[1,-13],[1,-16],[2,-16],[5,-13],[11,-8],[13,-5],[14,-3],[15,-2],[15,-2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":15,\"versionNonce\":47774345,\"isDeleted\":false,\"id\":\"C7Pe3QMXjkDwffcXfQuUD\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-164.375,\"y\":-151.2421875,\"strokeColor\":\"#c2255c\",\"backgroundColor\":\"transparent\",\"width\":2,\"height\":31,\"seed\":646956743,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761921077,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,-2],[1,-4],[1,-6],[1,-12],[1,-20],[1,-22],[0,-26],[0,-28],[0,-29],[0,-30],[0,-31],[-1,-31],[-1,-31]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":14,\"versionNonce\":2002036425,\"isDeleted\":false,\"id\":\"lY3J01WsMo94h_UpPEGH1\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-170.375,\"y\":-172.2421875,\"strokeColor\":\"#c2255c\",\"backgroundColor\":\"transparent\",\"width\":13,\"height\":15,\"seed\":1397433767,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761922238,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-2],[1,-3],[2,-5],[3,-9],[4,-11],[4,-14],[4,-15],[8,-11],[11,-6],[13,-5],[13,-4],[13,-4]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":12,\"versionNonce\":1354031433,\"isDeleted\":false,\"id\":\"qWBKAOjcJMNkcusoCDowa\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":90.625,\"y\":-215.2421875,\"strokeColor\":\"#c2255c\",\"backgroundColor\":\"transparent\",\"width\":5,\"height\":38,\"seed\":1862428007,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761923975,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[1,7],[2,17],[3,25],[4,31],[4,33],[5,35],[5,37],[5,38],[5,38]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":14,\"versionNonce\":703708553,\"isDeleted\":false,\"id\":\"28KEbnMEaF93olB31w4Hh\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":86.625,\"y\":-188.2421875,\"strokeColor\":\"#c2255c\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":13,\"seed\":109535975,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715761925185,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,1],[4,7],[6,9],[6,11],[7,12],[13,4],[13,3],[14,2],[14,1],[15,0],[15,-1],[15,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"id\":\"YhJWumFt\",\"type\":\"text\",\"x\":408.3024193548388,\"y\":-356.68876008064524,\"width\":106.19990539550781,\"height\":25,\"angle\":0,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"seed\":183294281,\"version\":26,\"versionNonce\":243931175,\"isDeleted\":false,\"boundElements\":null,\"updated\":1715764117615,\"link\":null,\"locked\":false,\"text\":\"Saturation\",\"rawText\":\"Saturation\",\"fontSize\":20,\"fontFamily\":1,\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"baseline\":18,\"containerId\":null,\"originalText\":\"Saturation\",\"lineHeight\":1.25},{\"type\":\"text\",\"version\":64,\"versionNonce\":1310706153,\"isDeleted\":false,\"id\":\"vOfDLz1b\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":168.75085375385896,\"y\":-131.12424395161298,\"strokeColor\":\"#2f9e44\",\"backgroundColor\":\"transparent\",\"width\":106.19990539550781,\"height\":25,\"seed\":1119976039,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715764122082,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":1,\"text\":\"Saturation\",\"rawText\":\"Saturation\",\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"containerId\":null,\"originalText\":\"Saturation\",\"lineHeight\":1.25,\"baseline\":18}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#2f9e44\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"solid\",\"currentItemStrokeWidth\":1,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":0,\"currentItemOpacity\":100,\"currentItemFontFamily\":1,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"left\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"scrollX\":213.63306451612902,\"scrollY\":542.827872983871,\"zoom\":{\"value\":1.55},\"currentItemRoundness\":\"round\",\"gridSize\":null,\"gridColor\":{\"Bold\":\"#C9C9C9FF\",\"Regular\":\"#EDEDEDFF\"},\"currentStrokeOptions\":null,\"previousGridSize\":null,\"frameRendering\":{\"enabled\":true,\"clip\":true,\"name\":true,\"outline\":true}},\"files\":{}};InitialData.scrollToContent=true;App=()=>{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=>{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=>{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(\"resize\",e),()=>window.removeEventListener(\"resize\",e)},[t]),React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"excalidraw-wrapper\",ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(\"Op-Amps_2024-05-15_1011.53.excalidraw.md1\");ReactDOM.render(React.createElement(App),excalidrawWrapper);})();\n\nWhat is an operational amplifier? (youtube.com)\nPins\n\nInputs: v+ (non-inverting), v- (inverting)\nSupply: +V, -V (manchmal zusätzlicher GND, wird oft nicht dargestellt)\nOutput: vo\n\nÜbliche Schaltung\n\n+V = 12V, -V = -12V\nvo wird relativ zu 0V gemessen (zwischen positiver und negativer Supply)\n\nIntern: 20-50 Transistoren, manchmal auch Kapazitäten\nEigenschaften\n\ni = 0 (idealer Op-Amp) -&gt; Es fließt kein Strom in die Eingänge (es wird nur die Spannung gefühlt)\nvo = A · (v+-v-) = A · vin\nA = gain, üblicherweise 105 &lt;= A &lt;= 106\n\nHäufig genutzte Typen\n\nLM324\n\nNicht-invertierter Verstärker\n(function(){const InitialData={\"type\":\"excalidraw\",\"version\":2,\"source\":\"https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.17\",\"elements\":[{\"type\":\"freedraw\",\"version\":76,\"versionNonce\":1357494921,\"isDeleted\":false,\"id\":\"dP5OV7Kc_Et50p0exVISd\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-135.375,\"y\":-339.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":68,\"height\":85,\"seed\":446224615,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,11],[0,16],[-1,31],[-2,40],[-3,45],[-4,54],[-5,68],[-6,71],[-6,73],[-6,74],[-7,74],[-7,76],[-7,77],[-7,81],[-8,84],[-8,85],[-7,85],[-4,83],[2,79],[12,73],[15,71],[25,63],[30,59],[35,54],[40,51],[43,49],[50,46],[52,45],[54,44],[55,43],[56,43],[59,42],[60,41],[58,39],[52,35],[45,31],[43,30],[36,25],[31,21],[27,19],[25,18],[23,17],[20,14],[17,13],[15,12],[14,11],[13,10],[12,9],[10,7],[7,6],[6,5],[5,5],[4,4],[3,4],[2,4],[1,3],[1,3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":24,\"versionNonce\":1468780167,\"isDeleted\":false,\"id\":\"GyYBn4PykjBq9FPF9W-5L\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-126.375,\"y\":-319.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0,\"height\":12,\"seed\":860425319,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,5],[0,8],[0,10],[0,12],[0,12]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":24,\"versionNonce\":314802537,\"isDeleted\":false,\"id\":\"IS7Q9qEGboxRsNxwWR0vd\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-130.375,\"y\":-314.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":11,\"height\":0,\"seed\":1622734183,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[5,0],[8,0],[10,0],[11,0],[11,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":238970279,\"isDeleted\":false,\"id\":\"fUu8eH11BGzlx2XpVg3tf\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-132.375,\"y\":-287.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":10,\"height\":0,\"seed\":552590951,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[3,0],[5,0],[7,0],[9,0],[10,0],[10,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":1199664201,\"isDeleted\":false,\"id\":\"nndHM8LA_Qdba31GT4wFh\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-77.375,\"y\":-300.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":97,\"height\":8,\"seed\":716063367,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[4,0],[13,1],[32,5],[62,7],[84,7],[91,7],[96,7],[97,8],[97,8]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":37,\"versionNonce\":2094078151,\"isDeleted\":false,\"id\":\"7WPE2bpiamSAsk7NA5Byr\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-189.375,\"y\":-321.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":52,\"height\":5,\"seed\":11519207,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[6,0],[14,0],[21,1],[25,2],[31,2],[36,3],[39,3],[41,4],[42,4],[44,4],[45,4],[47,5],[48,5],[49,5],[50,5],[51,5],[52,5],[52,5]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":32,\"versionNonce\":1191115561,\"isDeleted\":false,\"id\":\"_eFMp3iZp-WvjnnqpioVc\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-234.375,\"y\":-333.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":18,\"seed\":622290567,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,3],[3,10],[3,12],[5,16],[5,18],[6,17],[7,16],[9,12],[11,10],[13,5],[14,2],[14,1],[15,1],[15,1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":23,\"versionNonce\":1759537127,\"isDeleted\":false,\"id\":\"hEb0rP5K6UP2SbNan5JK0\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-214.375,\"y\":-321.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":7,\"seed\":230029447,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,2],[-1,3],[-1,6],[-1,7],[-1,7]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":24,\"versionNonce\":1638379017,\"isDeleted\":false,\"id\":\"uO4BmE3X53C1klc27g8hG\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-209.375,\"y\":-319.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":9,\"seed\":2124621415,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253167,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,3],[1,6],[1,7],[1,8],[1,9],[1,9]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":813224711,\"isDeleted\":false,\"id\":\"txXTh59S8MVzIIf4iZWK7\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-207.375,\"y\":-319.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":8,\"height\":10,\"seed\":2094600039,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[3,3],[6,5],[7,6],[8,7],[8,1],[8,0],[8,-3],[8,-3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":32,\"versionNonce\":1316422889,\"isDeleted\":false,\"id\":\"uezmmKyWr9oYTFTjuIg-V\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-68.375,\"y\":-322.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":14,\"seed\":756047303,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,1],[2,4],[2,5],[4,7],[5,10],[6,10],[7,12],[7,14],[8,14],[10,9],[14,4],[15,1],[15,0],[15,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":37,\"versionNonce\":1008130599,\"isDeleted\":false,\"id\":\"okrl6TAfmiFcJPLDU00fV\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-48.375,\"y\":-311.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":8,\"height\":7,\"seed\":691564487,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,0],[-2,0],[-2,1],[-3,2],[-3,3],[-3,5],[-2,6],[-1,7],[1,7],[2,7],[4,7],[5,7],[5,6],[5,5],[5,4],[5,3],[5,2],[4,2],[4,2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":1492680649,\"isDeleted\":false,\"id\":\"UauD4rkDa_L1MDmLUeTB7\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-11.375,\"y\":-293.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":3,\"height\":30,\"seed\":426739047,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[-1,12],[-1,19],[-2,23],[-2,28],[-3,30],[-3,30]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":22,\"versionNonce\":816250183,\"isDeleted\":false,\"id\":\"1yScHI2BO0Q3DatYG5Xs_\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-26.375,\"y\":-264.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":25,\"height\":2,\"seed\":1042942343,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[18,1],[24,2],[25,2],[25,2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":37,\"versionNonce\":1330093737,\"isDeleted\":false,\"id\":\"GJxRlDZ4pGeCmkLMiHhx_\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-24.375,\"y\":-263.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":19,\"height\":37,\"seed\":1209858119,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[-1,4],[-1,13],[-1,22],[-2,24],[-2,28],[-2,29],[-2,31],[-2,33],[-2,34],[-3,36],[-3,37],[0,37],[5,37],[11,37],[13,37],[15,37],[16,37],[16,37]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":34,\"versionNonce\":1636154471,\"isDeleted\":false,\"id\":\"SXxEYchaQJVvuCUz_ynJA\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-1.375,\"y\":-259.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":2,\"height\":32,\"seed\":1009630695,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,7],[0,12],[-1,17],[-1,21],[-1,24],[-1,25],[-1,26],[-1,27],[-1,28],[-1,29],[-2,29],[-2,30],[-2,31],[-2,32],[-2,32]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":806347145,\"isDeleted\":false,\"id\":\"zjkKRjdVsMC8NrHD2uufA\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-16.375,\"y\":-225.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":24,\"seed\":1552810535,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,3],[1,5],[1,10],[1,18],[1,22],[1,24],[1,24]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":39,\"versionNonce\":41916295,\"isDeleted\":false,\"id\":\"LwuLpop_pCR5S0Tz9RGRn\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-16.375,\"y\":-202.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":7,\"height\":5,\"seed\":1125789255,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[-2,0],[-3,0],[-3,1],[-3,2],[-3,3],[-2,3],[0,4],[1,5],[2,5],[3,5],[3,4],[4,4],[4,2],[4,1],[3,1],[2,1],[1,0],[0,0],[-1,0],[-2,0],[-2,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":411879529,\"isDeleted\":false,\"id\":\"KfjXaXusUer6EDV8kfC_P\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-16.375,\"y\":-198.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":40,\"seed\":1458611751,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,6],[1,13],[1,20],[0,26],[0,29],[0,36],[0,40],[0,40]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":433131175,\"isDeleted\":false,\"id\":\"e4A3d8PdmO0sL_gYOHnsa\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-26.375,\"y\":-155.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":23,\"height\":1,\"seed\":241937543,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[4,0],[10,0],[15,1],[17,1],[18,1],[22,1],[23,1],[23,1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":36,\"versionNonce\":1921635145,\"isDeleted\":false,\"id\":\"6sOX1e3htkTslWI5CRMoH\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-29.375,\"y\":-156.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":21,\"height\":42,\"seed\":1860398823,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[2,6],[2,13],[2,19],[2,25],[2,29],[2,35],[2,37],[2,38],[2,39],[2,42],[4,42],[7,42],[11,42],[17,42],[19,42],[21,42],[21,42]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":31,\"versionNonce\":841392583,\"isDeleted\":false,\"id\":\"GV9SJcZWnUvx5YtoCvhSX\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-3.375,\"y\":-155.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":41,\"seed\":421926247,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253168,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,6],[0,9],[1,20],[1,23],[1,29],[1,33],[1,35],[1,37],[1,38],[1,39],[1,40],[1,41],[1,41]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":19,\"versionNonce\":1650623017,\"isDeleted\":false,\"id\":\"V8UOhn2P1lzkVATCIhps7\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-14.375,\"y\":-110.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0.0001,\"height\":0.0001,\"seed\":876972103,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[0.0001,0.0001]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":19,\"versionNonce\":1285345511,\"isDeleted\":false,\"id\":\"vBRRQwj5mvipdUpJ8DQZm\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-14.375,\"y\":-112.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0.0001,\"height\":0.0001,\"seed\":1448573351,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[0.0001,0.0001]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":1963087113,\"isDeleted\":false,\"id\":\"mBDcFd4IOZo1qBnsYiklI\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-14.375,\"y\":-115.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":2,\"height\":20,\"seed\":1052403463,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,2],[0,4],[0,9],[1,15],[2,18],[2,19],[2,20],[2,20]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":314579975,\"isDeleted\":false,\"id\":\"LW2GzV7JMzzbSM9JBYp9W\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-28.375,\"y\":-94.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":23,\"height\":1,\"seed\":1210825063,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[6,0],[12,-1],[18,-1],[22,-1],[23,-1],[23,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":23,\"versionNonce\":233098217,\"isDeleted\":false,\"id\":\"0xuC9Qcy6mZS7lLd-iuPv\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-8.375,\"y\":-96.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":11,\"height\":0,\"seed\":927710599,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[6,0],[9,0],[10,0],[11,0],[11,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":25,\"versionNonce\":1217200935,\"isDeleted\":false,\"id\":\"Po--gdxZRA9Eyz3nkP1He\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-156.375,\"y\":-289.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":19,\"height\":0,\"seed\":1146653543,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[5,0],[12,0],[14,0],[16,0],[19,0],[19,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":73,\"versionNonce\":353724105,\"isDeleted\":false,\"id\":\"KuIOMd3l49H3vVDO0OfzD\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-156.375,\"y\":-289.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":147,\"height\":92,\"seed\":14438279,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[-1,3],[-1,10],[-2,22],[-3,34],[-4,41],[-5,49],[-5,59],[-5,67],[-5,74],[-5,80],[-5,81],[-6,81],[-6,82],[-4,82],[3,83],[11,84],[16,85],[20,85],[25,86],[31,86],[35,87],[40,88],[42,88],[47,88],[49,88],[58,89],[61,89],[67,89],[72,89],[78,89],[85,89],[88,89],[93,89],[97,90],[100,90],[105,90],[107,90],[111,90],[114,91],[117,91],[120,91],[122,91],[125,92],[127,92],[129,92],[131,92],[133,92],[134,92],[135,92],[136,92],[137,92],[139,92],[140,92],[141,92],[141,92]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":24,\"versionNonce\":2121270855,\"isDeleted\":false,\"id\":\"vdfNW7weD3_bCibN60DYJ\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":11.625,\"y\":-256.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":5,\"height\":24,\"seed\":2132108711,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,4],[2,10],[2,13],[4,21],[5,24],[5,24]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":41,\"versionNonce\":1697621417,\"isDeleted\":false,\"id\":\"j1PguSWxqesRTOwygvJku\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":12.625,\"y\":-255.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":16,\"height\":25,\"seed\":61345447,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,-1],[6,-1],[8,-1],[9,-1],[10,-1],[11,1],[11,3],[11,5],[11,7],[9,9],[9,10],[7,10],[6,11],[5,11],[4,11],[3,11],[4,11],[9,16],[11,19],[13,22],[16,23],[16,24],[16,24]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":23,\"versionNonce\":54895975,\"isDeleted\":false,\"id\":\"xPHetgXlIHPRKzF5rByL-\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":34.625,\"y\":-237.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":3,\"height\":13,\"seed\":990395591,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,1],[2,4],[3,10],[3,13],[3,13]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":26,\"versionNonce\":2036271241,\"isDeleted\":false,\"id\":\"JqUtIN59TYaGtoQJ4OPhW\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":13.625,\"y\":-148.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":4,\"height\":28,\"seed\":2016981671,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[3,14],[4,20],[4,23],[4,24],[4,27],[4,28],[4,28]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":41,\"versionNonce\":375021703,\"isDeleted\":false,\"id\":\"fJm86vxHK8nGoemSSoya5\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":14.625,\"y\":-143.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":17,\"height\":26,\"seed\":1988812263,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-1],[0,-2],[1,-3],[2,-4],[5,-5],[8,-5],[10,-5],[14,0],[14,3],[12,4],[11,6],[10,6],[8,6],[6,6],[6,7],[8,8],[11,12],[15,16],[16,18],[17,19],[17,20],[17,21],[17,21]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":38,\"versionNonce\":1532956521,\"isDeleted\":false,\"id\":\"7OzVHMT2KA1WIuBfXmyrO\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":36.625,\"y\":-127.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":13,\"height\":10,\"seed\":145581063,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253169,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[3,-1],[6,-1],[7,-1],[8,0],[9,2],[9,3],[9,5],[9,7],[8,8],[5,8],[3,8],[2,8],[3,8],[6,8],[8,8],[9,8],[12,8],[13,9],[13,9]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"text\",\"version\":40,\"versionNonce\":2019232946,\"isDeleted\":false,\"id\":\"ABD6RHzZ\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":-114.375,\"y\":-383.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":46.9140625,\"height\":25,\"seed\":857363431,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745407933248,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":1,\"text\":\"Ideal:\",\"rawText\":\"Ideal:\",\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"containerId\":null,\"originalText\":\"Ideal:\",\"lineHeight\":1.25,\"baseline\":21},{\"type\":\"text\",\"version\":36,\"versionNonce\":405720942,\"isDeleted\":false,\"id\":\"xJMigLXZ\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":200.625,\"y\":-382.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":41.220703125,\"height\":25,\"seed\":2052327625,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745407933248,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":1,\"text\":\"Real:\",\"rawText\":\"Real:\",\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"containerId\":null,\"originalText\":\"Real:\",\"lineHeight\":1.25,\"baseline\":21},{\"type\":\"freedraw\",\"version\":96,\"versionNonce\":1037800169,\"isDeleted\":false,\"id\":\"QX3mpFwdZk4ICwFzLoQ86\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":282.625,\"y\":-332.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":88,\"height\":96,\"seed\":402572329,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253170,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,9],[1,20],[1,27],[3,37],[4,48],[5,52],[7,58],[9,68],[9,72],[10,78],[10,82],[11,86],[11,87],[11,88],[11,90],[11,91],[11,93],[11,95],[10,95],[10,96],[14,90],[19,85],[23,83],[33,76],[40,71],[47,67],[56,63],[58,62],[60,61],[65,58],[67,57],[71,53],[74,52],[76,51],[83,48],[85,47],[86,47],[86,46],[87,46],[88,46],[85,41],[78,36],[76,34],[71,31],[65,28],[61,25],[55,23],[51,20],[46,18],[40,15],[39,14],[35,12],[31,11],[30,10],[27,10],[25,9],[24,9],[21,8],[18,6],[15,6],[13,5],[11,4],[9,4],[9,3],[7,3],[6,3],[5,3],[4,2],[2,2],[1,2],[0,2],[0,2]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":29,\"versionNonce\":1300900903,\"isDeleted\":false,\"id\":\"Tao9E4lnlK4rkvYeaqkJy\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":300.625,\"y\":-316.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":17,\"seed\":1787299785,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253170,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,3],[0,7],[1,14],[1,16],[1,17],[1,17]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":28,\"versionNonce\":1218137545,\"isDeleted\":false,\"id\":\"dNla7ZfttLFEWxPw76Q45\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":296.625,\"y\":-307.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":13,\"height\":0,\"seed\":2023550665,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253170,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[7,0],[10,0],[13,0],[13,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":26,\"versionNonce\":467668807,\"isDeleted\":false,\"id\":\"Gx91bFREJqEl9ywaFVxMe\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":299.625,\"y\":-273.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":9,\"height\":0,\"seed\":1454119657,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253170,\"link\":null,\"locked\":false,\"points\":[[0,0],[8,0],[9,0],[9,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":63,\"versionNonce\":492874921,\"isDeleted\":false,\"id\":\"sNa5A0XQrCTLND_c07R-m\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":216.625,\"y\":-308.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":67.99999999999999,\"height\":0,\"seed\":147925321,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253170,\"link\":null,\"locked\":false,\"points\":[[0,0],[26.842105263157887,0],[32.210526315789465,0],[37.57894736842104,0],[42.94736842105262,0],[48.3157894736842,0],[50.105263157894726,0],[53.68421052631577,0],[60.84210526315788,0],[62.6315789473684,0],[64.42105263157893,0],[66.21052631578945,0],[67.99999999999999,0],[67.99999999999999,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":46,\"versionNonce\":1741459047,\"isDeleted\":false,\"id\":\"APNHkPcUgMVDWsikhGNt9\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":163.625,\"y\":-320.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":26,\"seed\":843607145,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253170,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,4],[0,6],[0,14],[0,19],[0,21],[1,25],[1,26],[1,26]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":79,\"versionNonce\":37377641,\"isDeleted\":false,\"id\":\"Tf7kbf3a55GJgKdoqlyy3\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":163.625,\"y\":-322.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":52,\"height\":28,\"seed\":238507655,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[9,0],[12,0],[18,1],[25,1],[30,2],[34,2],[38,2],[40,2],[41,2],[42,2],[43,2],[44,2],[45,2],[46,2],[47,2],[48,2],[48,6],[49,10],[50,12],[50,14],[50,16],[51,17],[51,18],[51,21],[52,22],[52,24],[52,25],[52,26],[52,27],[52,28],[39,28],[33,28],[29,28],[25,28],[20,28],[15,28],[13,28],[10,28],[8,28],[6,28],[4,28],[2,28],[1,27],[1,27]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":55,\"versionNonce\":369844391,\"isDeleted\":false,\"id\":\"BoTMIViaROrDsqCKOxYSP\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":110.625,\"y\":-306.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":49,\"height\":1,\"seed\":978825799,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[3,0],[9,-1],[13,-1],[20,-1],[25,-1],[29,-1],[32,-1],[36,-1],[38,-1],[39,-1],[40,-1],[41,-1],[42,-1],[43,-1],[44,-1],[45,-1],[46,-1],[48,-1],[49,-1],[49,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":31,\"versionNonce\":1820626985,\"isDeleted\":false,\"id\":\"KIc4m-OZYpUiDsc0Sw3R2\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":264.625,\"y\":-274.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":21,\"height\":0,\"seed\":600496713,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[8,0],[10,0],[12,0],[13,0],[15,0],[16,0],[17,0],[18,0],[20,0],[21,0],[21,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":59,\"versionNonce\":2011865831,\"isDeleted\":false,\"id\":\"MsK8efVQMlk4AAo_IpE1q\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":262.625,\"y\":-275.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":145,\"height\":69,\"seed\":384824969,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,3],[2,9],[3,14],[4,20],[5,25],[6,30],[6,34],[6,37],[7,41],[7,46],[7,48],[7,50],[7,55],[7,57],[7,61],[7,63],[7,65],[7,66],[9,67],[23,69],[37,69],[47,69],[63,69],[79,68],[84,68],[92,68],[97,68],[108,68],[110,68],[114,68],[119,67],[123,67],[127,67],[131,66],[134,66],[140,65],[144,65],[145,65],[145,65]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":28,\"versionNonce\":1269998345,\"isDeleted\":false,\"id\":\"9BT2qMmmwzqnCkNSIzNx_\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":368.625,\"y\":-289.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":38,\"height\":0,\"seed\":1249946441,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[5,0],[12,0],[21,0],[24,0],[32,0],[35,0],[38,0],[38,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":40,\"versionNonce\":2021895687,\"isDeleted\":false,\"id\":\"8KMNh1COE5xHDXfEEM-O0\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":405.625,\"y\":-289.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":6,\"height\":7,\"seed\":684288745,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-2],[0,-3],[0,-4],[1,-4],[3,-4],[4,-4],[4,-3],[4,-2],[5,-1],[5,0],[5,1],[4,2],[3,2],[1,2],[0,2],[0,-1],[0,-2],[-1,-4],[-1,-5],[0,-5],[0,-5]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":89872873,\"isDeleted\":false,\"id\":\"14EYH-vzTUMikDK6PKctj\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":405.625,\"y\":-289.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":2,\"height\":19,\"seed\":432523529,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,4],[1,8],[2,12],[2,15],[2,18],[2,19],[2,19]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":336483623,\"isDeleted\":false,\"id\":\"Fw-N-PmmwHPkZ51CnUqIs\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":395.625,\"y\":-271.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":20,\"height\":1,\"seed\":1390395849,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[4,0],[9,0],[12,0],[16,1],[17,1],[18,1],[20,1],[20,1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":46,\"versionNonce\":982136009,\"isDeleted\":false,\"id\":\"3LCht4IZE7W5w1DlutMk9\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":396.625,\"y\":-273.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":20,\"height\":42,\"seed\":1400621705,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,3],[0,4],[0,6],[1,8],[1,15],[2,19],[2,22],[3,26],[3,28],[3,29],[3,32],[3,34],[3,36],[3,37],[3,39],[3,40],[3,41],[3,42],[11,42],[14,42],[15,42],[16,42],[17,42],[18,42],[19,42],[20,42],[20,42]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":34,\"versionNonce\":838277191,\"isDeleted\":false,\"id\":\"OA8HNI6iBh9kZqJRZtDaf\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":416.625,\"y\":-269.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":4,\"height\":40,\"seed\":192113129,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253171,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[1,10],[2,14],[2,18],[2,24],[3,26],[3,28],[3,31],[3,34],[3,35],[3,37],[3,38],[4,39],[4,40],[4,40]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":31,\"versionNonce\":1591391145,\"isDeleted\":false,\"id\":\"XxPeDJ4VR17yvGzrBLcbt\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":409.625,\"y\":-231.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":3,\"height\":20,\"seed\":672731849,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,4],[2,6],[2,8],[3,10],[3,12],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,20]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":47,\"versionNonce\":404387687,\"isDeleted\":false,\"id\":\"6LiT8jFEPmexTLtxryuFw\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":405.625,\"y\":-211.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":9,\"height\":5,\"seed\":748244745,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-1],[1,-2],[4,-2],[5,-2],[6,-2],[7,-2],[7,-1],[7,0],[7,1],[6,1],[5,1],[4,1],[3,-1],[2,-2],[2,-3],[3,-3],[4,-4],[6,-4],[8,-4],[9,-3],[9,-2],[9,-1],[8,-1],[6,0],[5,1],[4,1],[3,1],[3,1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":34,\"versionNonce\":1719162505,\"isDeleted\":false,\"id\":\"iasxhWK8bw6i-zwkXwSHO\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":410.625,\"y\":-211.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":6,\"height\":34,\"seed\":1653270857,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[1,5],[2,7],[4,13],[5,15],[6,17],[6,20],[6,22],[6,24],[6,25],[6,27],[6,30],[6,32],[6,34],[6,34]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":482669191,\"isDeleted\":false,\"id\":\"BJCx_Nxn7zAgHVMExSOnM\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":405.625,\"y\":-174.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":18,\"height\":0,\"seed\":1434904105,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[4,0],[6,0],[10,0],[14,0],[16,0],[18,0],[18,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":32,\"versionNonce\":874421609,\"isDeleted\":false,\"id\":\"Cj42CrmWSq4ZoTorPOPBA\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":402.625,\"y\":-176.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":5,\"height\":44,\"seed\":429061865,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[1,1],[3,5],[4,12],[4,18],[4,22],[5,26],[5,32],[5,35],[5,38],[5,41],[5,44],[5,44]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":33,\"versionNonce\":414386599,\"isDeleted\":false,\"id\":\"5Y8y9A_ueggeiP-gsIFUy\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":423.625,\"y\":-177.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":0,\"height\":44,\"seed\":1049898505,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2],[0,14],[0,19],[0,24],[0,29],[0,33],[0,36],[0,38],[0,40],[0,41],[0,42],[0,43],[0,44],[0,44]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":1192822857,\"isDeleted\":false,\"id\":\"yYeRFeliUxa0r-Ui0tFH2\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":403.625,\"y\":-133.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":16,\"height\":0,\"seed\":1240628233,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[3,0],[7,0],[12,0],[14,0],[15,0],[16,0],[16,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":28,\"versionNonce\":420560071,\"isDeleted\":false,\"id\":\"Bc8DaXe9uoCVmr-WT5d2v\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":417.625,\"y\":-134.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":1,\"height\":25,\"seed\":1222030537,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[0,5],[0,10],[0,14],[0,20],[0,22],[0,25],[1,25],[1,25]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":27,\"versionNonce\":692262697,\"isDeleted\":false,\"id\":\"dXYvhk2sTeTVTlDmplnqX\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":400.625,\"y\":-107.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":36,\"height\":3,\"seed\":1059611753,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[3,-1],[11,-2],[19,-2],[22,-2],[28,-2],[33,-3],[36,-3],[36,-3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":34,\"versionNonce\":1367084007,\"isDeleted\":false,\"id\":\"y3FnX7yPxlZeFMt1Bsdhz\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":409.625,\"y\":-292.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":52,\"height\":3,\"seed\":1519887657,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[5,0],[7,0],[13,0],[21,0],[29,1],[36,2],[43,3],[45,3],[47,3],[49,3],[50,3],[51,3],[52,3],[52,3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":42,\"versionNonce\":1308620551,\"isDeleted\":false,\"id\":\"O2chiX_2Mspg5245SzXbD\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":232.625,\"y\":-308.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":9,\"height\":9,\"seed\":1779763207,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253172,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,-1],[0,-2],[1,-2],[3,-2],[4,-2],[5,-2],[7,-2],[8,-1],[8,2],[9,5],[9,6],[8,6],[7,6],[6,6],[5,6],[5,5],[4,4],[4,2],[3,1],[3,-1],[3,-2],[3,-3],[4,-3],[4,-3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":51,\"versionNonce\":1696169511,\"isDeleted\":false,\"id\":\"wvSHD_hwgaMIK-YvWlzl9\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":239.625,\"y\":-307.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":11,\"height\":118,\"seed\":763186247,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253173,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,9],[1,13],[1,17],[2,21],[2,23],[2,27],[3,31],[3,35],[3,38],[3,43],[4,46],[4,48],[4,54],[5,60],[6,65],[7,70],[7,73],[7,75],[8,80],[8,83],[9,90],[9,95],[9,99],[10,103],[10,105],[10,107],[10,110],[10,112],[10,114],[11,115],[11,116],[11,117],[11,118],[11,118]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":26,\"versionNonce\":836901833,\"isDeleted\":false,\"id\":\"49W7QRosGkOcin7VP_quH\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":230.625,\"y\":-188.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":32,\"height\":1,\"seed\":1925027015,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253173,\"link\":null,\"locked\":false,\"points\":[[0,0],[5,0],[10,0],[15,0],[21,0],[23,0],[26,0],[30,-1],[32,-1],[32,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":28,\"versionNonce\":1773478215,\"isDeleted\":false,\"id\":\"XJ9i4chLa1F0NXh9yWHh1\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":231.625,\"y\":-178.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":32,\"height\":0,\"seed\":582942503,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253173,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[5,0],[10,0],[17,0],[19,0],[23,0],[27,0],[30,0],[31,0],[32,0],[32,0]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":43,\"versionNonce\":278772393,\"isDeleted\":false,\"id\":\"1xTStsgIwLJQcM7YO8UPd\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":251.625,\"y\":-177.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":7,\"height\":72,\"seed\":226439111,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253173,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,2.2153846153846155],[1,5.538461538461538],[2,8.861538461538462],[3,13.292307692307693],[4,15.50769230769231],[4,19.93846153846154],[5,24.36923076923077],[5,26.584615384615386],[5,29.907692307692308],[6,34.33846153846154],[6,39.87692307692308],[6,43.2],[6,48.73846153846154],[6,53.16923076923077],[6,58.70769230769231],[6,63.13846153846154],[7,64.24615384615385],[7,67.56923076923077],[7,68.67692307692307],[7,69.78461538461539],[7,70.8923076923077],[7,72],[7,72]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":26,\"versionNonce\":489644135,\"isDeleted\":false,\"id\":\"HIiEnaRc4YfCtP7QLL5EP\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":236.625,\"y\":-104.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":40,\"height\":3,\"seed\":1040767463,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253173,\"link\":null,\"locked\":false,\"points\":[[0,0],[2,0],[6,-1],[12,-1],[22,-1],[32,-3],[37,-3],[38,-3],[40,-3],[40,-3]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":11,\"versionNonce\":1774886441,\"isDeleted\":false,\"id\":\"VUeA1dA2afWj4C_KIpISO\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":177.625,\"y\":-248.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":7,\"height\":27,\"seed\":856933671,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253173,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,-3],[3,-12],[4,-18],[6,-23],[7,-25],[7,-27],[7,-27]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":16,\"versionNonce\":285667593,\"isDeleted\":false,\"id\":\"eSwPkPrlrNcyOmS-opxo5\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":176.625,\"y\":-273.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":21,\"seed\":1325824937,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253174,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[2,-2],[3,-5],[6,-8],[7,-10],[8,-12],[9,-14],[11,-4],[13,3],[14,4],[14,7],[15,7],[15,7]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":11,\"versionNonce\":467877895,\"isDeleted\":false,\"id\":\"_RvnmWAoOnp13rULQLSo3\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":197.625,\"y\":-213.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":26,\"height\":15,\"seed\":722979529,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763253174,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[7,3],[13,7],[16,8],[22,13],[26,14],[26,15],[26,15]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":9,\"versionNonce\":1254412327,\"isDeleted\":false,\"id\":\"izIooN3m-KdmoGt2G8ltj\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":217.625,\"y\":-211.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":6,\"height\":13,\"seed\":1973617353,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763254089,\"link\":null,\"locked\":false,\"points\":[[0,0],[0,1],[2,4],[4,8],[4,11],[5,12],[6,13],[6,13]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"freedraw\",\"version\":9,\"versionNonce\":1960393799,\"isDeleted\":false,\"id\":\"0sDBxyK1Ak1DX3_asYrmp\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":211.625,\"y\":-196.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":15,\"height\":1,\"seed\":1627310249,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1715763254708,\"link\":null,\"locked\":false,\"points\":[[0,0],[1,0],[5,0],[7,0],[9,-1],[13,-1],[15,-1],[15,-1]],\"lastCommittedPoint\":null,\"simulatePressure\":true,\"pressures\":[]},{\"type\":\"text\",\"version\":23,\"versionNonce\":1652205170,\"isDeleted\":false,\"id\":\"opbJzuXn\",\"fillStyle\":\"solid\",\"strokeWidth\":1,\"strokeStyle\":\"solid\",\"roughness\":0,\"opacity\":100,\"angle\":0,\"x\":122.625,\"y\":-244.2421875,\"strokeColor\":\"#1e1e1e\",\"backgroundColor\":\"transparent\",\"width\":76.708984375,\"height\":25,\"seed\":1855386249,\"groupIds\":[],\"frameId\":null,\"roundness\":null,\"boundElements\":[],\"updated\":1745407933248,\"link\":null,\"locked\":false,\"fontSize\":20,\"fontFamily\":1,\"text\":\"Glättung\",\"rawText\":\"Glättung\",\"textAlign\":\"left\",\"verticalAlign\":\"top\",\"containerId\":null,\"originalText\":\"Glättung\",\"lineHeight\":1.25,\"baseline\":21}],\"appState\":{\"theme\":\"dark\",\"viewBackgroundColor\":\"#ffffff\",\"currentItemStrokeColor\":\"#1e1e1e\",\"currentItemBackgroundColor\":\"transparent\",\"currentItemFillStyle\":\"solid\",\"currentItemStrokeWidth\":1,\"currentItemStrokeStyle\":\"solid\",\"currentItemRoughness\":0,\"currentItemOpacity\":100,\"currentItemFontFamily\":1,\"currentItemFontSize\":20,\"currentItemTextAlign\":\"left\",\"currentItemStartArrowhead\":null,\"currentItemEndArrowhead\":\"arrow\",\"scrollX\":269.8125,\"scrollY\":909.591796875,\"zoom\":{\"value\":0.8},\"currentItemRoundness\":\"round\",\"gridSize\":null,\"gridColor\":{\"Bold\":\"#C9C9C9FF\",\"Regular\":\"#EDEDEDFF\"},\"currentStrokeOptions\":null,\"previousGridSize\":null,\"frameRendering\":{\"enabled\":true,\"clip\":true,\"name\":true,\"outline\":true}},\"files\":{}};InitialData.scrollToContent=true;App=()=>{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=>{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=>{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(\"resize\",e),()=>window.removeEventListener(\"resize\",e)},[t]),React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"excalidraw-wrapper\",ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(\"Op-Amps_2024-05-15_1043.35.excalidraw.md2\");ReactDOM.render(React.createElement(App),excalidrawWrapper);})();\n[Non-inverting op-amp circuit (youtube.com)](https://www.youtube.com/watch?v=_Ut-nQ535iE)\n$$\nv_o = \\frac{R_1 + R_2}{R_2} v_{IN}\n$$\n-> Der Gain des Verstärkers hat keinen Einfluss\n### Praktisches Beispiel\n![Pasted image 20240515105449.png](/img/user/_attachments/Pasted%20image%2020240515105449.png)\n0..3V3 -> 0..10V (D1 und R4 zur Visualisierung)\n### Abwandlung: 4-20mA Output\n![Pasted image 20240515112511.png](/img/user/_attachments/Pasted%20image%2020240515112511.png)\n[4-20mA Transmitter Explained using an Op Amp (youtube.com)](https://www.youtube.com/watch?v=ZqJxdBCpb6c)\n- Spannung an Eingängen ist gleich (im eingeschwungenen Zustand)\n- Strom wird durch Vi und R1 bestimmt (unabhängig von RL!)\n- Warum Signalübertragung als Strom?\n\t- Für Übertragung als Spannung RL idealerweise sehr groß (damit Innenwiderstand von Spannungsquelle und Kabel keinen Einfluss haben)\n\t- Dann hat aber eine externe Störquelle (z.B. elektrisches Feld) einen sehr großen Einfluss\n\t- Bei Übertragung als Strom kann RL klein gewählt werden, da Strom unabhängig von Widerstandswerten überall gleich\n\t- Somit ist auch Einfluss von externer Störquelle gering\n## Summierender Verstärker (für Audio)\nN parallele, gleich aufgebaute Op-Amp Schaltungen, welche am Ende summiert werden. Jede Op-Amp Schaltung fügt Rauschen hinzu. Bei der Summierung verstärkt sich das Signal welches auf allen Kanälen gleich ist, wohingegen das Rauschen stochastisch ist und sich gegenseitig aufhebt.\n$$\nReduktion = \\sqrt{Anzahl\\ parallele\\ Schaltungen\\ N}\n$$\n- Nur relevant, wenn das zu verstärkende Signal sehr schwach ist (z.B. bei Phono-Audio-Verstärkern).\n- Schaltungen müssen dabei sehr gleich sein (Toleranzen in Widerständen und Co beachten, ggf. einzeln einmessen).\n- [\"Input Offset Voltage\"](https://www.ti.com/lit/an/sloa059b/sloa059b.pdf?ts=1734505475015) (Spannungsdifferenz durch Fertigungsfehler zwischen Op-Amp Terminals) sollte deutlich kleiner als Amplitude von Signal sein -> kann ausgemessen werden (siehe Videolink unten)\n![Pasted image 20241218095447.png](/img/user/_attachments/Pasted%20image%2020241218095447.png)\n[Mastergroove repair by Mend it Mark & an honest message to Tom Evans audio - YouTube](https://youtu.be/6hVe_spuJQI?feature=shared&t=1037)",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "Platinendesign",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/platinendesign/",
		"content": "Lessons Learned\n\nKleine blanke Fläche der Ground Plane am Rand für GND-Klammer des Oszilloskops\nProbe Points vorsehen\n\nBlanke punkte and allen wichtigen Signalen und Spannungsleveln\nbesser (wenn platz): Pin-Header, damit man einfach festes Kabel anschließen kann\n\nGlättungskondensatoren vorsehen\n\nan allen wichtigen Spannungsleveln (extern wie intern), insbesondere Quellspannung für CPU/MC\nman kennt nie die Qualität des einkommenden Spannungslevels und muss ggf. Schwankungen ausgleichen, um Brownouts zu verhindern.\nMeist reichen 10µF aus, ggf. zusätzlich 100nF für sehr kleine Schwankungen\nhttps://arduino.stackexchange.com/a/76692\nggf. auch hinter MOSFET, um Ripple zur Schaltvorgang auszugleichen (hier eher 100nF, damit nicht zu viel geglättet wird)\nZumindest auf Platine vorsehen, könnten dann auch nur optional bestückt werden\n\nSD-Karte: Spannungsversorgung über GPIO schaltbar machen\n\nKarte kann crashen und nur durch Power-Cycle rebootet werden",
		"tags": [ "note","experience","german"]
},

{
		"title": "Windows",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/windows/",
		"content": "MD5, SHA berechnen\n:: SHA1 by default\ncertutil -hashfile filename\ncertutil -hashfile filename MD5\ncertutil -hashfile filename SHA512\n\n# SHA256 by default\nget-filehash filename\nget-filehash -Algorithm MD5 filename\n# print only hash\n(get-filehash -Algorithm SHA512 filename).Hash\n# Vergleich mit Prüfsummendatei im Format &quot;Hash Dateiname&quot;\n# (z.B. https://dotnetcli.blob.core.windows.net/dotnet/checksums/8.0.0-sha.txt)\n(Get-Content .\\checksums.txt | Select-String &quot;filename&quot;).Line -like (Get-FileHash .\\filename -Algorithm SHA512).Hash + &quot;*&quot;\n\nhttps://technastic.com/check-md5-checksum-hash/\nSoft-/Hardlinks (NTFS)\n:: Symbolic link (regular link)\nmklink &quot;Target link file&quot; &quot;Source file&quot;\nmklink /d &quot;Target link folder&quot; &quot;Source folder&quot;\n:: Hardlink (appears as normal file, but content is synced)\nmklink /h &quot;Target link file&quot; &quot;Source file&quot;\n:: Junction (folder appears as being in both places)\nmklink /j &quot;Target link folder&quot; &quot;Source folder&quot;\n\n# Naming of parameters is from the eyes of the link\nNew-Item -ItemType SymbolicLink -Path &quot;Target link&quot; -Target &quot;Source file/folder&quot;\nNew-Item -ItemType Hardlink -Path &quot;Target link&quot; -Target &quot;Source file&quot;\nNew-Item -ItemType Junction -Path &quot;Target link&quot; -Target &quot;Source folder&quot;\n\n[!tip] Deleting\nDeleting the source file/folder will invalidate all links. Deleting the link will not remove the source file (even in the case of hardlinks/junctions).\n\nhttps://www-tenforums-com.translate.goog/tutorials/131182-create-soft-hard-symbolic-links-windows.html?_x_tr_sl=en&amp;_x_tr_tl=de&amp;_x_tr_hl=de&amp;_x_tr_pto=tc\nFenster off screen\n\nWindows + Linke/Rechte Pfeiltaste (Verschiebt Fenster in linke/rechte Bildschirmhälfte)\nManchmal hilft dies nicht, dann aber das Folgende:\n\nMaus eine kurze Zeit über Icon auf der Taskleiste halten -&gt; Rechtsklick auf die Fenster-Vorschau (nicht das Icon in der Taskleiste)\nKlick auf Verschieben\nEine Pfeiltaste drücken\nMaus bewegen -&gt; Fenster klebt an der Maus\n\nReboot to bios\nshutdown /r /fw /t 0\n\nWLAN Schlüssel anzeigen\nnetsh wlan show profile WIFI_NAME key=clear\nnetsh wlan show profile WIFI_NAME key=clear | findstr Schlüssel\n\nNützliche Pfade\n<a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/code/langauges/batch/#useful-windows-variables\">Batch#Useful Windows variables</a>\nIcons für Verknüpfungen\n\nC:\\Windows\\System32\\shell32.dll\nC:\\Windows\\System32\\imageres.dll\nC:\\Windows\\System32\\pifmgr.dll\nC:\\Windows\\System32\\wmploc.dll\nC:\\Windows\\System32\\moricons.dll\nC:\\Windows\\System32\\mmres.dll\nC:\\Windows\\System32\\wpdshext.dll\nC:\\Windows\\System32\\DDORes.dll\nC:\\Windows\\System32\\IEframe.dll\nC:\\Windows\\System32\\networkexplorer.dll\nC:\\Windows\\Explorer.exe\nC:\\Windows\\System32\\accessibilitycpl.dll\nC:\\Windows\\System32\\mmcndmgr.dll\nC:\\Program Files (x86)\\Internet Explorer\\iexplore.exe\nC:\\Program Files\\Windows NT\\Accessories\\wordpad.exe\n\nPortable Programme in Startmenü Suche\n\nIndizierungsoptionen aufrufen (am Einfachsten über die Suche)\nÄndern &gt; Überordner der Portable Programme hinzufügen\nOK &gt; Schließen\nSobald Indizierung abgeschlossen ist, findet die Suche im Startmenü auch die portable exe Dateien in den Ordnern\n\n[!WARNING] Bekannte Probleme\nDies scheint nicht mit dem Ordner %userprofile%\\AppData\\Local\\Programs zu funktionieren. AppData ist standardmäßig von der Indizierung ausgeschlossen, aber selbst wenn man ihn manuell wieder aktiviert, findet die Suche Portable Apps in diesem Ordner nicht.\n-&gt; Empfehlung: Portable Apps in C:\\tools\\ (o.ä.) platzieren\n\nAlte Programme aus Suche entfernen\nWenn alte, längst deinstallierte Verknüpfungen und Programme in der Startmenü Suche angezeigt werden, ist ein veralteter Suchindex dafür verantwortlich.\n\nIndizierungsoptionen aufrufen\nErweitert &gt; Tab &quot;Indexeinstellungen&quot; &gt; Gruppe &quot;Problembehandlung&quot; &gt; Button &quot;Neu erstellen&quot; klicken\nDer Suchindex wird damit komplett gelöscht und neu erstellt (dies kann einige Minuten dauern).",
		"tags": [ "note","knowledge-base","german"]
},

{
		"title": "janek.ing - Home",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "Hi!\nI am Janek, programmer / engineer / tinkerer from Cologne, Germany.\nMy passion is building software for humans that lasts, combining electronics and design into interactive pieces and creating games for various platforms. Examples for all of these are showcased on the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/projects/\">Projects page</a>.\nI have been programming for 20 years and building software professionally for close to 10. Recently I worked as a product developer and product owner for several companies creating IoT solutions.\nGrowing up in the 90s and 2000s, naturally my first &quot;programming&quot; experience was building a website for myself (using plain HTML, CSS and PHP). It showcased photos I took, cool videos I found on the web and &quot;funny&quot; jokes only me and my friends laughed about (and of course it had a forum with 2 active users, including me). It was online for a couple of years until the free webhosting provider went out of business. Nowadays the web is different, but mostly full of ads. Reading about the idea of a &quot;digital garden&quot; reminded me of the days where the web was mostly about sharing your ideas and experiences. A place of curiosity without the immediate drive to make money off everything.\nTo participate in this idea, I publish some of my notes in my <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/garden/\">Digital Garden</a>. If you find anything worthwhile or a mistake, consider leaving a comment.",
		"tags": [ "note","gardenEntry"]
},

{
		"title": "Digital Garden",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/garden/",
		"content": "I used to have a standard pencil-on-paper notebook, which I tried to take everywhere. In 2024 I discovered Obisdian, after looking at Evernote but not really liking the idea of putting all my notes in someone's cloud. 1,5 years later my vault grew to 200+ notes and I have it synced between all my devices. I still miss sketching with the pencil, but digital notes are just superior in several ways.\nThis garden will include some, but not all of my notes. I do not like publishing very rough stuff. Writing is not my strong suit, but this is an effort in getting better at it. Notes will probably start off as a list of bullet points and might grow into a more refined text later.\nIn general I will try to add the following tags:\n##knowledge-base for collections of technical information\n##opinion for when texts contain my personal opinion\n##experience for when I am talking from professional experience\n##german for texts (partly) in German (leave a comment if I should translate these)\nMy Obsidian setup:\n\nMost core plugins disabled (except for crucial ones)\nCommunity plugins: cMenu, Excalidraw, File Diff, Lazy Plugin Loader (more like a hacky workaround, but it does help somewhat)\nSyncing between devices using Syncthing\nPublishing using the Digital Garden plugin and my github-pages template",
		"tags": ["knowledge-base", "opinion", "experience", "german", "note"]
},

{
		"title": "janek.ing - Imprint",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/imprint/",
		"content": "Not necessary: https://www.e-recht24.de/impressum/13095-impressum-fuer-die-private-homepage.html#toc_3-wann-ist-eine-website-rein-privat",
		"tags": [ "note"]
},

{
		"title": "janek.ing - Project Showcase",
		"date":"Wed May 28 2025 14:40:28 GMT+0000 (Coordinated Universal Time)",
		"url":"/projects/",
		"content": "Programming\n\nNetwork Visualizer2024-2025 • CSoftware for working with large clouds of geospatial data. Developed for visualizing and analyzing the performance of a city-wide LoRaWAN network. The main goal was to handle 1M+ datapoints in real-time. Loads 1M datapoints (a 200MB csv file) in less than a second and displays them on top of a fully-featured OpenStreetMap renderer. Analytic tools like aggregations, displaying connections to gateway stations and more. All in real-time 60+ fps. Minimal dependencies (only curl and raylib).Currently available upon request.\n\nCrank-it2023-2024 • LuaBop-it inspired game developed for the Playdate.Available on itch.ioCode on GitHub\n\nCaBiS2017 • Typescript, HTMLCandy Billing System for my work at the time. Using the general transponder used for building access as authentication and a RaspberryPi with Touchscreen for the interface. Ionic for the frontend, SQLite and node.js microservices for the backend. First time working with node, made a huge mess, but it worked at the end (so a typical Typescript project after all...?).\n\nGreyout2011-2017 • C++2D side-scrolling puzzle game developed for the OpenPandora. Realizes the concept of &quot;negative space&quot;. You control 2 characters walking in the same world, but one experiencing it in a black-on-white and one in white-on-black way. Physics-based and logic puzzles with a custom engine based on SDL. Soundtrack by Nick May.Code on GitHubVideo on YouTube\n\nSchizophrenia2012-20132D puzzle platformer where I did the art, most of the game and level design and theZiz did the code and built a whole 2D software renderer from scratch. Made for a GP2X game jam. You control a scientist that can make copies of certain entities in the world to solve puzzles. Kinda like Snapshot, although our first designs predate it.Code on GitHub\n\nPND Tools2011-2015 • DelphiThe most popular tool for creating pnd files on Windows. pnd is the container format used by the open-source handheld OpenPandora.Multi-windowed GUI with drag-and-grop support for generating a file tree, editing the xml description data and bundling it together. Easy-configuration wizard with a step-by-step guide for beginners.Code on GitHub\n\nWandor World Editor2009-2011 • DelphiLevel editor for a never released tile-based 2D side-scrolling game. Multi-Window UI with docking. Support for multiple layers, parallax scrolling background, placing entities from a database, navigating via minimap. Export to a custom file-format which uses Unicode characters and indices into the tilemap.\n\nA very simple, yet powerful JavaScript library for manual localization in browser UIs (used in projects like Soundbox and Goodnightlamp): GitHub\nSeparating Axis Theorem collision checking library for the Playdate: GitHub\nSeveral libraries for the ESP32: Captive Portal, wifiman\n\nElectronics\n\nHome Lamp2022 • C++, ESP32Re-creation of the wonderful Good Night Lamp by Alexandra Deschamps-Sonsino. Multiple lamps are connected via the internet. When one is turned on, all turn on. Send a warm light meaning &quot;good night&quot;, &quot;I just came home safe&quot; or &quot;hey, I am available to call&quot; with the press of a button. Wood and acrylic housing, custom PCB, communication via MQTT, simple web-interface for configuration. My brother an I built this as a Christmas present for our mom. It is still working great after 2+ years.Video on YouTube\n\nSoundbox2020-2023 • C++, ESP32Play popular meme sounds at the press of the button. Annoy or delight your co-workers. Let them join in on the fun via the built-in web-interface.\n\nWoodworking and Jewlery\nWooden Cube Shelf\n2023 • Bamboo\n\nLED-Strips for indirect lighting. Some cubes are compatible to IKEA Expedit accessories for additional storage options.\n\nTerrace Bench\n2021 • OSB wood panels, douglas fir 2-by-4s\n\nOur Corona project. Fits up to 6 people or 2 people lying down. Can fold out one of the side panels to create an area for a mattress.",
		"tags": [ "note"]
}
]