[
{
		"title": "CSS",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/css/",
		"content": "Selectors\n/*** Element types ***/\na\nimg\nbody\n/*** Attributes ***/\na[title] /* a element with title attribute */\nh1[class~=&quot;logo&quot;] /* h1 element whose class contains logo */\n/*** Classes ***/\n.myClass\nli.myClass /* only applies to li elements */\n.myClass.other /* only when both myClass and other present */\n/*** IDs ***/\n#test /* all elements with ID test */\n[id=test] /* same thing */\n/*** universal ***/\n* /* all elements */\n*.warning /* all elements with class warning */\n/*** Pseudo-classes ***/\n:hover /* mouse over */\n:active /* user actives, i.e. clicks button/link */\n:focus /* inout element with focus (e.g. active text-box) */\n:focus-within /* element or descendants have focus */\n:visited /* link/a element that has been visited */\n:target /* element with id matching fragment of URL (i.e. http://www.example.com/index.html#section2 -&gt; id=&quot;section2&quot;) */\n:first-child, :last-child\n:disabled, :read-only, :invalid, :checked\n/* there are many more */\n\nCombinators\nli li /* li elements with ancestor li - i.e. 2nd+ nested li */\n.center img /* img with any ancestor with class center */\n.content &gt; div.nice /* div with class nice and direct parent with class content */\nimg + p /* element p directly following img and same parent */\nimg ~ p /* any element p following an img with the same parent */\nspan, div /* apply same style to both span and div */\n\nClass nesting example\nJSFiddle - Code Playground\n\nem und rem\nem is factor of font pixel-size in parent container\nrem works the same, but always references the root element &lt;html&gt;. Default font-size is 16px.\n&lt;html&gt;\n\tThis text is 16px big\n\t&lt;div style=&quot;font-size:10px&quot;&gt;\n\t\tThis text is 10px big\n\t\t&lt;div style=&quot;font-size:2em&quot;&gt;\n\t\t\tThis text is 20px big (2 * 10px)\n\t\t\t&lt;div style=&quot;font-size:1.5em&quot;&gt;\n\t\t\t\tThis text is 30px big (1,5 * 2 * 10px)\n\t\t\t&lt;/div&gt;\n\t\t\t&lt;div style=&quot;font-size:1.5rem&quot;&gt;\n\t\t\t\tThis text is 24px big (1,5 * 16px)\n\t\t\t&lt;/div&gt;\n\t\t&lt;/div&gt;\n\t&lt;/div&gt;\n&lt;/html&gt;\n\nhttps://jsfiddle.net/d5rbwqza/",
		"tags": ["test", "note","knowledge-base"]
},

{
		"title": "Go",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/code/langauges/go/",
		"content": "Cheatsheet\nTypes and Zero-Values\nbool - false\nstring - &quot;&quot;\nint (int8..int64), uint (uint8..uint64) - 0\nfloat32, float64 - 0\ncomplex64, complex128 - 0\nuintptr, byte (uint8), rune (int32) - 0\ninterface{} (any) - nil\n[slice, map, pointer] - nil\n[struct] - all members = their zero-value\n\nvar, const\nvar name string = &quot;val&quot; // = val optional\nname := &quot;val&quot; // implicit typing (name is string)\nintVal := int(true) // type conversion\nconst Pi = 3.14 // no :=\nX, Y := 1, 2 // X=1, Y=2\nptr := &amp;name // type is *string\nvar any interface{}\nany = Pi\nany = &quot;hello&quot;\nname,ok := any.(string) // type assertion\n\nstruct\ntype Vertex struct {\n\tX, y float64 // X is public, y is private\n}\np := Vertex{1, 3}\np == Vertex{1, 3} // true (only shallow check!)\nvar p2 = Vertex{X:3.14} // Y:0 is implicit\npp := &amp;Vertex{} // type *Vertex, X,Y=0\nval := pp.X // access via dot (unlike C)\n\nArray, slice\nvar array [10]float32 // initialized, size is fixed\narray2 := [4]int{1,2,3,4}\nvar slice []int = array2[0:2] // [start,end) -&gt; 1,2\nlen, cap := len(slice), cap(slice) // 2, 4\nnewSlice := make([]float32, 2, 3) // dynamic, len=2, cap=3\nnewSlice = append(newSlice, Pi, 42.13) // always re-assign!\nnewSlice = append([]float32{1.0}, newSlice...) // prepend\ncopy(destSlice, sourceSlice)\nvar nilSlice []int = nil\nnilSlice = append(nilSlice, 10) // works\n\nMap operations\nvar m map[string]float32 // not initialized!\nm = make(map[string]float32)\nm2 := map[string]Vertex {\n\t&quot;foo&quot;: {1,2},\n}\ndelete(m2, &quot;foo&quot;)\nv, ok := m2[&quot;foo&quot;] // v={0,0} (zero value), ok=false\nclear(m2) // Go 1.21, also works on slices\n\nLoops, switch\nfor i := 0; i &lt; len(str); i++ // all optional, for -&gt; while\nfor i, value := range array // _,value or just i pssible\nfor i := range 10 // 0..9\nswitch os := runtime.GOOS; os { // condition optional\n\tcase &quot;linux&quot;:\n\t\tfallthrough // implicit break, explicit fallthrough\n\tcase getWorstOs(): // not just static values\n\tdefault:\n\tcase val == test(): // alt. if no condition\n}\nswitch v := i.(type) { // type switch\n\tcase int: // v will int value\n}\n\nReturn values, error handling\n// ignore return values, if with statement, error handling\nif _, err := funcWithErr(); err != nil {\n\tprintln(err) // print to stderr\n} else {\n\t// do else, err still valid here\n}\n// err no longer valid here\n\nFunctions\nfunc add(x, y int) (int, error) { } // return val\nfunc sub(x, y int) (result int) { } // naked return\nfunc compute(worker func(int, int) int) int { }\nfn := func(x int) bool { }\nfunc varArgs(vals ...int) // for i,v := range vals\ntype act func(index int) (res int)\ngo anyFunction(1,2,&quot;foo&quot;) // leightweight thread\n// same address space, needs synchronization\n\nMethods\nfunc (v Vertex) DotProduct(other Vertex) int {\n\treturn v.X * other.X + v.Y * other.Y\n}\nfunc (v *Vertex) Scale(f int) {\n\tv.X *= f\n\tv.Y *= f\n} // = func Scale(v *Vertex,f int), Scale(&amp;p,4)\nangle := p.DotProduct(Vertex{3,4})\np.Scale(4) // same operator for pointer and value\n\nInterfaces\ntype Abser interface { // define\n\tAbs() float64\n}\nfunc (v *Vertex) Abs() float64 { // implement implicitly\n\tif (v == nil) { return 0 } // need only for pointers\n\treturn math.Sqrt(v.X*v.X + v.Y*v.Y)\n}\nvar a Abser\nval := a.Abs() // panic, since a does not hold a value\nv := Vertex{3,4}\na = &amp;v // Vertex* implements Abser, so we can assign\nfmt.Printf(&quot;%v %v %T\\n&quot;,a.Abs(),a,a) //5 &amp;{3 4} *main.Vertex\nvar v2 *Vertex\na = v2 // v2 is nil, can still call methods of it:\nfmt.Printf(&quot;%v %v %T\\n&quot;,a.Abs(),a,a) //0 &lt;nil&gt; *main.Vertex\n\nChannels\nc := make(chan int)\nc &lt;- 42 // send value to channel c (blocking)\nx := &lt;-c // receive value from channel c (blocking)\nfmt.Printf(&quot;%v %v\\n&quot;, &lt;-c, &lt;-c)\n// buffered channel (blocks: send on full, receive on empty)\ncb := make(chan int, 100) // capacity of 100 values\nclose(c) // close channel (only sender!, optional)\nv, ok := &lt;-c // ok is false if channel is empty and closed\nfor i := range c // loop until channel is empty and closed\nselect { // blocks until one case can be run (random if 2+)\n\tcase c &lt;- x: // same syntax as switch, no break needed\n\tcase &lt;-quit:\n\tdefault: // run if nothing is ready\n}\n\nPublic / Private\n\n[!important] Capitalization is access/scope management\ntype Example struct {\nPublicField string\nprivateField int // unexported field\n}\nfunc Add(val int) int { ... } // exported\nfunc subt(val int) int { ... } // not exported\n\nstruct members and functions starting with a Capital letters are public/exported, those with lowercase letter are private/unexported (i.e. can only be accessed from the same module)\nOrganizing Modules\nOrganizing a Go module - The Go Programming Language\nUnofficial (for big projects): GitHub - golang-standards/project-layout: Standard Go Project Layout\ngo mod init &lt;modulename&gt;\ngo get &lt;modulename&gt;\n\nProgram with main\n-&gt; standalone, will usually not be imported into other projects\n//// go.mod file\n// module name needs to be unique in workspace\n// name can be anything, but url is preferred if public repo,\n// because this enables installation by:\n// go install github.com/someuser/modname@latest\nmodule github.com/someuser/modname\n\ngo 1.22.1\n\nrequire (\n\t// external packages (get added by go get)\n)\n\n//// main.go file\n// filename can be anything\n// package should be main\npackage main\n\nfunc main() {\n\t// ...\n}\n\nPackages / Libraries\n-&gt; might be imported into other projects\n//// go.mod file\n// path to code repository, so it can be easily imported by\n// import &quot;github.com/someuser/modname&quot;\nmodule github.com/someuser/modname\n\ngo 1.22.1\n\nrequire (\n\t// external packages (get added by go get)\n)\n\n[!INFO] Exported Symbols\nSymbols (e.g. types and functions) of a module that you want to export, need a name starting with an uppercase letter.\n\n//// modname.go file\n// package name = folder name of project (last component of module name)\npackage modname\n\nfunc main() { // not exported\n\t// ...\n}\n\nfunc Exported() {\n// ...\n}\n\nMultiple files / folders\n\nMain program or library code should be in root directory (next to go.mod)\nAll go files in the same directory declare the same package name\nSub-packages should reside in their own directories. Their package name again should be the name of the directory (e.g. hash/hash.go -&gt; package hash)\n\nimport &quot;github.com/someuser/modname/hash&quot; (assuming module name from example above)\nNo separate go.mod file required\n\nGo will not import packages placed in an internalfolder from outside of the project (e.g. internal/trace/trace.go will only be available to its module)\nMixing of program and libraries in same module/folder is possible\n\nproject-root-directory/\ngo.mod\nmodname.go -&gt; main module\nmodname_test.go -&gt; test code\nauth/\nauth.go -&gt; public package auth\nauth_test.go\ntoken/\ntoken.go -&gt; public package auth/token\ntoken_test.go\nhash/\nhash.go -&gt; public package hash\ninternal/\ntrace/\ntrace.go -&gt; private package trace\ncmd/\nprog1/\nmain.go -&gt; test or helper program\nprog2/\nmain.go -&gt; another bundled command\n\nLocal overrides\nIn go.mod:\nreplace domain.ext/path/lib =&gt; ../local/path\n\nWill load library from local files, instead of external repo/cache. Good for testing changes in library modules.\nUpdate modules\ngo get -u\ngo mod tidy\n\nTesting\n\nAdd a test - The Go Programming Language\nPackage: auth.go -&gt; Test Code: auth_test.go\nsame package name\nimport &quot;testing&quot;\nfunc TestSomething(t *testing.T) { }\nt.Fatalf(&quot;Some error occurred!&quot;)\ngo test -v to execute tests\n\npackage greetings\n\nimport (\n&quot;testing&quot;\n&quot;regexp&quot;\n)\n\n// Hello() is external function under test\nfunc TestHelloName(t *testing.T) {\nname := &quot;Gladys&quot;\nwant := regexp.MustCompile(`\\b`+name+`\\b`)\nmsg, err := Hello(&quot;Gladys&quot;)\nif !want.MatchString(msg) || err != nil {\nt.Fatalf(`Hello(&quot;Gladys&quot;) = %q, %v, want match for %#q, nil`, msg, err, want)\n}\n}\n\nfunc TestHelloEmpty(t *testing.T) {\nmsg, err := Hello(&quot;&quot;)\nif msg != &quot;&quot; || err == nil {\nt.Fatalf(`Hello(&quot;&quot;) = %q, %v, want &quot;&quot;, error`, msg, err)\n}\n}\n\nuseful modules\nfmt\nstrings\nstrconv\nioutil\nos\nflag\njson\n\nenum / iota\nconst (\n\tc0 = iota // c0 == 0\n\tc1 = iota // c1 == 1\n\tc2 = iota // c2 == 2\n)\n\nconst (\n\ta = 1 &lt;&lt; iota // a == 1 (iota has been reset)\n\tb = 1 &lt;&lt; iota // b == 2\n\tc = 1 &lt;&lt; iota // c == 4\n)\n\nconst (\n\tu = iota * 42 // u == 0 (untyped integer constant)\n\tv float64 = iota * 42 // v == 42.0 (float64 constant)\n\tw = iota * 42 // w == 84 (untyped integer constant)\n)\n\nconst x = iota // x == 0 (iota has been reset)\nconst y = iota // y == 0 (iota has been reset)\n\nconst (\n\tbit0, mask0 = iota, 1&lt;&lt;iota - 1 // bit0 == 0, mask0 == 0\n\tbit1, mask1 // bit1 == 1, mask1 == 1\n\t_, _ // skips iota == 2\n\tbit3, mask3 // bit3 == 3, mask3 == 7\n)\n\nconst (\n\tc0 = -1\n\tc1 // c1 == -1\n\tc2 = iota // c2 == 2\n)\n\nExported names\nNamen mit Großbuchstaben am Anfang sind &quot;exported&quot;. Dies betrifft Variablen in Paketen (für import) und bspw. JSON Encoding/Decoding.\ntype Payload struct {\n\tIndex int\n\tDeviceId string\n\ttest float32\n}\nvar pl Payload\nbytes, err := json.Marshal(pl)\n// result: {&quot;Index&quot;:0,&quot;DeviceId&quot;:&quot;&quot;}\n\nJSON\nUse `json:&quot;...&quot;` strings to add compile time encoding information. First argument is the exported name of the member. omitempty can be used to remove null values from the export.\n\n[!IMPORTANT]\nYou need to rename fields, if you want to have lowercase starting letters for fields, since only exported fields are included in the marshalling process and exported fields need to start with a capital letter.\n\n[!WARNING] nil slices ≠ empty slices in JSON\nNil slices (unitialized slices) are exported as &quot;null&quot;, while empty slices (len=0, cap=0) are exported as empty array []. Other than that they behave mostly the same in Go. See null - nil slices vs non-nil slices vs empty slices in Go language - Stack Overflow\n\ntype Payload struct {\n\tArray []int `json:&quot;arr&quot;`\n\tArray2 []int `json:&quot;other&quot;`\n\tArray3 []int `json:&quot;three,omitempty`\n\tfoo int // not exported, not considered in json marshal/unmarshal\n}\nvar s1 []int // nil slice\ns2 := []int{} // non-nil, empty slice\ns3 := make([]int, 0) // internally same as s2\npl := Payload{s1,s2,s3}\nbytes, err := json.Marshal(pl)\n// result: {&quot;arr&quot;:null,&quot;other&quot;:[]}\n\nMarshal/Unmarshal\nMarshal = Encoding (json.Marshal(var) gibt json string als []byte zurück)\nUnmarshal = Decoding (json.Unmarshal(byteArray, outVar) dekodiert das json byte array in outVar)\nEmbedded struct\ntype Point struct {\n\tX, Y float64\n}\ntype Rect struct {\n\tPoint\n\tW, H float64\n}\n// on init, have to go through embedded type explicitly\nr := Rect{Point: Point{0,2}, W:0, H:4}\n// on access we can use the sub-member names directly\nr.X = 1\nr.W = 3\nfmt.Println(r) // {{1 2} 3 4}\n\nClosures\nfunc adder() func(int) int {\n\tsum := 0\n\t// return func has access to sum, which is bound to return func\n\treturn func(x int) int {\n\t\tsum += x\n\t\treturn sum\n\t}\n}\n\nfunc main() {\n\t// each adder has own context and sum value\n\tpos, neg := adder(), adder()\n\tfor i := 1; i &lt; 4; i++ {\n\t\tfmt.Println(\n\t\t\tpos(i),\n\t\t\tneg(-2*i),\n\t\t)\n\t}\n}\n// 1 -2\n// 3 -6\n// 6 -12\n\nDefer\npackage main\nimport &quot;fmt&quot;\nfunc main() {\n\tfmt.Print(&quot;say: &quot;)\n\tdefer fmt.Println(&quot;!&quot;)\n\tdefer fmt.Print(&quot; world&quot;)\n\tfmt.Print(&quot;hello&quot;)\n}\n// say: hello world!\n// useful for closing files, channels, etc.\n\nMutex\nimport &quot;sync&quot;\nvar mu sync.Mutex\nmu.Lock()\nmu.Unlock()\ndefer mu.Unlock() // useful to make sure mutex is unlocked\n\nNil Interfaces (expanded)\ntype I interface {\n\tM()\n}\ntype T struct {\n\tS string\n}\nfunc (t *T) M() {\n\tif t == nil {\n\t\tfmt.Println(&quot;&lt;nil&gt;&quot;)\n\t\treturn\n\t}\n\tfmt.Println(t.S)\n}\nfunc main() {\n\tvar i I\n\tvar t *T // t is nil\n\ti = t // i is nil\n\t// calling interface methods of nil values is possible\n\ti.M() // prints &lt;nil&gt;\n\t\n\tvar i2 I // nil interface holds no value or type\n\ti2.M() // runtime exception (panic) - Go does not know which method to call\n}\n\nChannels (expanded)\nChannel Axioms | Dave Cheney\n\nnil channels (default value) = BAD\n\nsend + receive on nil channels block forever\n\nCaution with closed channels\n\nsend on a closed channel panics\nreceive on a closed channel (with empty buffer) immediately returns with the zero value\n\nCommon interfaces\n// Stringer (e.g. for fmt.Println())\nimport &quot;fmt&quot;\ntype Person struct {\n\tName string\n\tAge int\n}\nfunc (p Person) String() string {\n\treturn fmt.Sprintf(&quot;%v (%v years)&quot;, p.Name, p.Age)\n}\n// Error (e.g. for returning error from func)\ntype MyError struct {\n\tWhen time.Time\n\tWhat string\n}\nfunc (e *MyError) Error() string {\n\treturn fmt.Sprintf(&quot;at %v, %s&quot;,\n\t\te.When, e.What)\n}\n// Reader (implemented by files, network, compressors, etc.)\nimport &quot;io&quot;\n// interface: func (T) Read(b []byte) (n int, err error)\nr := strings.NewReader(&quot;Hello, Reader!&quot;)\nb := make([]byte, 8)\nfor {\n\tn, err := r.Read(b)\n\tfmt.Printf(&quot;n = %v err = %v b = %v\\n&quot;, n, err, b)\n\tfmt.Printf(&quot;b[:n] = %q\\n&quot;, b[:n])\n\tif err == io.EOF {\n\t\tbreak\n\t}\n}\n// n = 8 err = &lt;nil&gt; b = [72 101 108 108 111 44 32 82]\n// b[:n] = &quot;Hello, R&quot;\n// n = 6 err = &lt;nil&gt; b = [101 97 100 101 114 33 32 82]\n// b[:n] = &quot;eader!&quot;\n// n = 0 err = EOF b = [101 97 100 101 114 33 32 82]\n// b[:n] = &quot;&quot;\n\nGenerics\n// Index returns the index of x in s, or -1 if not found.\n// comparable is a special builtin interface for Generics\nfunc Index[T comparable](s []T, x T) int {\n\tfor i, v := range s {\n\t\t// v and x are type T, which has the comparable\n\t\t// constraint, so we can use == here.\n\t\tif v == x {\n\t\t\treturn i\n\t\t}\n\t}\n\treturn -1\n}\n// Defining your own Generics interface\ntype Number interface {\n\tint | int32 | int64 | float32 | float64\n}\nfunc sum[T Number](nums []T) T {\n\tvar result T\n\tfor i := range nums {\n\t\tresult += numbers[i]\n\t}\n\treturn result\n}\n// List represents a singly-linked list that holds values of any type.\ntype List[T any] struct {\n\tnext *List[T]\n\tval T\n}\n\nBreak Labels\ndone := time.After(1 * time.Millisecond)\nnumbers := make(chan int)\nouter:\nfor {\nselect {\ncase &lt;-done:\nbreak outer\ncase num := &lt;-numbers:\nfmt.Println(num)\n}\n}\n\nFormat time string\nfmt.Println(time.Now().Format(&quot;20060102150405&quot;))\n\nconst (\nstdLongMonth = &quot;January&quot;\nstdMonth = &quot;Jan&quot;\nstdNumMonth = &quot;1&quot;\nstdZeroMonth = &quot;01&quot;\nstdLongWeekDay = &quot;Monday&quot;\nstdWeekDay = &quot;Mon&quot;\nstdDay = &quot;2&quot;\nstdUnderDay = &quot;_2&quot;\nstdZeroDay = &quot;02&quot;\nstdHour = &quot;15&quot;\nstdHour12 = &quot;3&quot;\nstdZeroHour12 = &quot;03&quot;\nstdMinute = &quot;4&quot;\nstdZeroMinute = &quot;04&quot;\nstdSecond = &quot;5&quot;\nstdZeroSecond = &quot;05&quot;\nstdLongYear = &quot;2006&quot;\nstdYear = &quot;06&quot;\nstdPM = &quot;PM&quot;\nstdpm = &quot;pm&quot;\nstdTZ = &quot;MST&quot;\nstdISO8601TZ = &quot;Z0700&quot; // prints Z for UTC\nstdISO8601ColonTZ = &quot;Z07:00&quot; // prints Z for UTC\nstdNumTZ = &quot;-0700&quot; // always numeric\nstdNumShortTZ = &quot;-07&quot; // always numeric\nstdNumColonTZ = &quot;-07:00&quot; // always numeric\nstdFracSecond0 = &quot;.0&quot;, &quot;.00&quot; // trailing zeros included\nstdFracSecond9 = &quot;.9&quot;, &quot;.99&quot; // trailing zeros omitted\n)\n\nReading a file\n// full file into memory\nwholeFile, err := ioutil.ReadFile(&quot;file.txt&quot;)\n\n// line-by-line\nfile, err := os.Open(&quot;file.txt&quot;)\nif err != nil { log.Fatal(err) }\ndefer file.Close()\nscanner := bufio.NewScanner(file)\nfor scanner.Scan() {\n\tfmt.Println(scanner.Text())\n}\nif err := scanner.Err(); err != nil { log.Fatal(err) }\n// by words\nscanner := bufio.NewScanner(file)\nscanner.Split(bufio.ScanWords)\nfor Scanner.Scan() {\n\tfmt.Println(scanner.Text())\n}\n\n// in chunks\nfile, err := os.Open(&quot;file.txt&quot;)\nif err != nil { log.Fatal(err) }\ndefer file.Close()\nconst chunkSize = 256\nbuffer := make([]byte, chunkSize)\nfor {\n\tn, err := file.Read(buffer)\n\tif err != nil &amp;&amp; err != io.EOF { log.Fatal(err) }\n\tif err == io.EOF { break }\n\tfmt.Println(string(buffer[:n]))\n\t// print the data like in a hex editor\n\tfmt.Printf(&quot;%s&quot;, hex.Dump(buffer))\n}\nfile.Seek(0,0) // return to beginning\nfile.Seek(6,0) // to byte 6 in file\nfile.Seek(6,1) // to byte 6 from location (=12)\noffset, err := file.Seek(6,2) // to offset=length-6\n\n// File stats\nfileinfo, err := file.Stat()\ntype FileInfo interface {\n\tName() string // base name of the file\n\tSize() int64 // length in bytes for regular files; system-dependent for others\n\tMode() FileMode // file mode bits\n\tModTime() time.Time // modification time\n\tIsDir() bool // abbreviation for Mode().IsDir()\n\tSys() any // underlying data source (can return nil)\n}\n\nCommand Line Arguments\nimport (&quot;flag&quot;)\n\n// Return values are pointers (never nil!)\nbrokerAddr := flag.String(&quot;broker&quot;, &quot;ssl://broker.hivemq.com:8883&quot;, &quot;Broker address including connection type and port&quot;)\nusername := flag.String(&quot;user&quot;, &quot;&quot;, &quot;Username for the MQTT connection (optional)&quot;)\nintervalMs := flag.Int(&quot;interval&quot;, 1000, &quot;Send interval per instance in ms&quot;)\n// Use existing variables\nvar decryptFlag bool\nflag.BoolVar(&amp;decryptFlag, &quot;d&quot;, false, &quot;decrypt the input&quot;) // shorthand\nflag.BoolVar(&amp;decryptFlag, &quot;decrypt&quot;, false, &quot;decrypt the input&quot;)\n\nflag.Usage = func() {\n\tw := flag.CommandLine.Output()\n\n\tfmt.Fprintf(w, &quot;Usage of %s:\\n&quot;, os.Args[0])\n\tfmt.Fprintln(w)\n\tconst usageStr = `Spawns a set number of clients,\nwhich send messages with random values to a MQTT broker.`\n\tfmt.Fprintln(w, usageStr)\n\tfmt.Fprintln(w)\n\n\t// Prints all flags and description text (last argument + default value)\n\tflag.PrintDefaults()\n}\n\n// fills up the variables with data from args\n// variables will get their default values (second to last argument) when ommitted\nflag.Parse()\n\n// After parsing, any unparsed flags/positional arguments can be handled\ncnt := flag.NArg()\narg := flag.Arg(i)\nfor i,v := range flag.Args() {}\n\nUsage\n\n-flag, -flag=x, --flag, --flag=x\n-flag x, --flag x (non-boolean flags only)\n\nPositional arguments are not handled as expected! Flag stops parsing on the first positional argument / unhandled flag, so named flags have to come first (while order usually does not matter).\nWorkaround: https://stackoverflow.com/a/74146375\nShorthand: Short and Long Options with Go flag standard package (antoniojgutierrez.com)\nPrinting Errors\nlog.Fatalf(&quot;ERROR: %q\\n&quot;, err)\n// Prints: 2024/10/31 15:08:52 ERROR: &quot;error message&quot;\nfmt.Printf(&quot;ERROR: %q\\n&quot;, err)\nos.Exit(1)\n// Prints: ERROR: &quot;error message&quot;\npanic(err)\n// Prints: panic: error message\\n\\n&lt;stacktrace&gt;\n// exit code 2",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Database Types",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/database-types/",
		"content": "7 Database Paradigms (youtube.com)\n1. Key-Value\nExample: Redis, Memcached\n\nEntries are just pairs of keys and values\nDatabase is usually stored in memory\nVery fast, but limited space (amount of RAM)\nNo advanced queries (e.g. join, filter), just set and get\nGood for: Caching, Pub/Sub, Highscores, unstructured data\nNot: Main/persistent app data, complex relations\n\n2. Wide-column\nExample: Cassandra, Hbase\n\nFixed columns for values\nKey -&gt; row of values\nNo schema (data types for columns is not fixed)\nQuery language is like SQL, but simpler (no join)\nScales well horizontally\nGood for: Time-series, historical records, high-write to low-read ratio\nNot: Primary app database\n\n3. Document\nExample: MongoDB, Firestore\n\nData is collection of documents\nCollections and documents can have hierarchy\nDocuments are key-value stores (unstructured, without schema)\nVery flexible in data modeling\nQuite complex on the inside\nSQL: group data by content-type (posts, comments, authors, etc.) &lt;-&gt; Mongo: group data by application\nReads can be faster (get all data for blog post from one source), but writes can be complex (update author name needs to touch all documents by that author)\nNo join, but data can be grouped into &quot;master&quot; document by references\nGood for: it is very general purpose, unstructured data\nNot: it is too general purpose, also graphs (needs join)\n\n4. Relational\nExample: MySQL, Postgres\n\nData is grouped by content-type (e.g. 3 tables for users, comments, posts)\nEach entry has its own unique key\nEntries can reference elements from other tables by these keys\nJoin fetches the data from the referenced &quot;foreign&quot; tables into one\nSchema is required (column names and data-types are fixed)\nACID complicant: atomicity, consistency, isolation, durability\nDifficult to scale\nGood for: most data\nNot: unstructured data\n\n5. Graph\nExample: Neo4j, Dgraph\n\nData is nodes, relationships are edges in a graph\nCustom query language\nNo join required, queries can be more concise\nGood for: graphs, recommendation engines\nNot: not-graphs?\n\n6. Search / Index\nExample: Elasticsearch, Lucene, Solr, Meiliserach\n\nSimilar to Document-type\nDB analyzes text in documents and creates index of searchable terms\nCan add algorithms for ranking, spell-checking, filtering, etc.\nVery fast for its main purpose (search only hits index, not all documents)\nAdds overhead, can be expensive at scale\nGood for: Search\n\n7. Multi-model\nExample: FaunaDB\n\nFrontend describes how it wants to access data in GraphQL schema\nFauna creates collections and index from schema\nUses multiple DB models in background",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Linux",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/linux/",
		"content": "Folder structure\n/bin - essential binaries for all users (like cd, bash)\n/sbin - admin system binaries\n/boot - files for booting (like the kernel)\n/dev - device files (file-like access to (virtual) hardware)\n\t/dev/sda - first SATA drive\n\t/dev/random - random number generator\n\t/dev/null - no output, discard all input\n\t/dev/zero - infinite 0s\n/etc - configuration files for programs\n/home - home folders for each user (alias ~)\n\t/home/username - also contains userspace config files\n/lib - system library files (needed for programs in /bin)\n/lost+found - corrupted files after a crash will end here\n/media - removable media (USB-Drives, CDs, etc.)\n/mnt - manual mounting points (created by admins)\n/opt - optional software\n/proc - contains info about running processes\n/root - home folder for root user\n/tmp - temporary files (no guaranteed persistance)\n/usr - user binaries and program data\n\t/usr/bin - userspace /bin (contains most programs)\n\t/usr/sbin - admin programs\n\t/usr/lib - library files\n\t/usr/share - documentation\n\t/usr/include - include files for compiling\n/var - runtime information stored by programs (logs, cache)\n\t/var/log/wtmp - login history\n\nchmod\n\nNumber\nPermission\nSum\n\n0\n– – –\n0+0+0\n\n1\n– – x\n0+0+1\n\n2\n– w –\n0+2+0\n\n3\n– w x\n0+2+1\n\n4\nr – –\n4+0+0\n\n5\nr – x\n4+0+1\n\n6\nr w –\n4+2+0\n\n7\nr w x\n4+2+1\n\nThree groups:\n\nOne permission for the owner, the person who created the file or folder.\nOne permission for all of the people in the same primary group of the owner.\nOne permission for everyone else, which includes unauthenticated and anonymous users.\n\nTo change all directories under the current path to 755 (drwxr-xr-x), excluding dotfiles (recursive):\nfind . ! -path . ! -path '*/.*' -type d -exec chmod 755 '{}' \\;\n\nTo change all files in the current path to 644 (-rw-r--r--), excluding dotfiles (recursive):\nfind . ! -path '*/.*' -type f -exec chmod 644 '{}' \\;\n\nchown\nChown Command in Linux (File Ownership) | Linuxize\nchown -R USER:GROUP ./\n\nwhich\nFind out where binary lives\nwhich curl\n\nFind process\nps -aux | grep [keyword]\n\n-a: show all processes (including root, system, etc.), not just the ones belonging to current user\nu: show in &quot;user oriented format&quot;, i.e. table with more information\nx: show background processes and daemons without controlling terminal (tty)\n\nFind text in files\ngrep -HiRn [text] [files/folders]\n\n-H: print out filename of result\n-i: ignore case\n-R: recursive search in passed folders, follow symlinks\n-n: print line-number of result\n\nFind previous command\nhistory | grep [command]\n\nFind text or files starting with minus -\nPassing arguments which starts with a minus to a tool will be usually interpreted as an option. This creates a problem when you want to delete a filename or grep text starting with a minus.\nSolution: Pass -- to signify the end of the options.\nps --help | grep -- -a\nrm -- --somefile.txt\n\nSource: https://unix.stackexchange.com/a/87357\nCompress / extract zip files\ntar -czf [filename/folder]\ntar -xzf [filename]\n\n&quot;Compres Ze File&quot; / &quot;Xtract Ze File\n\n-c: compress\n-x: extract\n-z: use gzip\n-f: use file archive\n\nShow active network connections\nnetstat -tulpen\n\n-t: show TCP connections.\n-u: show UDP connections.\n-l: list only listening sockets.\n-p: show the PID and name of the program to which each socket belongs.\n-e: display extended information, including user ID and inode.\n-n: show numerical addresses instead of resolving hostnames.\n\nShow filesystems\ndf -Thal\n\n-T: show the file system type.\n-h: display sizes in a human-readable format (e.g., KB, MB, GB).\n-a: include all file systems, even those that are not currently mounted.\n-l: limit the output to local file systems only.\n\nShow disk usage\ndu -hs *\n\n-h: display sizes in a human-readable format (e.g., KB, MB, GB).\n-s: provide a summary of the disk usage for each specified file or directory, rather than listing the usage for each individual file within directories.\n\nShow files in current folder (detailed)\nls -lisah\n\n-l: Uses a long listing format, providing detailed information about each file and directory, such as permissions, number of links, owner, group, size, and modification date.\n-i: Shows the inode number for each file and directory.\n-s: Displays the size of each file in blocks.\n-a: Includes all files, even those that are hidden (files starting with a dot .).\n-h: Displays sizes in a human-readable format (e.g., KB, MB, GB).\n\nLogrotate\n\n[!WARNING]\nDoes not work properly on CentOS6, but seems to work as intended on Ubuntu 24.04\n\nhttps://linux.die.net/man/8/logrotate\nPut a file (usually named after the program/logfile you are rotating) in /etc/logrotate.d/. For example: /etc/logrotate.d/mosquitto\n/var/log/mosquitto/mosquitto.log {\nrotate 12\nmonthly\ncompress\ndelaycompress\nsize 100k\nnocreate\nmissingok\npostrotate\nif invoke-rc.d mosquitto status &gt; /dev/null 2&gt;&amp;1; then \\\ninvoke-rc.d mosquitto reload &gt; /dev/null 2&gt;&amp;1; \\\nfi;\nendscript\n}\n\nrotate 12: keeps at most 12 versions of the file specified at the very beginning\nmonthly: rotate on first run of the month (i.e. keep one file per month), can also be daily, weekly or yearly\ncompress, delaycompress: compress rotated files after 2 rotations (i.e. keep file for current and last month uncompressed)\nsize: rotate only if size is bigger than specified limit (100k = 100KiB, 100M = 100MiB, 100G = 100Gib)\nnocreate: logrotate does not create the new log file after rotating (the original program has to do it)\nmissingok: don't raise an error if file is missing\npostrotate: what to do after rotation - we just kept the script, which was generated by mosquitto on install",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "janek.ing - Home",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "Hi!\nI am Janek, programmer / engineer / tinkerer from Cologne, Germany.\nMy passion is building software for humans that lasts, combining electronics and design into interactive pieces and creating games for various platforms. Examples for all of these are showcased on the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/projects/\">Projects page</a>.\nI have been programming for 20 years and building software professionally for close to 10. Recently I worked as a product developer and product owner for several companies creating IoT solutions.\nGrowing up in the 90s and 2000s, naturally my first &quot;programming&quot; experience was building a website for myself (using plain HTML, CSS and PHP). It showcased photos I took, cool videos I found on the web and &quot;funny&quot; jokes only me and my friends laughed about (and of course it had a forum with 2 active users, including me). It was online for a couple of years until the free webhosting provider went out of business. Nowadays the web is different, but mostly full of ads. Reading about the idea of a &quot;digital garden&quot; reminded me of the days where the web was mostly about sharing your ideas and experiences. A place of curiosity without the immediate drive to make money off everything.\nTo participate in this idea, I publish some of my notes in my <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/garden/\">Digital Garden</a>. If you find anything worthwhile or a mistake, consider leaving a comment.",
		"tags": [ "note","gardenEntry"]
},

{
		"title": "Digital Garden",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/garden/",
		"content": "I used to have a standard pencil-on-paper notebook, which I tried to take everywhere. In 2024 I discovered Obisdian, after looking at Evernote but not really liking the idea of putting all my notes in someone's cloud. 1,5 years later my vault grew to 200+ notes and I have it synced between all my devices. I still miss sketching with the pencil, but digital notes are just superior in several ways.\nThis garden will include some, but not all of my notes. I do not like publishing very rough stuff. Writing is not my strong suit, but this is an effort in getting better at it. Notes will probably start off as a list of bullet points and might grow into a more refined text later.\nIn general I will try to add the following tags:\n#knowledge-base for collections of technical information\n#opinion for when texts contain my personal opinion\n#experience for when I am talking from professional experience\n#german for texts (partly) in German (leave a comment if I should translate these)\nMy Obsidian setup:\n\nMost core plugins disabled (except for crucial ones)\nCommunity plugins: cMenu, Excalidraw, File Diff, Lazy Plugin Loader (more like a hacky workaround, but it does help somewhat)\nSyncing between devices using Syncthing\nPublishing using the Digital Garden plugin and my github-pages template",
		"tags": ["knowledge-base", "opinion", "experience", "german", "note"]
},

{
		"title": "janek.ing - Imprint",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/imprint/",
		"content": "Not necessary: https://www.e-recht24.de/impressum/13095-impressum-fuer-die-private-homepage.html#toc_3-wann-ist-eine-website-rein-privat",
		"tags": [ "note"]
},

{
		"title": "janek.ing - Project Showcase",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/projects/",
		"content": "Programming\n\nNetwork Visualizer2024-2025 • CSoftware for working with large clouds of geospatial data. Developed for visualizing and analyzing the performance of a city-wide LoRaWAN network. The main goal was to handle 1M+ datapoints in real-time. Loads 1M datapoints (a 200MB csv file) in less than a second and displays them on top of a fully-featured OpenStreetMap renderer. Analytic tools like aggregations, displaying connections to gateway stations and more. All in real-time 60+ fps. Minimal dependencies (only curl and raylib).Currently available upon request.\n\nCrank-it2023-2024 • LuaBop-it inspired game developed for the Playdate.Available on itch.ioCode on GitHub\n\nCaBiS2017 • Typescript, HTMLCandy Billing System for my work at the time. Using the general transponder used for building access as authentication and a RaspberryPi with Touchscreen for the interface. Ionic for the frontend, SQLite and node.js microservices for the backend. First time working with node, made a huge mess, but it worked at the end (so a typical Typescript project after all...?).\n\nGreyout2011-2017 • C++2D side-scrolling puzzle game developed for the OpenPandora. Realizes the concept of &quot;negative space&quot;. You control 2 characters walking in the same world, but one experiencing it in a black-on-white and one in white-on-black way. Physics-based and logic puzzles with a custom engine based on SDL. Soundtrack by Nick May.Code on GitHubVideo on YouTube\n\nSchizophrenia2012-20132D puzzle platformer where I did the art, most of the game and level design and theZiz did the code and built a whole 2D software renderer from scratch. Made for a GP2X game jam. You control a scientist that can make copies of certain entities in the world to solve puzzles. Kinda like Snapshot, although our first designs predate it.Code on GitHub\n\nPND Tools2011-2015 • DelphiThe most popular tool for creating pnd files on Windows. pnd is the container format used by the open-source handheld OpenPandora.Multi-windowed GUI with drag-and-grop support for generating a file tree, editing the xml description data and bundling it together. Easy-configuration wizard with a step-by-step guide for beginners.Code on GitHub\n\nWandor World Editor2009-2011 • DelphiLevel editor for a never released tile-based 2D side-scrolling game. Multi-Window UI with docking. Support for multiple layers, parallax scrolling background, placing entities from a database, navigating via minimap. Export to a custom file-format which uses Unicode characters and indices into the tilemap.\n\nA very simple, yet powerful JavaScript library for manual localization in browser UIs (used in projects like Soundbox and Goodnightlamp): GitHub\nSeparating Axis Theorem collision checking library for the Playdate: GitHub\nSeveral libraries for the ESP32: Captive Portal, wifiman\n\nElectronics\n\nHome Lamp2022 • C++, ESP32Re-creation of the wonderful Good Night Lamp by Alexandra Deschamps-Sonsino. Multiple lamps are connected via the internet. When one is turned on, all turn on. Send a warm light meaning &quot;good night&quot;, &quot;I just came home safe&quot; or &quot;hey, I am available to call&quot; with the press of a button. Wood and acrylic housing, custom PCB, communication via MQTT, simple web-interface for configuration. My brother an I built this as a Christmas present for our mom. It is still working great after 2+ years.Video on YouTube\n\nSoundbox2020-2023 • C++, ESP32Play popular meme sounds at the press of the button. Annoy or delight your co-workers. Let them join in on the fun via the built-in web-interface.\n\nWoodworking and Jewlery\nWooden Cube Shelf\n2023 • Bamboo\n\nLED-Strips for indirect lighting. Some cubes are compatible to IKEA Expedit accessories for additional storage options.\n\nTerrace Bench\n2021 • OSB wood panels, douglas fir 2-by-4s\n\nOur Corona project. Fits up to 6 people or 2 people lying down. Can fold out one of the side panels to create an area for a mattress.",
		"tags": [ "note"]
},

{
		"title": "Communication is Key",
		"date":"Fri May 23 2025 12:47:14 GMT+0000 (Coordinated Universal Time)",
		"url":"/work/communication-is-key/",
		"content": "Heading 2\nTest 1234\nint main(int argc, char **argv) {\n\tprintf(&quot;Hello World!\\n&quot;);\n\treturn 0;\n}\n\n#tagtest #another\nHeading 3\n\n[!WARNING] Title\nfoobar\n\nLink: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/projects/\">Projects Home</a>\nBroken Link: <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Management and Vision</a>\nAnother Heading\nTest foobar2",
		"tags": ["tagtest", "another", "note","opinion","experience"]
}
]