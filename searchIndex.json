[
{
		"title": "Databases",
		"date":"Fri May 23 2025 12:15:43 GMT+0000 (Coordinated Universal Time)",
		"url":"/tech/datenbanken/",
		"content": "7 Database Paradigms (youtube.com)\n1. Key-Value\nExample: Redis, Memcached\n\nEntries are just pairs of keys and values\nDatabase is usually stored in memory\nVery fast, but limited space (amount of RAM)\nNo advanced queries (e.g. join, filter), just set and get\nGood for: Caching, Pub/Sub, Highscores, unstructured data\nNot: Main/persistent app data, complex relations\n\n2. Wide-column\nExample: Cassandra, Hbase\n\nFixed columns for values\nKey -&gt; row of values\nNo schema (data types for columns is not fixed)\nQuery language is like SQL, but simpler (no join)\nScales well horizontally\nGood for: Time-series, historical records, high-write to low-read ratio\nNot: Primary app database\n\n3. Document\nExample: MongoDB, Firestore\n\nData is collection of documents\nCollections and documents can have hierarchy\nDocuments are key-value stores (unstructured, without schema)\nVery flexible in data modeling\nQuite complex on the inside\nSQL: group data by content-type (posts, comments, authors, etc.) &lt;-&gt; Mongo: group data by application\nReads can be faster (get all data for blog post from one source), but writes can be complex (update author name needs to touch all documents by that author)\nNo join, but data can be grouped into &quot;master&quot; document by references\nGood for: it is very general purpose, unstructured data\nNot: it is too general purpose, also graphs (needs join)\n\n4. Relational\nExample: MySQL, Postgres\n\nData is grouped by content-type (e.g. 3 tables for users, comments, posts)\nEach entry has its own unique key\nEntries can reference elements from other tables by these keys\nJoin fetches the data from the referenced &quot;foreign&quot; tables into one\nSchema is required (column names and data-types are fixed)\nACID complicant: atomicity, consistency, isolation, durability\nDifficult to scale\nGood for: most data\nNot: unstructured data\n\n5. Graph\nExample: Neo4j, Dgraph\n\nData is nodes, relationships are edges in a graph\nCustom query language\nNo join required, queries can be more concise\nGood for: graphs, recommendation engines\nNot: not-graphs?\n\n6. Search / Index\nExample: Elasticsearch, Lucene, Solr, Meiliserach\n\nSimilar to Document-type\nDB analyzes text in documents and creates index of searchable terms\nCan add algorithms for ranking, spell-checking, filtering, etc.\nVery fast for its main purpose (search only hits index, not all documents)\nAdds overhead, can be expensive at scale\nGood for: Search\n\n7. Multi-model\nExample: FaunaDB\n\nFrontend describes how it wants to access data in GraphQL schema\nFauna creates collections and index from schema\nUses multiple DB models in background",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "Linux",
		"date":"Fri May 23 2025 12:15:43 GMT+0000 (Coordinated Universal Time)",
		"url":"/technik/linux/",
		"content": "Folder structure\n/bin - essential binaries for all users (like cd, bash)\n/sbin - admin system binaries\n/boot - files for booting (like the kernel)\n/dev - device files (file-like access to (virtual) hardware)\n\t/dev/sda - first SATA drive\n\t/dev/random - random number generator\n\t/dev/null - no output, discard all input\n\t/dev/zero - infinite 0s\n/etc - configuration files for programs\n/home - home folders for each user (alias ~)\n\t/home/username - also contains userspace config files\n/lib - system library files (needed for programs in /bin)\n/lost+found - corrupted files after a crash will end here\n/media - removable media (USB-Drives, CDs, etc.)\n/mnt - manual mounting points (created by admins)\n/opt - optional software\n/proc - contains info about running processes\n/root - home folder for root user\n/tmp - temporary files (no guaranteed persistance)\n/usr - user binaries and program data\n\t/usr/bin - userspace /bin (contains most programs)\n\t/usr/sbin - admin programs\n\t/usr/lib - library files\n\t/usr/share - documentation\n\t/usr/include - include files for compiling\n/var - runtime information stored by programs (logs, cache)\n\t/var/log/wtmp - login history\n\nchmod\n\nNumber\nPermission\nSum\n\n0\n– – –\n0+0+0\n\n1\n– – x\n0+0+1\n\n2\n– w –\n0+2+0\n\n3\n– w x\n0+2+1\n\n4\nr – –\n4+0+0\n\n5\nr – x\n4+0+1\n\n6\nr w –\n4+2+0\n\n7\nr w x\n4+2+1\n\nThree groups:\n\nOne permission for the owner, the person who created the file or folder.\nOne permission for all of the people in the same primary group of the owner.\nOne permission for everyone else, which includes unauthenticated and anonymous users.\n\nTo change all directories under the current path to 755 (drwxr-xr-x), excluding dotfiles (recursive):\nfind . ! -path . ! -path '*/.*' -type d -exec chmod 755 '{}' \\;\n\nTo change all files in the current path to 644 (-rw-r--r--), excluding dotfiles (recursive):\nfind . ! -path '*/.*' -type f -exec chmod 644 '{}' \\;\n\nchown\nChown Command in Linux (File Ownership) | Linuxize\nchown -R USER:GROUP ./\n\nwhich\nFind out where binary lives\nwhich curl\n\nFind process\nps -aux | grep [keyword]\n\n-a: show all processes (including root, system, etc.), not just the ones belonging to current user\nu: show in &quot;user oriented format&quot;, i.e. table with more information\nx: show background processes and daemons without controlling terminal (tty)\n\nFind text in files\ngrep -HiRn [text] [files/folders]\n\n-H: print out filename of result\n-i: ignore case\n-R: recursive search in passed folders, follow symlinks\n-n: print line-number of result\n\nFind previous command\nhistory | grep [command]\n\nFind text or files starting with minus -\nPassing arguments which starts with a minus to a tool will be usually interpreted as an option. This creates a problem when you want to delete a filename or grep text starting with a minus.\nSolution: Pass -- to signify the end of the options.\nps --help | grep -- -a\nrm -- --somefile.txt\n\nSource: https://unix.stackexchange.com/a/87357\nCompress / extract zip files\ntar -czf [filename/folder]\ntar -xzf [filename]\n\n&quot;Compres Ze File&quot; / &quot;Xtract Ze File\n\n-c: compress\n-x: extract\n-z: use gzip\n-f: use file archive\n\nShow active network connections\nnetstat -tulpen\n\n-t: show TCP connections.\n-u: show UDP connections.\n-l: list only listening sockets.\n-p: show the PID and name of the program to which each socket belongs.\n-e: display extended information, including user ID and inode.\n-n: show numerical addresses instead of resolving hostnames.\n\nShow filesystems\ndf -Thal\n\n-T: show the file system type.\n-h: display sizes in a human-readable format (e.g., KB, MB, GB).\n-a: include all file systems, even those that are not currently mounted.\n-l: limit the output to local file systems only.\n\nShow disk usage\ndu -hs *\n\n-h: display sizes in a human-readable format (e.g., KB, MB, GB).\n-s: provide a summary of the disk usage for each specified file or directory, rather than listing the usage for each individual file within directories.\n\nShow files in current folder (detailed)\nls -lisah\n\n-l: Uses a long listing format, providing detailed information about each file and directory, such as permissions, number of links, owner, group, size, and modification date.\n-i: Shows the inode number for each file and directory.\n-s: Displays the size of each file in blocks.\n-a: Includes all files, even those that are hidden (files starting with a dot .).\n-h: Displays sizes in a human-readable format (e.g., KB, MB, GB).\n\nLogrotate\n\n[!WARNING]\nDoes not work properly on CentOS6, but seems to work as intended on Ubuntu 24.04\n\nhttps://linux.die.net/man/8/logrotate\nPut a file (usually named after the program/logfile you are rotating) in /etc/logrotate.d/. For example: /etc/logrotate.d/mosquitto\n/var/log/mosquitto/mosquitto.log {\nrotate 12\nmonthly\ncompress\ndelaycompress\nsize 100k\nnocreate\nmissingok\npostrotate\nif invoke-rc.d mosquitto status &gt; /dev/null 2&gt;&amp;1; then \\\ninvoke-rc.d mosquitto reload &gt; /dev/null 2&gt;&amp;1; \\\nfi;\nendscript\n}\n\nrotate 12: keeps at most 12 versions of the file specified at the very beginning\nmonthly: rotate on first run of the month (i.e. keep one file per month), can also be daily, weekly or yearly\ncompress, delaycompress: compress rotated files after 2 rotations (i.e. keep file for current and last month uncompressed)\nsize: rotate only if size is bigger than specified limit (100k = 100KiB, 100M = 100MiB, 100G = 100Gib)\nnocreate: logrotate does not create the new log file after rotating (the original program has to do it)\nmissingok: don't raise an error if file is missing\npostrotate: what to do after rotation - we just kept the script, which was generated by mosquitto on install",
		"tags": [ "note","knowledge-base"]
},

{
		"title": "janek.ing - Home",
		"date":"Fri May 23 2025 12:15:43 GMT+0000 (Coordinated Universal Time)",
		"url":"/",
		"content": "Hi!\nI am Janek, programmer / engineer / tinkerer from Cologne, Germany.\nMy passion is building software for humans that lasts, combining electronics and design into interactive pieces and creating games for various platforms. Examples for all of these are showcased on the <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/projects/\">Projects page</a>.\nGrowing up in the 90s and 2000s, naturally my first &quot;programming&quot; experience was building a website for myself (using plain HTML, CSS and PHP). It showcased photos I took, cool videos I found on the web and &quot;funny&quot; jokes only me and my friends laughed about (and of course it had a forum with 2 active users, including me). It was online for a couple of years until the free webhosting provider I used went out of business. Nowadays the web is different, but mostly full of ads. Reading about the idea of a &quot;digital garden&quot; reminded me of the old days where the web was mostly about sharing your ideas and experiences. A place of curiosity without the immediate drive to make money off everything.\nTo participate in this idea, I publish some of my notes in my <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/garden/\">Digital Garden</a>. If you find anything worthwhile or a mistake, consider leaving a comment.",
		"tags": [ "note","gardenEntry"]
},

{
		"title": "Digital Garden",
		"date":"Fri May 23 2025 12:15:43 GMT+0000 (Coordinated Universal Time)",
		"url":"/garden/",
		"content": "wip",
		"tags": [ "note"]
},

{
		"title": "janek.ing - Project Showcase",
		"date":"Fri May 23 2025 12:15:43 GMT+0000 (Coordinated Universal Time)",
		"url":"/projects/",
		"content": "wip",
		"tags": [ "note"]
},

{
		"title": "Communication is Key",
		"date":"Fri May 23 2025 12:15:43 GMT+0000 (Coordinated Universal Time)",
		"url":"/work/communication-is-key/",
		"content": "Heading 2\nTest 1234\nint main(int argc, char **argv) {\n\tprintf(&quot;Hello World!\\n&quot;);\n\treturn 0;\n}\n\n#tagtest #another\nHeading 3\n\n[!WARNING] Title\nfoobar\n\nLink: <a class=\"internal-link\" target=\"\" data-note-icon=\"\" href=\"/projects/\">Projects Home</a>\nBroken Link: <a class=\"internal-link is-unresolved\" href=\"/404\" target=\"\">Management and Vision</a>\nAnother Heading\nTest foobar2",
		"tags": ["tagtest", "another", "note","opinion"]
}
]