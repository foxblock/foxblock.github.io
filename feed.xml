<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://janek.ing">
    <title>janek.ing</title>
    <link href="https://janek.ing/feed.xml" rel="self" >
    <link href="https://janek.ing" >
    <updated>2025-07-27T21:52:53Z</updated>
    <id>https://janek.ing</id>
        <entry>
            <title>
                Projects Home
                
            </title>
            <updated>2025-06-06T16:19:48.664Z</updated>
            <id>https://janek.ing/projects/</id>
            <content type="html">
                &lt;h2 id=&quot;programming&quot; tabindex=&quot;-1&quot;&gt;Programming&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/2025-05-23%2012_21_03-Network%20Visualizer%20(v0.3.1-dev).png&quot; alt=&quot;2025-05-23 12_21_03-Network Visualizer (v0.3.1-dev).png&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Network Visualizer&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2024-2025 • C&lt;/em&gt;&lt;br /&gt;Software for working with large clouds of geospatial data. Developed for visualizing and analyzing the performance of a city-wide LoRaWAN network. The main goal was to handle 1M+ datapoints in real-time. Loads 1M datapoints (a 200MB csv file) in less than a second and displays them on top of a fully-featured OpenStreetMap renderer. Analytic tools like aggregations, displaying connections to gateway stations and more. All in real-time 60+ fps. Minimal dependencies (only curl and raylib).&lt;br /&gt;Currently available upon request.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/playdate-20240329-235626.gif&quot; alt=&quot;playdate-20240329-235626.gif&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Crank-it&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2023-2024 • Lua&lt;/em&gt;&lt;br /&gt;Bop-it inspired game developed for the Playdate.&lt;br /&gt;&lt;a href=&quot;https://foxblock.itch.io/crank-it&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Available on itch.io&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://github.com/foxblock/playdate-crank-it&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Code on GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/IMG_20170809_151849548.jpg&quot; alt=&quot;IMG_20170809_151849548.jpg&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;CaBiS&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2017 • Typescript, HTML&lt;/em&gt;&lt;br /&gt;Candy Billing System for my work at the time. Using the general transponder used for building access as authentication and a RaspberryPi with Touchscreen for the interface. Ionic for the frontend, SQLite and node.js microservices for the backend. First time working with node, made a huge mess, but it worked at the end (so a typical Typescript project after all...?).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/shot_20151103_213858.png&quot; alt=&quot;shot_20151103_213858.png&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Greyout&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2011-2017 • C++&lt;/em&gt;&lt;br /&gt;2D side-scrolling puzzle game developed for the OpenPandora. Realizes the concept of &amp;quot;negative space&amp;quot;. You control 2 characters walking in the same world, but one experiencing it in a black-on-white and one in white-on-black way. Physics-based and logic puzzles with a custom engine based on SDL. Soundtrack by Nick May.&lt;br /&gt;&lt;a href=&quot;https://github.com/foxblock/greyout&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Code on GitHub&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=wiD3GaFthdo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Video on YouTube&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/shot03.png&quot; alt=&quot;shot03.png&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Schizophrenia&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2012-2013&lt;/em&gt;&lt;br /&gt;2D puzzle platformer where I did the art, most of the game and level design and &lt;a href=&quot;https://github.com/theZiz&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;theZiz&lt;/a&gt; did the code and built a whole 2D software renderer from scratch. Made for a GP2X game jam. &lt;br /&gt;You control a scientist that can make copies of certain entities in the world to solve puzzles. Kinda like &lt;a href=&quot;https://www.pcgamingwiki.com/wiki/Snapshot&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Snapshot&lt;/a&gt;, although our first designs predates it.&lt;br /&gt;&lt;a href=&quot;https://github.com/foxblock/schizophrenia&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Code on GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/PNDTools%202025-05-23%2012_27_17-.png&quot; alt=&quot;PNDTools 2025-05-23 12_27_17-.png&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;PND Tools&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2011-2015 • Delphi&lt;/em&gt;&lt;br /&gt;The most popular tool for creating pnd files on Windows. pnd is the container format used by the open-source handheld &lt;a href=&quot;https://en.wikipedia.org/wiki/Pandora_(computer)&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;OpenPandora&lt;/a&gt;.&lt;br /&gt;Multi-windowed GUI with drag-and-grop support for generating a file tree, editing the xml description data and bundling it together. Easy-configuration wizard with a step-by-step guide for beginners.&lt;br /&gt;&lt;a href=&quot;https://github.com/foxblock/PNDTools&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Code on GitHub&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/mapEditorScreen06.jpg&quot; alt=&quot;mapEditorScreen06.jpg&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Wandor World Editor&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2009-2011 • Delphi&lt;/em&gt;&lt;br /&gt;Level editor for a never released tile-based 2D side-scrolling game. Multi-Window UI with docking. Support for multiple layers, parallax scrolling background, placing entities from a database, navigating via minimap. Export to a custom file-format which uses Unicode characters and indices into the tilemap.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;A very simple, yet powerful JavaScript library for manual localization in browser UIs (used in projects like Soundbox and Goodnightlamp): &lt;a href=&quot;https://github.com/foxblock/SimpleHTMLLocalizer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Separating Axis Theorem collision checking library for the Playdate: &lt;a href=&quot;https://github.com/foxblock/pd-sat-collision&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Several libraries for the ESP32: &lt;a href=&quot;https://github.com/foxblock/esp-captive-portal&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Captive Portal&lt;/a&gt;, &lt;a href=&quot;https://github.com/foxblock/wifiman&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;wifiman&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;electronics&quot; tabindex=&quot;-1&quot;&gt;Electronics&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/DSC_2353.jpg&quot; alt=&quot;DSC_2353.jpg&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Home Lamp&lt;/strong&gt;&lt;br /&gt;&lt;em&gt;2022 • C++, ESP32&lt;/em&gt;&lt;br /&gt;Re-creation of the wonderful &lt;a href=&quot;https://www.designswarm.com/good-night-lamp/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Good Night Lamp&lt;/a&gt; by Alexandra Deschamps-Sonsino. Multiple lamps are connected via the internet. When one is turned on, all turn on. Send a warm light meaning &amp;quot;good night&amp;quot;, &amp;quot;I just came home safe&amp;quot; or &amp;quot;hey, I am available to call&amp;quot; with the press of a button. Wood and acrylic housing, custom PCB, communication via MQTT, simple web-interface for configuration. My brother an I built this as a Christmas present for our mom. It is still working great after 2+ years.&lt;br /&gt;&lt;a href=&quot;https://youtu.be/uzuDoKGgP_o&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Video on YouTube&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/DSC_2698.jpg&quot; alt=&quot;DSC_2698.jpg&quot; /&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;Soundbox&lt;/strong&gt;&lt;br /&gt;2023 • C++, ESP32&lt;br /&gt;Play popular meme sounds at the press of the button. Annoy or delight your co-workers. Let them join in on the fun via the built-in web-interface.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;woodworking-and-jewlery&quot; tabindex=&quot;-1&quot;&gt;Woodworking and Jewlery&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Wooden Cube Shelf&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;2023 • Bamboo&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/DSC_2492.jpg&quot; alt=&quot;DSC_2492.jpg|355&quot; width=&quot;355px&quot; /&gt; &lt;img src=&quot;https://janek.ing/img/user/_attachments/DSC_2922.jpg&quot; alt=&quot;DSC_2922.jpg|200&quot; width=&quot;200px&quot; /&gt;&lt;br /&gt;
LED-Strips for indirect lighting. Some cubes are compatible to IKEA Expedit accessories for additional storage options.&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Terrace Bench&lt;/strong&gt;&lt;br /&gt;
&lt;em&gt;2021 • OSB wood panels, douglas fir 2-by-4s&lt;/em&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/DSC_0443.jpg&quot; alt=&quot;DSC_0443.jpg&quot; /&gt;&lt;br /&gt;
Our Corona project. Fits up to 6 people or 2 people lying down. Can fold out one of the side panels to create an area for a mattress.&lt;/p&gt;

            </content>
            <link href="https://janek.ing/projects/" >
        </entry>
        <entry>
            <title>
                Imprint
                
            </title>
            <updated>2025-05-13T08:42:08.367Z</updated>
            <id>https://janek.ing/imprint/</id>
            <content type="html">
                &lt;p&gt;Not necessary: &lt;a href=&quot;https://www.e-recht24.de/impressum/13095-impressum-fuer-die-private-homepage.html#toc_3-wann-ist-eine-website-rein-privat&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.e-recht24.de/impressum/13095-impressum-fuer-die-private-homepage.html#toc_3-wann-ist-eine-website-rein-privat&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/imprint/" >
        </entry>
        <entry>
            <title>
                Garden Home
                
            </title>
            <updated>2025-05-24T09:38:59.207Z</updated>
            <id>https://janek.ing/garden/</id>
            <content type="html">
                &lt;p&gt;I used to have a standard pencil-on-paper notebook, which I tried to take everywhere. In 2024 I discovered Obisdian, after looking at Evernote but not really liking the idea of putting all my notes in someone&#39;s cloud. 1,5 years later my vault grew to 200+ notes and I have it synced between all my devices. I still miss sketching with the pencil, but digital notes are just superior in several ways.&lt;/p&gt;
&lt;p&gt;This garden will include some, but not all of my notes. I do not like publishing very rough stuff. Writing is not my strong suit, but this is an effort in getting better at it. Notes will probably start off as a list of bullet points and might grow into a more refined text later.&lt;/p&gt;
&lt;p&gt;In general I will try to add the following tags:&lt;br /&gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#knowledge-base&quot;&gt;#knowledge-base&lt;/a&gt; for collections of technical information&lt;br /&gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#opinion&quot;&gt;#opinion&lt;/a&gt; for when texts contain my personal opinion&lt;br /&gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#experience&quot;&gt;#experience&lt;/a&gt; for when I am talking from professional experience&lt;br /&gt;
&lt;a class=&quot;tag&quot; onclick=&quot;toggleTagSearch(this)&quot; data-content=&quot;#german&quot;&gt;#german&lt;/a&gt; for texts (partly) in German (leave a comment if I should translate these)&lt;/p&gt;
&lt;p&gt;My Obsidian setup:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Most core plugins disabled (except for crucial ones)&lt;/li&gt;
&lt;li&gt;Community plugins: cMenu, Excalidraw, File Diff, Lazy Plugin Loader (more like a hacky workaround, but it does help somewhat)&lt;/li&gt;
&lt;li&gt;Syncing between devices using &lt;a href=&quot;https://syncthing.net/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Syncthing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Publishing using the &lt;a href=&quot;https://dg-docs.ole.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Digital Garden plugin&lt;/a&gt; and my &lt;a href=&quot;https://github.com/foxblock/digitalgarden_gh-pages&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;github-pages template&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/garden/" >
        </entry>
        <entry>
            <title>
                About Main Home
                
            </title>
            <updated>2025-07-02T21:39:06.666Z</updated>
            <id>https://janek.ing/</id>
            <content type="html">
                &lt;h1 id=&quot;hi&quot; tabindex=&quot;-1&quot;&gt;Hi!&lt;/h1&gt;
&lt;p&gt;I am Janek, programmer / engineer / tinkerer from Cologne, Germany.&lt;/p&gt;
&lt;p&gt;My passion is building software for humans that lasts, combining electronics and design into interactive pieces and creating games for various platforms. Examples for all of these are showcased on the &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/projects/&quot;&gt;Projects page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I have been programming for 20 years and building software professionally for close to 10. Recently I worked as a product developer and product owner for several companies creating IoT solutions.&lt;/p&gt;
&lt;p&gt;Growing up in the 90s and 2000s, naturally my first &amp;quot;programming&amp;quot; experience was building a website for myself (using plain HTML, CSS and PHP). It showcased photos I took, cool videos I found on the web and &amp;quot;funny&amp;quot; jokes only me and my friends laughed about (and of course it had a forum with 2 active users, including me). It was online for a couple of years until the free webhosting provider went out of business. Nowadays the web is different, but mostly full of ads. Reading about the idea of a &lt;a href=&quot;https://maggieappleton.com/garden-history/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&amp;quot;digital garden&amp;quot;&lt;/a&gt; reminded me of the days where the web was mostly about sharing your ideas and experiences. A place of curiosity without the immediate drive to make money off everything.&lt;/p&gt;
&lt;p&gt;To participate in this idea, I publish some of my notes in my &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/garden/&quot;&gt;Digital Garden&lt;/a&gt;. If you find anything worthwhile or a mistake, consider leaving a comment.&lt;/p&gt;

            </content>
            <link href="https://janek.ing/" >
        </entry>
        <entry>
            <title>
                Windows
                
            </title>
            <updated>2025-06-08T10:59:58.023Z</updated>
            <id>https://janek.ing/tech/windows/</id>
            <content type="html">
                &lt;h2 id=&quot;md-5-sha-berechnen&quot; tabindex=&quot;-1&quot;&gt;MD5, SHA berechnen&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: SHA1 by default
certutil -hashfile filename
certutil -hashfile filename MD5
certutil -hashfile filename SHA512
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# SHA256 by default
get-filehash filename
get-filehash -Algorithm MD5 filename
# print only hash
(get-filehash -Algorithm SHA512 filename).Hash
# Vergleich mit Prüfsummendatei im Format &amp;quot;Hash Dateiname&amp;quot;
# (z.B. https://dotnetcli.blob.core.windows.net/dotnet/checksums/8.0.0-sha.txt)
(Get-Content .&#92;checksums.txt | Select-String &amp;quot;filename&amp;quot;).Line -like (Get-FileHash .&#92;filename -Algorithm SHA512).Hash + &amp;quot;*&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://technastic.com/check-md5-checksum-hash/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://technastic.com/check-md5-checksum-hash/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;soft-hardlinks-ntfs&quot; tabindex=&quot;-1&quot;&gt;Soft-/Hardlinks (NTFS)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: Symbolic link (regular link)
mklink &amp;quot;Target link file&amp;quot; &amp;quot;Source file&amp;quot;
mklink /d &amp;quot;Target link folder&amp;quot; &amp;quot;Source folder&amp;quot;
:: Hardlink (appears as normal file, but content is synced)
mklink /h &amp;quot;Target link file&amp;quot; &amp;quot;Source file&amp;quot;
:: Junction (folder appears as being in both places)
mklink /j &amp;quot;Target link folder&amp;quot; &amp;quot;Source folder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Naming of parameters is from the eyes of the link
New-Item -ItemType SymbolicLink -Path &amp;quot;Target link&amp;quot; -Target &amp;quot;Source file/folder&amp;quot;
New-Item -ItemType Hardlink -Path &amp;quot;Target link&amp;quot; -Target &amp;quot;Source file&amp;quot;
New-Item -ItemType Junction -Path &amp;quot;Target link&amp;quot; -Target &amp;quot;Source folder&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] Deleting&lt;br /&gt;
Deleting the source file/folder will invalidate all links. Deleting the link will not remove the source file (even in the case of hardlinks/junctions).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www-tenforums-com.translate.goog/tutorials/131182-create-soft-hard-symbolic-links-windows.html?_x_tr_sl=en&amp;amp;_x_tr_tl=de&amp;amp;_x_tr_hl=de&amp;amp;_x_tr_pto=tc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www-tenforums-com.translate.goog/tutorials/131182-create-soft-hard-symbolic-links-windows.html?_x_tr_sl=en&amp;amp;_x_tr_tl=de&amp;amp;_x_tr_hl=de&amp;amp;_x_tr_pto=tc&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;fenster-off-screen&quot; tabindex=&quot;-1&quot;&gt;Fenster off screen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Windows + Linke/Rechte Pfeiltaste (Verschiebt Fenster in linke/rechte Bildschirmhälfte)&lt;br /&gt;
Manchmal hilft dies nicht, dann aber das Folgende:&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240405092616.png&quot; alt=&quot;Pasted image 20240405092616.png&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Maus eine kurze Zeit über Icon auf der Taskleiste halten -&amp;gt; Rechtsklick auf die Fenster-Vorschau (nicht das Icon in der Taskleiste)&lt;/li&gt;
&lt;li&gt;Klick auf Verschieben&lt;/li&gt;
&lt;li&gt;Eine Pfeiltaste drücken&lt;/li&gt;
&lt;li&gt;Maus bewegen -&amp;gt; Fenster klebt an der Maus&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;reboot-to-bios&quot; tabindex=&quot;-1&quot;&gt;Reboot to bios&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;shutdown /r /fw /t 0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;wlan-schluessel-anzeigen&quot; tabindex=&quot;-1&quot;&gt;WLAN Schlüssel anzeigen&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;netsh wlan show profile WIFI_NAME key=clear
netsh wlan show profile WIFI_NAME key=clear | findstr Schlüssel
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;nuetzliche-pfade&quot; tabindex=&quot;-1&quot;&gt;Nützliche Pfade&lt;/h2&gt;
&lt;p&gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/langauges/batch/#useful-windows-variables&quot;&gt;Batch#Useful Windows variables&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;icons-fuer-verknuepfungen&quot; tabindex=&quot;-1&quot;&gt;Icons für Verknüpfungen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;shell32.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;imageres.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;pifmgr.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;wmploc.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;moricons.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;mmres.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;wpdshext.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;DDORes.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;IEframe.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;networkexplorer.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;Explorer.exe&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;accessibilitycpl.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Windows&#92;System32&#92;mmcndmgr.dll&lt;/li&gt;
&lt;li&gt;C:&#92;Program Files (x86)&#92;Internet Explorer&#92;iexplore.exe&lt;/li&gt;
&lt;li&gt;C:&#92;Program Files&#92;Windows NT&#92;Accessories&#92;wordpad.exe&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;portable-programme-in-startmenue-suche&quot; tabindex=&quot;-1&quot;&gt;Portable Programme in Startmenü Suche&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Indizierungsoptionen aufrufen (am Einfachsten über die Suche)&lt;/li&gt;
&lt;li&gt;Ändern &amp;gt; Überordner der Portable Programme hinzufügen&lt;/li&gt;
&lt;li&gt;OK &amp;gt; Schließen&lt;/li&gt;
&lt;li&gt;Sobald Indizierung abgeschlossen ist, findet die Suche im Startmenü auch die portable exe Dateien in den Ordnern&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING] Bekannte Probleme&lt;br /&gt;
Dies scheint nicht mit dem Ordner &lt;code&gt;%userprofile%&#92;AppData&#92;Local&#92;Programs&lt;/code&gt; zu funktionieren. AppData ist standardmäßig von der Indizierung ausgeschlossen, aber selbst wenn man ihn manuell wieder aktiviert, findet die Suche Portable Apps in diesem Ordner nicht.&lt;br /&gt;
-&amp;gt; Empfehlung: Portable Apps in &lt;code&gt;C:&#92;tools&#92;&lt;/code&gt; (o.ä.) platzieren&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;alte-programme-aus-suche-entfernen&quot; tabindex=&quot;-1&quot;&gt;Alte Programme aus Suche entfernen&lt;/h2&gt;
&lt;p&gt;Wenn alte, längst deinstallierte Verknüpfungen und Programme in der Startmenü Suche angezeigt werden, ist ein veralteter Suchindex dafür verantwortlich.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Indizierungsoptionen aufrufen&lt;/li&gt;
&lt;li&gt;Erweitert &amp;gt; Tab &amp;quot;Indexeinstellungen&amp;quot; &amp;gt; Gruppe &amp;quot;Problembehandlung&amp;quot; &amp;gt; Button &amp;quot;Neu erstellen&amp;quot; klicken&lt;/li&gt;
&lt;li&gt;Der Suchindex wird damit komplett gelöscht und neu erstellt (dies kann einige Minuten dauern).&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;herausfinden-welches-programm-loeschen-oder-schliessen-verhindert&quot; tabindex=&quot;-1&quot;&gt;Herausfinden, welches Programm Löschen oder Schließen verhindert&lt;/h2&gt;
&lt;p&gt;Ressourcenmonitor &amp;gt; CPU Tab &amp;gt; Zugeordnete Handles nach Datei oder Pfad durchsuchen&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/GsjZsFKXEAAw9I1.jpg&quot; alt=&quot;GsjZsFKXEAAw9I1.jpg&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;alte-programme-finden-schriftarten-nicht&quot; tabindex=&quot;-1&quot;&gt;Alte Programme finden Schriftarten nicht&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Schriftarten werden by default unter Windows 10/11 nur für den Benutzer unter &lt;code&gt;%userprofile%&#92;AppData&#92;Local&#92;Microsoft&#92;Windows&#92;Fonts&lt;/code&gt; installiert&lt;/li&gt;
&lt;li&gt;Alte Programme listen nur Schriftarten auf, welche unter &lt;code&gt;C:&#92;Windows&#92;Fonts&lt;/code&gt; installiert sind&lt;/li&gt;
&lt;li&gt;Lösung: Rechtsklick auf Schriftart -&amp;gt; &lt;code&gt;Für alle Benutzer installieren&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/tech/windows/" >
        </entry>
        <entry>
            <title>
                Platinendesign
                
            </title>
            <updated>2025-05-24T10:56:00.745Z</updated>
            <id>https://janek.ing/tech/platinendesign/</id>
            <content type="html">
                &lt;h2 id=&quot;lessons-learned&quot; tabindex=&quot;-1&quot;&gt;Lessons Learned&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kleine blanke Fläche der Ground Plane am Rand für GND-Klammer des Oszilloskops&lt;/li&gt;
&lt;li&gt;Probe Points vorsehen
&lt;ul&gt;
&lt;li&gt;Blanke punkte and allen wichtigen Signalen und Spannungsleveln&lt;/li&gt;
&lt;li&gt;besser (wenn platz): Pin-Header, damit man einfach festes Kabel anschließen kann&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Glättungskondensatoren vorsehen
&lt;ul&gt;
&lt;li&gt;an allen wichtigen Spannungsleveln (extern wie intern), insbesondere Quellspannung für CPU/MC&lt;/li&gt;
&lt;li&gt;man kennt nie die Qualität des einkommenden Spannungslevels und muss ggf. Schwankungen ausgleichen, um Brownouts zu verhindern.&lt;/li&gt;
&lt;li&gt;Meist reichen 10µF aus, ggf. zusätzlich 100nF für sehr kleine Schwankungen&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://arduino.stackexchange.com/a/76692&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://arduino.stackexchange.com/a/76692&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;ggf. auch hinter MOSFET, um Ripple zur Schaltvorgang auszugleichen (hier eher 100nF, damit nicht zu viel geglättet wird)&lt;/li&gt;
&lt;li&gt;Zumindest auf Platine vorsehen, könnten dann auch nur optional bestückt werden&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SD-Karte: Spannungsversorgung über GPIO schaltbar machen
&lt;ul&gt;
&lt;li&gt;Karte kann crashen und nur durch Power-Cycle rebootet werden&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/tech/platinendesign/" >
        </entry>
        <entry>
            <title>
                Op-Amps
                
            </title>
            <updated>2025-05-24T10:55:37.446Z</updated>
            <id>https://janek.ing/tech/op-amps/</id>
            <content type="html">
                &lt;h2 id=&quot;grundlagen&quot; tabindex=&quot;-1&quot;&gt;Grundlagen&lt;/h2&gt;
&lt;style&gt; .container {font-family: sans-serif; text-align: center;} .button-wrapper button {z-index: 1;height: 40px; width: 100px; margin: 10px;padding: 5px;} .excalidraw .App-menu_top .buttonList { display: flex;} .excalidraw-wrapper { height: 800px; margin: 50px; position: relative;} :root[dir=&quot;ltr&quot;] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left {transform: none;} &lt;/style&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react@17/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom@17/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/@excalidraw/excalidraw@0/dist/excalidraw.production.min.js&quot;&gt;&lt;/script&gt;&lt;div id=&quot;Op-Amps_2024-05-15_1011.53.excalidraw.md1&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(){const InitialData={&quot;type&quot;:&quot;excalidraw&quot;,&quot;version&quot;:2,&quot;source&quot;:&quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.17&quot;,&quot;elements&quot;:[{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:76,&quot;versionNonce&quot;:687317703,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;7SaDS1CJj0XJVtyXWOvih&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-94.375,&quot;y&quot;:-299.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:109,&quot;height&quot;:121,&quot;seed&quot;:492923689,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,6],[0,14],[0,22],[0,33],[0,48],[0,60],[0,70],[1,79],[1,82],[1,86],[1,91],[1,94],[1,98],[1,102],[1,106],[1,108],[1,114],[1,116],[1,119],[0,121],[11,113],[18,108],[26,105],[32,100],[39,96],[45,92],[49,88],[53,85],[62,80],[67,75],[70,74],[73,71],[78,68],[82,67],[83,66],[85,64],[87,63],[89,62],[91,61],[95,60],[101,57],[103,56],[108,55],[109,54],[97,48],[90,45],[84,43],[74,39],[71,37],[62,34],[54,29],[45,25],[41,22],[35,20],[30,16],[25,14],[21,11],[18,9],[15,8],[10,6],[6,2],[3,0],[1,0],[1,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:1037963561,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;ZHQ8ZiD4EHjR56Zmxdq-D&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-136.375,&quot;y&quot;:-267.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:37,&quot;height&quot;:2,&quot;seed&quot;:1776790761,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[6,-1],[17,-1],[26,-2],[29,-2],[33,-2],[34,-2],[35,-2],[36,-2],[37,-2],[37,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:598061543,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;vQuUXN8MKDbqJuEHDAjPE&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-137.375,&quot;y&quot;:-211.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:41,&quot;height&quot;:2,&quot;seed&quot;:693822025,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[3,0],[4,0],[18,0],[26,0],[31,0],[33,0],[36,-1],[38,-1],[39,-1],[40,-1],[41,-1],[41,-2],[41,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:21,&quot;versionNonce&quot;:939842823,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Ix9O6Si6Y96m71aRRjWS9&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:10.625,&quot;y&quot;:-246.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:46,&quot;height&quot;:2,&quot;seed&quot;:1211433543,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[11,0],[16,0],[22,0],[29,0],[34,-1],[42,-2],[45,-2],[46,-2],[46,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:35,&quot;versionNonce&quot;:1560845033,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;P45bC0kTfblpkNlSDLq1G&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-48.375,&quot;y&quot;:-334.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:5,&quot;height&quot;:59,&quot;seed&quot;:888254407,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[1,4],[1,8],[2,12],[2,15],[3,19],[4,23],[4,27],[5,29],[5,33],[5,36],[5,40],[5,43],[5,45],[5,47],[5,48],[5,50],[5,51],[5,52],[5,53],[5,55],[5,57],[5,59],[5,59]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:30,&quot;versionNonce&quot;:1234281511,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;TfzQ2QvRXCpySd2YRNlnu&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-42.375,&quot;y&quot;:-211.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:3,&quot;height&quot;:63,&quot;seed&quot;:689276167,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,3],[1,8],[2,12],[2,16],[2,19],[2,26],[2,33],[3,36],[3,46],[3,49],[3,52],[3,53],[3,54],[3,55],[3,56],[3,61],[3,62],[3,63],[3,63]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:20,&quot;versionNonce&quot;:216487369,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;p6AV_m4vTXG0QsL4yEZY2&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-80.375,&quot;y&quot;:-264.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:14,&quot;height&quot;:2,&quot;seed&quot;:1972495815,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919132,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[5,-1],[8,-1],[9,-2],[10,-2],[11,-2],[12,-2],[13,-2],[14,-2],[14,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:20,&quot;versionNonce&quot;:406357831,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;3EalOqUI3R-Vsvp4TcKLn&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-74.375,&quot;y&quot;:-275.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0,&quot;height&quot;:16,&quot;seed&quot;:721940519,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,3],[0,6],[0,9],[0,11],[0,13],[0,14],[0,15],[0,16],[0,16]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:183219369,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Jma1ttNIO70GuC3K4tNYB&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-81.375,&quot;y&quot;:-219.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:14,&quot;height&quot;:0,&quot;seed&quot;:1424307847,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[4,0],[5,0],[6,0],[7,0],[8,0],[9,0],[10,0],[11,0],[13,0],[14,0],[14,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:22,&quot;versionNonce&quot;:844498535,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;S9vjZn2-1dduHj4enJWLs&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-59.375,&quot;y&quot;:-367.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0,&quot;height&quot;:12,&quot;seed&quot;:598961735,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,2],[0,4],[0,6],[0,7],[0,8],[0,9],[0,10],[0,11],[0,12],[0,12]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:17,&quot;versionNonce&quot;:1254176649,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;SZXib8LH0mkdq3rWZeeCQ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-66.375,&quot;y&quot;:-362.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:17,&quot;height&quot;:0,&quot;seed&quot;:1193609959,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[6,0],[13,0],[16,0],[17,0],[17,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:33,&quot;versionNonce&quot;:649503111,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;u-uCUNR-RfFVX-6uA4Hax&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-43.375,&quot;y&quot;:-371.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:19,&quot;height&quot;:23,&quot;seed&quot;:1909355495,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[2,6],[6,11],[8,14],[8,15],[8,16],[8,17],[8,18],[8,19],[9,19],[9,17],[10,15],[11,12],[12,10],[13,7],[15,2],[17,1],[17,-1],[18,-2],[19,-3],[19,-4],[19,-4]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:18,&quot;versionNonce&quot;:1050893929,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Vq-gIbCmg8l6y_hME2Rvi&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-59.375,&quot;y&quot;:-120.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:11,&quot;height&quot;:2,&quot;seed&quot;:1567928039,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[3,-1],[4,-1],[5,-1],[6,-1],[11,-2],[11,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:35,&quot;versionNonce&quot;:1989597351,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;4ygLD94iZBX3KPoSLFLri&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-38.375,&quot;y&quot;:-133.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:24,&quot;height&quot;:21,&quot;seed&quot;:1948025607,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,2],[3,5],[4,8],[6,11],[9,14],[9,15],[9,16],[9,17],[9,18],[9,19],[9,20],[11,19],[15,16],[16,13],[17,11],[19,7],[20,6],[21,4],[22,3],[23,1],[23,0],[23,-1],[24,-1],[24,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:37,&quot;versionNonce&quot;:1201875911,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;8pfAdMw-Z29yJ6wIzT472&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:109.625,&quot;y&quot;:-238.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:13,&quot;height&quot;:17,&quot;seed&quot;:1105839751,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,0],[-2,1],[-3,3],[-5,5],[-6,8],[-5,14],[-2,16],[-1,17],[0,17],[3,17],[4,17],[5,16],[7,14],[7,12],[7,10],[7,8],[7,7],[6,6],[5,5],[5,4],[4,3],[3,3],[1,2],[-1,1],[-1,0],[-1,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:17,&quot;versionNonce&quot;:1442323175,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;XxhTuuJYdy_6ejq5Zqi14&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-158.375,&quot;y&quot;:-262.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:4,&quot;height&quot;:12,&quot;seed&quot;:1662205671,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[2,2],[3,6],[4,11],[4,12],[4,12]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:18,&quot;versionNonce&quot;:962112265,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;WfH7ekManJ8IIUzDDBsyv&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-162.375,&quot;y&quot;:-253.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:12,&quot;height&quot;:2,&quot;seed&quot;:1430824935,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,-1],[3,-1],[7,-1],[10,-1],[12,-1],[12,-2],[12,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:31,&quot;versionNonce&quot;:639772167,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;MPBOt5eqPMf8QndWPdVAY&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-178.375,&quot;y&quot;:-216.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:21,&quot;height&quot;:18,&quot;seed&quot;:870341639,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,3],[2,7],[2,10],[3,14],[4,15],[6,16],[7,16],[9,16],[11,16],[13,14],[13,13],[14,11],[14,9],[15,6],[15,2],[15,-1],[20,-1],[21,-2],[21,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:1075517097,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Is21ciaS4jP5iIsZnliki&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-156.375,&quot;y&quot;:-200.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:12,&quot;height&quot;:0,&quot;seed&quot;:1820425415,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761955925,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[4.8,0],[7.199999999999999,0],[12,0],[12,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:44,&quot;versionNonce&quot;:1998441767,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;qQabojzUcjAz9tGtvQJkw&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-190.375,&quot;y&quot;:-280.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:25,&quot;height&quot;:25,&quot;seed&quot;:1132246247,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919133,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,5],[1,10],[2,13],[2,14],[3,16],[4,19],[4,20],[5,21],[5,24],[5,25],[6,25],[7,25],[8,25],[10,23],[10,22],[12,21],[13,19],[14,18],[15,16],[15,12],[15,9],[15,6],[15,5],[15,4],[18,4],[20,4],[22,3],[22,2],[24,1],[25,1],[25,0],[25,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:39,&quot;versionNonce&quot;:1817066697,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;HhEljZAcZLM6XG4UyyVzS&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:73.625,&quot;y&quot;:-256.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:26,&quot;height&quot;:21,&quot;seed&quot;:2017758791,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[4,13],[5,16],[5,18],[7,20],[7,21],[8,21],[10,21],[12,21],[13,21],[14,21],[15,20],[16,19],[18,18],[18,17],[18,15],[17,10],[15,7],[15,4],[14,2],[15,2],[16,3],[18,3],[19,3],[21,3],[23,3],[25,3],[26,3],[26,3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;line&quot;,&quot;version&quot;:41,&quot;versionNonce&quot;:1951895623,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;bNpB6Tyo6Dwvvh8iQs23H&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:336.625,&quot;y&quot;:-370.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:6,&quot;height&quot;:285,&quot;seed&quot;:626077479,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:null,&quot;endBinding&quot;:null,&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:null,&quot;points&quot;:[[0,0],[6,285]]},{&quot;type&quot;:&quot;line&quot;,&quot;version&quot;:69,&quot;versionNonce&quot;:1256045481,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;rBYbc1rUKutDsxtLgWE1C&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:175.625,&quot;y&quot;:-225.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:340,&quot;height&quot;:2,&quot;seed&quot;:453831687,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:null,&quot;endBinding&quot;:null,&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:null,&quot;points&quot;:[[0,0],[340,-2]]},{&quot;type&quot;:&quot;line&quot;,&quot;version&quot;:46,&quot;versionNonce&quot;:665579367,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;4AT4g1SL3r4nWw6QBayeB&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:285.625,&quot;y&quot;:-137.2421875,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:114,&quot;height&quot;:191,&quot;seed&quot;:870002793,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:null,&quot;endBinding&quot;:null,&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:null,&quot;points&quot;:[[0,0],[114,-191]]},{&quot;type&quot;:&quot;line&quot;,&quot;version&quot;:32,&quot;versionNonce&quot;:1826250377,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;cPFlwRAs5tSy356mrzPyA&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:399.625,&quot;y&quot;:-327.2421875,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:100,&quot;height&quot;:1,&quot;seed&quot;:405819369,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:null,&quot;endBinding&quot;:null,&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:null,&quot;points&quot;:[[0,0],[100,-1]]},{&quot;type&quot;:&quot;line&quot;,&quot;version&quot;:30,&quot;versionNonce&quot;:728197767,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;sJPsRZYueDn5Q7RpwqAkH&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:286.625,&quot;y&quot;:-137.2421875,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:134,&quot;height&quot;:2,&quot;seed&quot;:177445673,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:null,&quot;endBinding&quot;:null,&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:null,&quot;points&quot;:[[0,0],[-134,2]]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:31,&quot;versionNonce&quot;:1266005191,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;DfF4O_wfijR5_lv5jxUwr&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:345.625,&quot;y&quot;:-382.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:20,&quot;height&quot;:20,&quot;seed&quot;:1306513991,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[1,4],[3,8],[5,14],[6,15],[7,16],[9,17],[13,17],[14,17],[15,15],[15,14],[15,11],[16,7],[16,5],[16,3],[16,2],[15,1],[15,0],[15,-1],[18,-1],[20,-2],[20,-3],[20,-3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:36,&quot;versionNonce&quot;:394403625,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;TVT3el1-7b4UWSqvhBRhu&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:370.625,&quot;y&quot;:-373.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:9,&quot;height&quot;:8,&quot;seed&quot;:211922023,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,0],[-1,1],[-1,2],[-1,3],[-1,4],[-1,6],[-1,7],[0,7],[0,8],[2,8],[3,8],[4,8],[5,8],[6,8],[7,8],[8,8],[8,7],[8,5],[7,4],[7,3],[6,3],[6,2],[5,2],[5,1],[4,1],[4,0],[3,0],[3,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:32,&quot;versionNonce&quot;:814842855,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;P_rLMSn5BHmS-sOZKcLW2&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:486.625,&quot;y&quot;:-209.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:19,&quot;height&quot;:17,&quot;seed&quot;:632385063,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,3],[0,6],[1,10],[1,12],[4,16],[5,17],[6,17],[7,17],[8,17],[9,17],[10,15],[11,13],[11,12],[12,10],[13,8],[14,7],[14,5],[14,2],[14,0],[16,0],[18,0],[19,0],[19,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:13,&quot;versionNonce&quot;:729884905,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;AWS3TbcOmptV4mL_edvg1&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:507.625,&quot;y&quot;:-193.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:10,&quot;height&quot;:0,&quot;seed&quot;:1450130057,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919134,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[4,0],[5,0],[6,0],[9,0],[10,0],[10,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:16,&quot;versionNonce&quot;:657520167,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;pxJ6oV3xJilQFVyxCLRUL&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:514.625,&quot;y&quot;:-198.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:13,&quot;seed&quot;:65161321,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,0],[-1,1],[-1,2],[-1,4],[-1,9],[0,10],[0,11],[0,12],[0,13],[0,13]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:10,&quot;versionNonce&quot;:1495147465,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;fn2nMYwo8fyKx_W_jpS0K&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:532.625,&quot;y&quot;:-200.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:10,&quot;height&quot;:1,&quot;seed&quot;:82907881,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[4,0],[9,-1],[10,-1],[10,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:24,&quot;versionNonce&quot;:1780324679,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;lI1bvrI-PHWo3-0DrQek4&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:554.625,&quot;y&quot;:-210.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:16,&quot;height&quot;:22,&quot;seed&quot;:1165627433,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,18],[1,20],[3,20],[5,21],[6,21],[7,20],[10,17],[10,15],[11,12],[11,6],[11,4],[11,2],[11,1],[11,0],[11,-1],[14,-1],[16,-1],[16,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:10,&quot;versionNonce&quot;:1774770279,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;CpVQajPd3mb560Ve3PrpX&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:571.625,&quot;y&quot;:-189.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:6,&quot;height&quot;:1,&quot;seed&quot;:480155879,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[5,0],[6,0],[6,-1],[6,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:31,&quot;versionNonce&quot;:370967945,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;nl0j6BR8-vjAUnYW2l1nj&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:368.625,&quot;y&quot;:-273.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:24,&quot;height&quot;:41,&quot;seed&quot;:1420607785,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[9,0],[14,0],[19,0],[20,0],[22,0],[23,0],[24,0],[24,-2],[24,-10],[24,-13],[24,-17],[24,-21],[24,-23],[24,-26],[24,-28],[24,-30],[24,-33],[24,-34],[24,-35],[24,-36],[24,-37],[24,-39],[24,-40],[24,-41],[24,-41]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:1275016071,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;8xaLePiTWsqnquATX4fKj&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:402.625,&quot;y&quot;:-284.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:21,&quot;height&quot;:22,&quot;seed&quot;:461601193,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[0,-2],[1,-4],[2,-7],[5,-10],[6,-14],[7,-16],[8,-18],[8,-19],[8,-20],[8,-22],[9,-22],[10,-22],[12,-19],[14,-14],[18,-8],[19,-6],[20,-5],[21,-4],[21,-3],[21,-2],[21,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:12,&quot;versionNonce&quot;:1566895209,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;KGycoYG4E4vnLhxUFAs8_&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:408.625,&quot;y&quot;:-290.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:9,&quot;height&quot;:0,&quot;seed&quot;:850759337,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[4,0],[6,0],[7,0],[8,0],[9,0],[9,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:15,&quot;versionNonce&quot;:1224551079,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;bOU6SQe2ylpknhIP9FrYP&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:328.625,&quot;y&quot;:-330.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:0,&quot;seed&quot;:1990129801,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[5,0],[7,0],[8,0],[10,0],[11,0],[12,0],[13,0],[15,0],[15,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:15,&quot;versionNonce&quot;:817723209,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;kRt3oTAuX6LK7Wbk4Scs0&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:284.625,&quot;y&quot;:-337.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:14,&quot;seed&quot;:915051273,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,0],[-1,1],[-1,5],[0,8],[0,10],[0,11],[0,12],[0,13],[0,14],[0,14]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:1567571399,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Wzn1ypjLhjWABcq00yXx7&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:278.625,&quot;y&quot;:-331.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:11,&quot;height&quot;:0,&quot;seed&quot;:1286761865,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[3,0],[5,0],[7,0],[9,0],[11,0],[11,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:29,&quot;versionNonce&quot;:1652663849,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;yldZF963rn8saNo36UPBp&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:294.625,&quot;y&quot;:-343.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:19,&quot;height&quot;:28,&quot;seed&quot;:565548169,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[4,11],[5,13],[7,18],[8,19],[8,20],[8,22],[8,23],[8,24],[8,25],[9,25],[9,26],[9,27],[9,28],[10,28],[10,25],[12,21],[13,17],[14,14],[16,11],[17,7],[18,6],[19,4],[19,2],[19,2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:12,&quot;versionNonce&quot;:1014099175,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;CSHfcR7cKtDLI0xCNvDKv&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:335.625,&quot;y&quot;:-135.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:12,&quot;height&quot;:0,&quot;seed&quot;:1426389833,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[5,0],[6,0],[9,0],[11,0],[12,0],[12,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:1839003913,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;gGF3tZwmdii_L4t5OmorR&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:359.625,&quot;y&quot;:-136.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:10,&quot;height&quot;:1,&quot;seed&quot;:784150825,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919135,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[7,0],[8,0],[9,0],[10,0],[10,-1],[10,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:21,&quot;versionNonce&quot;:26327047,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;7un7JuKYglx_iFwUH5O5c&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:377.625,&quot;y&quot;:-148.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:16,&quot;height&quot;:23,&quot;seed&quot;:537573417,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919136,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[3,4],[6,9],[7,13],[8,16],[8,17],[9,20],[9,21],[9,22],[12,14],[13,8],[14,4],[15,2],[16,0],[16,-1],[16,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:22,&quot;versionNonce&quot;:583737127,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;19pRWRjW09U-yN3RJx7as&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-128.375,&quot;y&quot;:-281.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:17,&quot;height&quot;:29,&quot;seed&quot;:924834279,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919136,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[5,3],[9,6],[13,9],[14,10],[17,11],[17,12],[17,14],[14,17],[13,17],[12,19],[11,21],[10,22],[9,24],[8,25],[8,27],[7,29],[7,29]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:441912009,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;WjbOc8_nsl5fgJllQsBnH&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-127.375,&quot;y&quot;:-225.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:16,&quot;height&quot;:29,&quot;seed&quot;:1436483687,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919136,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[2,2],[5,5],[8,9],[11,10],[14,13],[15,13],[16,14],[16,15],[16,16],[14,17],[12,20],[10,22],[9,23],[8,25],[7,25],[6,26],[5,27],[4,29],[3,29],[3,29]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:22,&quot;versionNonce&quot;:579510855,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;NlR8gzcs9Isueursp2qcG&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-124.375,&quot;y&quot;:-167.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:11,&quot;height&quot;:17,&quot;seed&quot;:1239211079,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919136,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,8],[0,11],[0,13],[1,15],[2,16],[2,17],[4,17],[5,17],[6,17],[9,17],[10,17],[11,17],[11,14],[11,13],[11,12],[11,11],[11,11]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:7,&quot;versionNonce&quot;:446482857,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;W7nAWbrOdO93uCWJKC8kn&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-124.375,&quot;y&quot;:-176.2421875,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:2,&quot;seed&quot;:1257706183,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761919136,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,-1],[-1,-2],[-1,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:17,&quot;versionNonce&quot;:99632263,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;ABt4j5casqzYQ-iGuyJ3e&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-181.375,&quot;y&quot;:-293.2421875,&quot;strokeColor&quot;:&quot;#6741d9&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:27,&quot;seed&quot;:2120356231,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761935721,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-3],[0,-5],[0,-7],[0,-10],[0,-14],[0,-16],[0,-19],[-1,-22],[-1,-25],[-1,-27],[-1,-27]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:20,&quot;versionNonce&quot;:1133079401,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;3V8RuP6zlujnq7WWEV3Hx&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-189.375,&quot;y&quot;:-316.2421875,&quot;strokeColor&quot;:&quot;#6741d9&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:12,&quot;height&quot;:16,&quot;seed&quot;:625370663,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761935721,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[0,-4],[2,-8],[3,-10],[4,-12],[4,-14],[5,-16],[7,-10],[9,-8],[9,-6],[10,-6],[11,-3],[12,-3],[12,-3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:18,&quot;versionNonce&quot;:1989050121,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;zLMveWzqnxYdGsUfmktRl&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:86.625,&quot;y&quot;:-271.2421875,&quot;strokeColor&quot;:&quot;#6741d9&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:7,&quot;height&quot;:39,&quot;seed&quot;:539080743,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761940247,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[0,-3],[0,-5],[0,-10],[-2,-18],[-4,-24],[-5,-26],[-6,-32],[-6,-34],[-7,-37],[-7,-38],[-7,-39],[-7,-39]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:18,&quot;versionNonce&quot;:1591972359,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;0lbbzbn-a2EyPn0njbfNQ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:74.625,&quot;y&quot;:-298.2421875,&quot;strokeColor&quot;:&quot;#6741d9&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:16,&quot;seed&quot;:1174471431,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761940247,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-2],[0,-4],[1,-8],[1,-10],[1,-13],[1,-16],[2,-16],[5,-13],[11,-8],[13,-5],[14,-3],[15,-2],[15,-2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:15,&quot;versionNonce&quot;:47774345,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;C7Pe3QMXjkDwffcXfQuUD&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-164.375,&quot;y&quot;:-151.2421875,&quot;strokeColor&quot;:&quot;#c2255c&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:2,&quot;height&quot;:31,&quot;seed&quot;:646956743,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761921077,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,-2],[1,-4],[1,-6],[1,-12],[1,-20],[1,-22],[0,-26],[0,-28],[0,-29],[0,-30],[0,-31],[-1,-31],[-1,-31]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:14,&quot;versionNonce&quot;:2002036425,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;lY3J01WsMo94h_UpPEGH1&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-170.375,&quot;y&quot;:-172.2421875,&quot;strokeColor&quot;:&quot;#c2255c&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:13,&quot;height&quot;:15,&quot;seed&quot;:1397433767,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761922238,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-2],[1,-3],[2,-5],[3,-9],[4,-11],[4,-14],[4,-15],[8,-11],[11,-6],[13,-5],[13,-4],[13,-4]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:12,&quot;versionNonce&quot;:1354031433,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;qWBKAOjcJMNkcusoCDowa&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:90.625,&quot;y&quot;:-215.2421875,&quot;strokeColor&quot;:&quot;#c2255c&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:5,&quot;height&quot;:38,&quot;seed&quot;:1862428007,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761923975,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[1,7],[2,17],[3,25],[4,31],[4,33],[5,35],[5,37],[5,38],[5,38]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:14,&quot;versionNonce&quot;:703708553,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;28KEbnMEaF93olB31w4Hh&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:86.625,&quot;y&quot;:-188.2421875,&quot;strokeColor&quot;:&quot;#c2255c&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:13,&quot;seed&quot;:109535975,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715761925185,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,1],[4,7],[6,9],[6,11],[7,12],[13,4],[13,3],[14,2],[14,1],[15,0],[15,-1],[15,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;id&quot;:&quot;YhJWumFt&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:408.3024193548388,&quot;y&quot;:-356.68876008064524,&quot;width&quot;:106.19990539550781,&quot;height&quot;:25,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;seed&quot;:183294281,&quot;version&quot;:26,&quot;versionNonce&quot;:243931175,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:null,&quot;updated&quot;:1715764117615,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;Saturation&quot;,&quot;rawText&quot;:&quot;Saturation&quot;,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;baseline&quot;:18,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;Saturation&quot;,&quot;lineHeight&quot;:1.25},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:64,&quot;versionNonce&quot;:1310706153,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;vOfDLz1b&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:168.75085375385896,&quot;y&quot;:-131.12424395161298,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:106.19990539550781,&quot;height&quot;:25,&quot;seed&quot;:1119976039,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715764122082,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;text&quot;:&quot;Saturation&quot;,&quot;rawText&quot;:&quot;Saturation&quot;,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;Saturation&quot;,&quot;lineHeight&quot;:1.25,&quot;baseline&quot;:18}],&quot;appState&quot;:{&quot;theme&quot;:&quot;dark&quot;,&quot;viewBackgroundColor&quot;:&quot;#ffffff&quot;,&quot;currentItemStrokeColor&quot;:&quot;#2f9e44&quot;,&quot;currentItemBackgroundColor&quot;:&quot;transparent&quot;,&quot;currentItemFillStyle&quot;:&quot;solid&quot;,&quot;currentItemStrokeWidth&quot;:1,&quot;currentItemStrokeStyle&quot;:&quot;solid&quot;,&quot;currentItemRoughness&quot;:0,&quot;currentItemOpacity&quot;:100,&quot;currentItemFontFamily&quot;:1,&quot;currentItemFontSize&quot;:20,&quot;currentItemTextAlign&quot;:&quot;left&quot;,&quot;currentItemStartArrowhead&quot;:null,&quot;currentItemEndArrowhead&quot;:&quot;arrow&quot;,&quot;scrollX&quot;:213.63306451612902,&quot;scrollY&quot;:542.827872983871,&quot;zoom&quot;:{&quot;value&quot;:1.55},&quot;currentItemRoundness&quot;:&quot;round&quot;,&quot;gridSize&quot;:null,&quot;gridColor&quot;:{&quot;Bold&quot;:&quot;#C9C9C9FF&quot;,&quot;Regular&quot;:&quot;#EDEDEDFF&quot;},&quot;currentStrokeOptions&quot;:null,&quot;previousGridSize&quot;:null,&quot;frameRendering&quot;:{&quot;enabled&quot;:true,&quot;clip&quot;:true,&quot;name&quot;:true,&quot;outline&quot;:true}},&quot;files&quot;:{}};InitialData.scrollToContent=true;App=()=&gt;{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(&quot;resize&quot;,e),()=&gt;window.removeEventListener(&quot;resize&quot;,e)},[t]),React.createElement(React.Fragment,null,React.createElement(&quot;div&quot;,{className:&quot;excalidraw-wrapper&quot;,ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(&quot;Op-Amps_2024-05-15_1011.53.excalidraw.md1&quot;);ReactDOM.render(React.createElement(App),excalidrawWrapper);})();&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=lJDjWZqhpVc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;What is an operational amplifier? (youtube.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pins
&lt;ul&gt;
&lt;li&gt;Inputs: v&lt;sub&gt;+&lt;/sub&gt; (non-inverting), v&lt;sub&gt;-&lt;/sub&gt; (inverting)&lt;/li&gt;
&lt;li&gt;Supply: +V, -V (manchmal zusätzlicher GND, wird oft nicht dargestellt)&lt;/li&gt;
&lt;li&gt;Output: v&lt;sub&gt;o&lt;/sub&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Übliche Schaltung
&lt;ul&gt;
&lt;li&gt;+V = 12V, -V = -12V&lt;/li&gt;
&lt;li&gt;v&lt;sub&gt;o&lt;/sub&gt; wird relativ zu 0V gemessen (zwischen positiver und negativer Supply)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Intern: 20-50 Transistoren, manchmal auch Kapazitäten&lt;/li&gt;
&lt;li&gt;Eigenschaften
&lt;ul&gt;
&lt;li&gt;i = 0 (idealer Op-Amp) -&amp;gt; Es fließt kein Strom in die Eingänge (es wird nur die Spannung gefühlt)&lt;/li&gt;
&lt;li&gt;v&lt;sub&gt;o&lt;/sub&gt; = A · (v&lt;sub&gt;+&lt;/sub&gt;-v&lt;sub&gt;-&lt;/sub&gt;) = A · v&lt;sub&gt;in&lt;/sub&gt;&lt;/li&gt;
&lt;li&gt;A = gain, üblicherweise 10&lt;sup&gt;5&lt;/sup&gt; &amp;lt;= A &amp;lt;= 10&lt;sup&gt;6&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Häufig genutzte Typen
&lt;ul&gt;
&lt;li&gt;LM324&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nicht-invertierter-verstaerker&quot; tabindex=&quot;-1&quot;&gt;Nicht-invertierter Verstärker&lt;/h2&gt;
&lt;div id=&quot;Op-Amps_2024-05-15_1043.35.excalidraw.md2&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(){const InitialData={&quot;type&quot;:&quot;excalidraw&quot;,&quot;version&quot;:2,&quot;source&quot;:&quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.0.17&quot;,&quot;elements&quot;:[{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:76,&quot;versionNonce&quot;:1357494921,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;dP5OV7Kc_Et50p0exVISd&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-135.375,&quot;y&quot;:-339.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:68,&quot;height&quot;:85,&quot;seed&quot;:446224615,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,11],[0,16],[-1,31],[-2,40],[-3,45],[-4,54],[-5,68],[-6,71],[-6,73],[-6,74],[-7,74],[-7,76],[-7,77],[-7,81],[-8,84],[-8,85],[-7,85],[-4,83],[2,79],[12,73],[15,71],[25,63],[30,59],[35,54],[40,51],[43,49],[50,46],[52,45],[54,44],[55,43],[56,43],[59,42],[60,41],[58,39],[52,35],[45,31],[43,30],[36,25],[31,21],[27,19],[25,18],[23,17],[20,14],[17,13],[15,12],[14,11],[13,10],[12,9],[10,7],[7,6],[6,5],[5,5],[4,4],[3,4],[2,4],[1,3],[1,3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:24,&quot;versionNonce&quot;:1468780167,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;GyYBn4PykjBq9FPF9W-5L&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-126.375,&quot;y&quot;:-319.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0,&quot;height&quot;:12,&quot;seed&quot;:860425319,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,5],[0,8],[0,10],[0,12],[0,12]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:24,&quot;versionNonce&quot;:314802537,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;IS7Q9qEGboxRsNxwWR0vd&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-130.375,&quot;y&quot;:-314.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:11,&quot;height&quot;:0,&quot;seed&quot;:1622734183,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[5,0],[8,0],[10,0],[11,0],[11,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:238970279,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;fUu8eH11BGzlx2XpVg3tf&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-132.375,&quot;y&quot;:-287.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:10,&quot;height&quot;:0,&quot;seed&quot;:552590951,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[3,0],[5,0],[7,0],[9,0],[10,0],[10,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:1199664201,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;nndHM8LA_Qdba31GT4wFh&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-77.375,&quot;y&quot;:-300.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:97,&quot;height&quot;:8,&quot;seed&quot;:716063367,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[4,0],[13,1],[32,5],[62,7],[84,7],[91,7],[96,7],[97,8],[97,8]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:37,&quot;versionNonce&quot;:2094078151,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;7WPE2bpiamSAsk7NA5Byr&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-189.375,&quot;y&quot;:-321.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:52,&quot;height&quot;:5,&quot;seed&quot;:11519207,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[6,0],[14,0],[21,1],[25,2],[31,2],[36,3],[39,3],[41,4],[42,4],[44,4],[45,4],[47,5],[48,5],[49,5],[50,5],[51,5],[52,5],[52,5]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:32,&quot;versionNonce&quot;:1191115561,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;_eFMp3iZp-WvjnnqpioVc&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-234.375,&quot;y&quot;:-333.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:18,&quot;seed&quot;:622290567,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,3],[3,10],[3,12],[5,16],[5,18],[6,17],[7,16],[9,12],[11,10],[13,5],[14,2],[14,1],[15,1],[15,1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:1759537127,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;hEb0rP5K6UP2SbNan5JK0&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-214.375,&quot;y&quot;:-321.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:7,&quot;seed&quot;:230029447,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,2],[-1,3],[-1,6],[-1,7],[-1,7]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:24,&quot;versionNonce&quot;:1638379017,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;uO4BmE3X53C1klc27g8hG&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-209.375,&quot;y&quot;:-319.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:9,&quot;seed&quot;:2124621415,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253167,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,3],[1,6],[1,7],[1,8],[1,9],[1,9]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:813224711,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;txXTh59S8MVzIIf4iZWK7&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-207.375,&quot;y&quot;:-319.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:8,&quot;height&quot;:10,&quot;seed&quot;:2094600039,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[3,3],[6,5],[7,6],[8,7],[8,1],[8,0],[8,-3],[8,-3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:32,&quot;versionNonce&quot;:1316422889,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;uezmmKyWr9oYTFTjuIg-V&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-68.375,&quot;y&quot;:-322.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:14,&quot;seed&quot;:756047303,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,1],[2,4],[2,5],[4,7],[5,10],[6,10],[7,12],[7,14],[8,14],[10,9],[14,4],[15,1],[15,0],[15,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:37,&quot;versionNonce&quot;:1008130599,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;okrl6TAfmiFcJPLDU00fV&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-48.375,&quot;y&quot;:-311.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:8,&quot;height&quot;:7,&quot;seed&quot;:691564487,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,0],[-2,0],[-2,1],[-3,2],[-3,3],[-3,5],[-2,6],[-1,7],[1,7],[2,7],[4,7],[5,7],[5,6],[5,5],[5,4],[5,3],[5,2],[4,2],[4,2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:1492680649,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;UauD4rkDa_L1MDmLUeTB7&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-11.375,&quot;y&quot;:-293.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:3,&quot;height&quot;:30,&quot;seed&quot;:426739047,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[-1,12],[-1,19],[-2,23],[-2,28],[-3,30],[-3,30]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:22,&quot;versionNonce&quot;:816250183,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;1yScHI2BO0Q3DatYG5Xs_&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-26.375,&quot;y&quot;:-264.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:25,&quot;height&quot;:2,&quot;seed&quot;:1042942343,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[18,1],[24,2],[25,2],[25,2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:37,&quot;versionNonce&quot;:1330093737,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;GJxRlDZ4pGeCmkLMiHhx_&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-24.375,&quot;y&quot;:-263.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:19,&quot;height&quot;:37,&quot;seed&quot;:1209858119,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[-1,4],[-1,13],[-1,22],[-2,24],[-2,28],[-2,29],[-2,31],[-2,33],[-2,34],[-3,36],[-3,37],[0,37],[5,37],[11,37],[13,37],[15,37],[16,37],[16,37]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:34,&quot;versionNonce&quot;:1636154471,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;SXxEYchaQJVvuCUz_ynJA&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1.375,&quot;y&quot;:-259.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:2,&quot;height&quot;:32,&quot;seed&quot;:1009630695,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,7],[0,12],[-1,17],[-1,21],[-1,24],[-1,25],[-1,26],[-1,27],[-1,28],[-1,29],[-2,29],[-2,30],[-2,31],[-2,32],[-2,32]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:806347145,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;zjkKRjdVsMC8NrHD2uufA&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-16.375,&quot;y&quot;:-225.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:24,&quot;seed&quot;:1552810535,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,3],[1,5],[1,10],[1,18],[1,22],[1,24],[1,24]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:39,&quot;versionNonce&quot;:41916295,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;LwuLpop_pCR5S0Tz9RGRn&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-16.375,&quot;y&quot;:-202.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:7,&quot;height&quot;:5,&quot;seed&quot;:1125789255,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-2,0],[-3,0],[-3,1],[-3,2],[-3,3],[-2,3],[0,4],[1,5],[2,5],[3,5],[3,4],[4,4],[4,2],[4,1],[3,1],[2,1],[1,0],[0,0],[-1,0],[-2,0],[-2,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:411879529,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;KfjXaXusUer6EDV8kfC_P&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-16.375,&quot;y&quot;:-198.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:40,&quot;seed&quot;:1458611751,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,6],[1,13],[1,20],[0,26],[0,29],[0,36],[0,40],[0,40]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:433131175,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;e4A3d8PdmO0sL_gYOHnsa&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-26.375,&quot;y&quot;:-155.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:23,&quot;height&quot;:1,&quot;seed&quot;:241937543,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[4,0],[10,0],[15,1],[17,1],[18,1],[22,1],[23,1],[23,1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:36,&quot;versionNonce&quot;:1921635145,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;6sOX1e3htkTslWI5CRMoH&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-29.375,&quot;y&quot;:-156.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:21,&quot;height&quot;:42,&quot;seed&quot;:1860398823,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[2,6],[2,13],[2,19],[2,25],[2,29],[2,35],[2,37],[2,38],[2,39],[2,42],[4,42],[7,42],[11,42],[17,42],[19,42],[21,42],[21,42]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:31,&quot;versionNonce&quot;:841392583,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;GV9SJcZWnUvx5YtoCvhSX&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-3.375,&quot;y&quot;:-155.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:41,&quot;seed&quot;:421926247,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253168,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,6],[0,9],[1,20],[1,23],[1,29],[1,33],[1,35],[1,37],[1,38],[1,39],[1,40],[1,41],[1,41]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:19,&quot;versionNonce&quot;:1650623017,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;V8UOhn2P1lzkVATCIhps7&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-14.375,&quot;y&quot;:-110.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0.0001,&quot;height&quot;:0.0001,&quot;seed&quot;:876972103,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0.0001,0.0001]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:19,&quot;versionNonce&quot;:1285345511,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;vBRRQwj5mvipdUpJ8DQZm&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-14.375,&quot;y&quot;:-112.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0.0001,&quot;height&quot;:0.0001,&quot;seed&quot;:1448573351,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0.0001,0.0001]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:1963087113,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;mBDcFd4IOZo1qBnsYiklI&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-14.375,&quot;y&quot;:-115.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:2,&quot;height&quot;:20,&quot;seed&quot;:1052403463,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,2],[0,4],[0,9],[1,15],[2,18],[2,19],[2,20],[2,20]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:314579975,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;LW2GzV7JMzzbSM9JBYp9W&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-28.375,&quot;y&quot;:-94.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:23,&quot;height&quot;:1,&quot;seed&quot;:1210825063,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[6,0],[12,-1],[18,-1],[22,-1],[23,-1],[23,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:233098217,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;0xuC9Qcy6mZS7lLd-iuPv&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-8.375,&quot;y&quot;:-96.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:11,&quot;height&quot;:0,&quot;seed&quot;:927710599,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[6,0],[9,0],[10,0],[11,0],[11,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:1217200935,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Po--gdxZRA9Eyz3nkP1He&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-156.375,&quot;y&quot;:-289.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:19,&quot;height&quot;:0,&quot;seed&quot;:1146653543,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[5,0],[12,0],[14,0],[16,0],[19,0],[19,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:73,&quot;versionNonce&quot;:353724105,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;KuIOMd3l49H3vVDO0OfzD&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-156.375,&quot;y&quot;:-289.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:147,&quot;height&quot;:92,&quot;seed&quot;:14438279,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1,3],[-1,10],[-2,22],[-3,34],[-4,41],[-5,49],[-5,59],[-5,67],[-5,74],[-5,80],[-5,81],[-6,81],[-6,82],[-4,82],[3,83],[11,84],[16,85],[20,85],[25,86],[31,86],[35,87],[40,88],[42,88],[47,88],[49,88],[58,89],[61,89],[67,89],[72,89],[78,89],[85,89],[88,89],[93,89],[97,90],[100,90],[105,90],[107,90],[111,90],[114,91],[117,91],[120,91],[122,91],[125,92],[127,92],[129,92],[131,92],[133,92],[134,92],[135,92],[136,92],[137,92],[139,92],[140,92],[141,92],[141,92]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:24,&quot;versionNonce&quot;:2121270855,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;vdfNW7weD3_bCibN60DYJ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:11.625,&quot;y&quot;:-256.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:5,&quot;height&quot;:24,&quot;seed&quot;:2132108711,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,4],[2,10],[2,13],[4,21],[5,24],[5,24]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:41,&quot;versionNonce&quot;:1697621417,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;j1PguSWxqesRTOwygvJku&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:12.625,&quot;y&quot;:-255.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:16,&quot;height&quot;:25,&quot;seed&quot;:61345447,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,-1],[6,-1],[8,-1],[9,-1],[10,-1],[11,1],[11,3],[11,5],[11,7],[9,9],[9,10],[7,10],[6,11],[5,11],[4,11],[3,11],[4,11],[9,16],[11,19],[13,22],[16,23],[16,24],[16,24]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:54895975,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;xPHetgXlIHPRKzF5rByL-&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:34.625,&quot;y&quot;:-237.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:3,&quot;height&quot;:13,&quot;seed&quot;:990395591,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,1],[2,4],[3,10],[3,13],[3,13]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:26,&quot;versionNonce&quot;:2036271241,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;JqUtIN59TYaGtoQJ4OPhW&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:13.625,&quot;y&quot;:-148.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:4,&quot;height&quot;:28,&quot;seed&quot;:2016981671,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[3,14],[4,20],[4,23],[4,24],[4,27],[4,28],[4,28]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:41,&quot;versionNonce&quot;:375021703,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;fJm86vxHK8nGoemSSoya5&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:14.625,&quot;y&quot;:-143.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:17,&quot;height&quot;:26,&quot;seed&quot;:1988812263,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[0,-2],[1,-3],[2,-4],[5,-5],[8,-5],[10,-5],[14,0],[14,3],[12,4],[11,6],[10,6],[8,6],[6,6],[6,7],[8,8],[11,12],[15,16],[16,18],[17,19],[17,20],[17,21],[17,21]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:38,&quot;versionNonce&quot;:1532956521,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;7OzVHMT2KA1WIuBfXmyrO&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:36.625,&quot;y&quot;:-127.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:13,&quot;height&quot;:10,&quot;seed&quot;:145581063,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253169,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[3,-1],[6,-1],[7,-1],[8,0],[9,2],[9,3],[9,5],[9,7],[8,8],[5,8],[3,8],[2,8],[3,8],[6,8],[8,8],[9,8],[12,8],[13,9],[13,9]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:40,&quot;versionNonce&quot;:2019232946,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;ABD6RHzZ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-114.375,&quot;y&quot;:-383.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:46.9140625,&quot;height&quot;:25,&quot;seed&quot;:857363431,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745407933248,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;text&quot;:&quot;Ideal:&quot;,&quot;rawText&quot;:&quot;Ideal:&quot;,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;Ideal:&quot;,&quot;lineHeight&quot;:1.25,&quot;baseline&quot;:21},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:36,&quot;versionNonce&quot;:405720942,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;xJMigLXZ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:200.625,&quot;y&quot;:-382.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:41.220703125,&quot;height&quot;:25,&quot;seed&quot;:2052327625,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745407933248,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;text&quot;:&quot;Real:&quot;,&quot;rawText&quot;:&quot;Real:&quot;,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;Real:&quot;,&quot;lineHeight&quot;:1.25,&quot;baseline&quot;:21},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:96,&quot;versionNonce&quot;:1037800169,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;QX3mpFwdZk4ICwFzLoQ86&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:282.625,&quot;y&quot;:-332.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:88,&quot;height&quot;:96,&quot;seed&quot;:402572329,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253170,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,9],[1,20],[1,27],[3,37],[4,48],[5,52],[7,58],[9,68],[9,72],[10,78],[10,82],[11,86],[11,87],[11,88],[11,90],[11,91],[11,93],[11,95],[10,95],[10,96],[14,90],[19,85],[23,83],[33,76],[40,71],[47,67],[56,63],[58,62],[60,61],[65,58],[67,57],[71,53],[74,52],[76,51],[83,48],[85,47],[86,47],[86,46],[87,46],[88,46],[85,41],[78,36],[76,34],[71,31],[65,28],[61,25],[55,23],[51,20],[46,18],[40,15],[39,14],[35,12],[31,11],[30,10],[27,10],[25,9],[24,9],[21,8],[18,6],[15,6],[13,5],[11,4],[9,4],[9,3],[7,3],[6,3],[5,3],[4,2],[2,2],[1,2],[0,2],[0,2]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:29,&quot;versionNonce&quot;:1300900903,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Tao9E4lnlK4rkvYeaqkJy&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:300.625,&quot;y&quot;:-316.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:17,&quot;seed&quot;:1787299785,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253170,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,3],[0,7],[1,14],[1,16],[1,17],[1,17]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:28,&quot;versionNonce&quot;:1218137545,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;dNla7ZfttLFEWxPw76Q45&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:296.625,&quot;y&quot;:-307.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:13,&quot;height&quot;:0,&quot;seed&quot;:2023550665,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253170,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[7,0],[10,0],[13,0],[13,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:26,&quot;versionNonce&quot;:467668807,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Gx91bFREJqEl9ywaFVxMe&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:299.625,&quot;y&quot;:-273.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:9,&quot;height&quot;:0,&quot;seed&quot;:1454119657,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253170,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[8,0],[9,0],[9,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:63,&quot;versionNonce&quot;:492874921,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;sNa5A0XQrCTLND_c07R-m&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:216.625,&quot;y&quot;:-308.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:67.99999999999999,&quot;height&quot;:0,&quot;seed&quot;:147925321,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253170,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[26.842105263157887,0],[32.210526315789465,0],[37.57894736842104,0],[42.94736842105262,0],[48.3157894736842,0],[50.105263157894726,0],[53.68421052631577,0],[60.84210526315788,0],[62.6315789473684,0],[64.42105263157893,0],[66.21052631578945,0],[67.99999999999999,0],[67.99999999999999,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:46,&quot;versionNonce&quot;:1741459047,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;APNHkPcUgMVDWsikhGNt9&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:163.625,&quot;y&quot;:-320.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:26,&quot;seed&quot;:843607145,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253170,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,4],[0,6],[0,14],[0,19],[0,21],[1,25],[1,26],[1,26]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:79,&quot;versionNonce&quot;:37377641,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Tf7kbf3a55GJgKdoqlyy3&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:163.625,&quot;y&quot;:-322.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:52,&quot;height&quot;:28,&quot;seed&quot;:238507655,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[9,0],[12,0],[18,1],[25,1],[30,2],[34,2],[38,2],[40,2],[41,2],[42,2],[43,2],[44,2],[45,2],[46,2],[47,2],[48,2],[48,6],[49,10],[50,12],[50,14],[50,16],[51,17],[51,18],[51,21],[52,22],[52,24],[52,25],[52,26],[52,27],[52,28],[39,28],[33,28],[29,28],[25,28],[20,28],[15,28],[13,28],[10,28],[8,28],[6,28],[4,28],[2,28],[1,27],[1,27]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:55,&quot;versionNonce&quot;:369844391,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;BoTMIViaROrDsqCKOxYSP&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:110.625,&quot;y&quot;:-306.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:49,&quot;height&quot;:1,&quot;seed&quot;:978825799,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[3,0],[9,-1],[13,-1],[20,-1],[25,-1],[29,-1],[32,-1],[36,-1],[38,-1],[39,-1],[40,-1],[41,-1],[42,-1],[43,-1],[44,-1],[45,-1],[46,-1],[48,-1],[49,-1],[49,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:31,&quot;versionNonce&quot;:1820626985,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;KIc4m-OZYpUiDsc0Sw3R2&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:264.625,&quot;y&quot;:-274.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:21,&quot;height&quot;:0,&quot;seed&quot;:600496713,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[8,0],[10,0],[12,0],[13,0],[15,0],[16,0],[17,0],[18,0],[20,0],[21,0],[21,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:59,&quot;versionNonce&quot;:2011865831,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;MsK8efVQMlk4AAo_IpE1q&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:262.625,&quot;y&quot;:-275.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:145,&quot;height&quot;:69,&quot;seed&quot;:384824969,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,3],[2,9],[3,14],[4,20],[5,25],[6,30],[6,34],[6,37],[7,41],[7,46],[7,48],[7,50],[7,55],[7,57],[7,61],[7,63],[7,65],[7,66],[9,67],[23,69],[37,69],[47,69],[63,69],[79,68],[84,68],[92,68],[97,68],[108,68],[110,68],[114,68],[119,67],[123,67],[127,67],[131,66],[134,66],[140,65],[144,65],[145,65],[145,65]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:28,&quot;versionNonce&quot;:1269998345,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;9BT2qMmmwzqnCkNSIzNx_&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:368.625,&quot;y&quot;:-289.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:38,&quot;height&quot;:0,&quot;seed&quot;:1249946441,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[5,0],[12,0],[21,0],[24,0],[32,0],[35,0],[38,0],[38,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:40,&quot;versionNonce&quot;:2021895687,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;8KMNh1COE5xHDXfEEM-O0&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:405.625,&quot;y&quot;:-289.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:6,&quot;height&quot;:7,&quot;seed&quot;:684288745,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-2],[0,-3],[0,-4],[1,-4],[3,-4],[4,-4],[4,-3],[4,-2],[5,-1],[5,0],[5,1],[4,2],[3,2],[1,2],[0,2],[0,-1],[0,-2],[-1,-4],[-1,-5],[0,-5],[0,-5]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:89872873,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;14EYH-vzTUMikDK6PKctj&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:405.625,&quot;y&quot;:-289.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:2,&quot;height&quot;:19,&quot;seed&quot;:432523529,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,4],[1,8],[2,12],[2,15],[2,18],[2,19],[2,19]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:336483623,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Fw-N-PmmwHPkZ51CnUqIs&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:395.625,&quot;y&quot;:-271.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:20,&quot;height&quot;:1,&quot;seed&quot;:1390395849,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[4,0],[9,0],[12,0],[16,1],[17,1],[18,1],[20,1],[20,1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:46,&quot;versionNonce&quot;:982136009,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;3LCht4IZE7W5w1DlutMk9&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:396.625,&quot;y&quot;:-273.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:20,&quot;height&quot;:42,&quot;seed&quot;:1400621705,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,3],[0,4],[0,6],[1,8],[1,15],[2,19],[2,22],[3,26],[3,28],[3,29],[3,32],[3,34],[3,36],[3,37],[3,39],[3,40],[3,41],[3,42],[11,42],[14,42],[15,42],[16,42],[17,42],[18,42],[19,42],[20,42],[20,42]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:34,&quot;versionNonce&quot;:838277191,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;OA8HNI6iBh9kZqJRZtDaf&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:416.625,&quot;y&quot;:-269.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:4,&quot;height&quot;:40,&quot;seed&quot;:192113129,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253171,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[1,10],[2,14],[2,18],[2,24],[3,26],[3,28],[3,31],[3,34],[3,35],[3,37],[3,38],[4,39],[4,40],[4,40]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:31,&quot;versionNonce&quot;:1591391145,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;XxPeDJ4VR17yvGzrBLcbt&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:409.625,&quot;y&quot;:-231.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:3,&quot;height&quot;:20,&quot;seed&quot;:672731849,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,4],[2,6],[2,8],[3,10],[3,12],[3,15],[3,16],[3,17],[3,18],[3,19],[3,20],[3,20]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:47,&quot;versionNonce&quot;:404387687,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;6LiT8jFEPmexTLtxryuFw&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:405.625,&quot;y&quot;:-211.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:9,&quot;height&quot;:5,&quot;seed&quot;:748244745,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[1,-2],[4,-2],[5,-2],[6,-2],[7,-2],[7,-1],[7,0],[7,1],[6,1],[5,1],[4,1],[3,-1],[2,-2],[2,-3],[3,-3],[4,-4],[6,-4],[8,-4],[9,-3],[9,-2],[9,-1],[8,-1],[6,0],[5,1],[4,1],[3,1],[3,1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:34,&quot;versionNonce&quot;:1719162505,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;iasxhWK8bw6i-zwkXwSHO&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:410.625,&quot;y&quot;:-211.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:6,&quot;height&quot;:34,&quot;seed&quot;:1653270857,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[1,5],[2,7],[4,13],[5,15],[6,17],[6,20],[6,22],[6,24],[6,25],[6,27],[6,30],[6,32],[6,34],[6,34]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:482669191,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;BJCx_Nxn7zAgHVMExSOnM&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:405.625,&quot;y&quot;:-174.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:18,&quot;height&quot;:0,&quot;seed&quot;:1434904105,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[4,0],[6,0],[10,0],[14,0],[16,0],[18,0],[18,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:32,&quot;versionNonce&quot;:874421609,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Cj42CrmWSq4ZoTorPOPBA&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:402.625,&quot;y&quot;:-176.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:5,&quot;height&quot;:44,&quot;seed&quot;:429061865,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[1,1],[3,5],[4,12],[4,18],[4,22],[5,26],[5,32],[5,35],[5,38],[5,41],[5,44],[5,44]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:33,&quot;versionNonce&quot;:414386599,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;5Y8y9A_ueggeiP-gsIFUy&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:423.625,&quot;y&quot;:-177.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0,&quot;height&quot;:44,&quot;seed&quot;:1049898505,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2],[0,14],[0,19],[0,24],[0,29],[0,33],[0,36],[0,38],[0,40],[0,41],[0,42],[0,43],[0,44],[0,44]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:1192822857,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;yYeRFeliUxa0r-Ui0tFH2&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:403.625,&quot;y&quot;:-133.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:16,&quot;height&quot;:0,&quot;seed&quot;:1240628233,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[3,0],[7,0],[12,0],[14,0],[15,0],[16,0],[16,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:28,&quot;versionNonce&quot;:420560071,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;Bc8DaXe9uoCVmr-WT5d2v&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:417.625,&quot;y&quot;:-134.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:1,&quot;height&quot;:25,&quot;seed&quot;:1222030537,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,5],[0,10],[0,14],[0,20],[0,22],[0,25],[1,25],[1,25]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:27,&quot;versionNonce&quot;:692262697,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;dXYvhk2sTeTVTlDmplnqX&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:400.625,&quot;y&quot;:-107.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:36,&quot;height&quot;:3,&quot;seed&quot;:1059611753,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[3,-1],[11,-2],[19,-2],[22,-2],[28,-2],[33,-3],[36,-3],[36,-3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:34,&quot;versionNonce&quot;:1367084007,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;y3FnX7yPxlZeFMt1Bsdhz&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:409.625,&quot;y&quot;:-292.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:52,&quot;height&quot;:3,&quot;seed&quot;:1519887657,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[5,0],[7,0],[13,0],[21,0],[29,1],[36,2],[43,3],[45,3],[47,3],[49,3],[50,3],[51,3],[52,3],[52,3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:42,&quot;versionNonce&quot;:1308620551,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;O2chiX_2Mspg5245SzXbD&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:232.625,&quot;y&quot;:-308.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:9,&quot;height&quot;:9,&quot;seed&quot;:1779763207,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253172,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[0,-2],[1,-2],[3,-2],[4,-2],[5,-2],[7,-2],[8,-1],[8,2],[9,5],[9,6],[8,6],[7,6],[6,6],[5,6],[5,5],[4,4],[4,2],[3,1],[3,-1],[3,-2],[3,-3],[4,-3],[4,-3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:51,&quot;versionNonce&quot;:1696169511,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;wvSHD_hwgaMIK-YvWlzl9&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:239.625,&quot;y&quot;:-307.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:11,&quot;height&quot;:118,&quot;seed&quot;:763186247,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253173,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,9],[1,13],[1,17],[2,21],[2,23],[2,27],[3,31],[3,35],[3,38],[3,43],[4,46],[4,48],[4,54],[5,60],[6,65],[7,70],[7,73],[7,75],[8,80],[8,83],[9,90],[9,95],[9,99],[10,103],[10,105],[10,107],[10,110],[10,112],[10,114],[11,115],[11,116],[11,117],[11,118],[11,118]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:26,&quot;versionNonce&quot;:836901833,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;49W7QRosGkOcin7VP_quH&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:230.625,&quot;y&quot;:-188.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:32,&quot;height&quot;:1,&quot;seed&quot;:1925027015,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253173,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[5,0],[10,0],[15,0],[21,0],[23,0],[26,0],[30,-1],[32,-1],[32,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:28,&quot;versionNonce&quot;:1773478215,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;XJ9i4chLa1F0NXh9yWHh1&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:231.625,&quot;y&quot;:-178.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:32,&quot;height&quot;:0,&quot;seed&quot;:582942503,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253173,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[5,0],[10,0],[17,0],[19,0],[23,0],[27,0],[30,0],[31,0],[32,0],[32,0]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:43,&quot;versionNonce&quot;:278772393,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;1xTStsgIwLJQcM7YO8UPd&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:251.625,&quot;y&quot;:-177.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:7,&quot;height&quot;:72,&quot;seed&quot;:226439111,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253173,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,2.2153846153846155],[1,5.538461538461538],[2,8.861538461538462],[3,13.292307692307693],[4,15.50769230769231],[4,19.93846153846154],[5,24.36923076923077],[5,26.584615384615386],[5,29.907692307692308],[6,34.33846153846154],[6,39.87692307692308],[6,43.2],[6,48.73846153846154],[6,53.16923076923077],[6,58.70769230769231],[6,63.13846153846154],[7,64.24615384615385],[7,67.56923076923077],[7,68.67692307692307],[7,69.78461538461539],[7,70.8923076923077],[7,72],[7,72]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:26,&quot;versionNonce&quot;:489644135,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;HIiEnaRc4YfCtP7QLL5EP&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:236.625,&quot;y&quot;:-104.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:40,&quot;height&quot;:3,&quot;seed&quot;:1040767463,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253173,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,0],[6,-1],[12,-1],[22,-1],[32,-3],[37,-3],[38,-3],[40,-3],[40,-3]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:1774886441,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;VUeA1dA2afWj4C_KIpISO&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:177.625,&quot;y&quot;:-248.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:7,&quot;height&quot;:27,&quot;seed&quot;:856933671,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253173,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,-3],[3,-12],[4,-18],[6,-23],[7,-25],[7,-27],[7,-27]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:16,&quot;versionNonce&quot;:285667593,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;eSwPkPrlrNcyOmS-opxo5&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:176.625,&quot;y&quot;:-273.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:21,&quot;seed&quot;:1325824937,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253174,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[2,-2],[3,-5],[6,-8],[7,-10],[8,-12],[9,-14],[11,-4],[13,3],[14,4],[14,7],[15,7],[15,7]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:467877895,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;_RvnmWAoOnp13rULQLSo3&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:197.625,&quot;y&quot;:-213.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:26,&quot;height&quot;:15,&quot;seed&quot;:722979529,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763253174,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[7,3],[13,7],[16,8],[22,13],[26,14],[26,15],[26,15]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:9,&quot;versionNonce&quot;:1254412327,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;izIooN3m-KdmoGt2G8ltj&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:217.625,&quot;y&quot;:-211.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:6,&quot;height&quot;:13,&quot;seed&quot;:1973617353,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763254089,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[2,4],[4,8],[4,11],[5,12],[6,13],[6,13]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;freedraw&quot;,&quot;version&quot;:9,&quot;versionNonce&quot;:1960393799,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;0sDBxyK1Ak1DX3_asYrmp&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:211.625,&quot;y&quot;:-196.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:15,&quot;height&quot;:1,&quot;seed&quot;:1627310249,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1715763254708,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[1,0],[5,0],[7,0],[9,-1],[13,-1],[15,-1],[15,-1]],&quot;lastCommittedPoint&quot;:null,&quot;simulatePressure&quot;:true,&quot;pressures&quot;:[]},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:23,&quot;versionNonce&quot;:1652205170,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;opbJzuXn&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:1,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:122.625,&quot;y&quot;:-244.2421875,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:76.708984375,&quot;height&quot;:25,&quot;seed&quot;:1855386249,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745407933248,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;text&quot;:&quot;Glättung&quot;,&quot;rawText&quot;:&quot;Glättung&quot;,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;Glättung&quot;,&quot;lineHeight&quot;:1.25,&quot;baseline&quot;:21}],&quot;appState&quot;:{&quot;theme&quot;:&quot;dark&quot;,&quot;viewBackgroundColor&quot;:&quot;#ffffff&quot;,&quot;currentItemStrokeColor&quot;:&quot;#1e1e1e&quot;,&quot;currentItemBackgroundColor&quot;:&quot;transparent&quot;,&quot;currentItemFillStyle&quot;:&quot;solid&quot;,&quot;currentItemStrokeWidth&quot;:1,&quot;currentItemStrokeStyle&quot;:&quot;solid&quot;,&quot;currentItemRoughness&quot;:0,&quot;currentItemOpacity&quot;:100,&quot;currentItemFontFamily&quot;:1,&quot;currentItemFontSize&quot;:20,&quot;currentItemTextAlign&quot;:&quot;left&quot;,&quot;currentItemStartArrowhead&quot;:null,&quot;currentItemEndArrowhead&quot;:&quot;arrow&quot;,&quot;scrollX&quot;:269.8125,&quot;scrollY&quot;:909.591796875,&quot;zoom&quot;:{&quot;value&quot;:0.8},&quot;currentItemRoundness&quot;:&quot;round&quot;,&quot;gridSize&quot;:null,&quot;gridColor&quot;:{&quot;Bold&quot;:&quot;#C9C9C9FF&quot;,&quot;Regular&quot;:&quot;#EDEDEDFF&quot;},&quot;currentStrokeOptions&quot;:null,&quot;previousGridSize&quot;:null,&quot;frameRendering&quot;:{&quot;enabled&quot;:true,&quot;clip&quot;:true,&quot;name&quot;:true,&quot;outline&quot;:true}},&quot;files&quot;:{}};InitialData.scrollToContent=true;App=()=&gt;{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(&quot;resize&quot;,e),()=&gt;window.removeEventListener(&quot;resize&quot;,e)},[t]),React.createElement(React.Fragment,null,React.createElement(&quot;div&quot;,{className:&quot;excalidraw-wrapper&quot;,ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(&quot;Op-Amps_2024-05-15_1043.35.excalidraw.md2&quot;);ReactDOM.render(React.createElement(App),excalidrawWrapper);})();&lt;/script&gt;
[Non-inverting op-amp circuit (youtube.com)](https://www.youtube.com/watch?v=_Ut-nQ535iE)
$$
v_o = &#92;frac{R_1 + R_2}{R_2} v_{IN}
$$
-&gt; Der Gain des Verstärkers hat keinen Einfluss
### Praktisches Beispiel
![Pasted image 20240515105449.png](/img/user/_attachments/Pasted%20image%2020240515105449.png)
0..3V3 -&gt; 0..10V (D1 und R4 zur Visualisierung)
### Abwandlung: 4-20mA Output
![Pasted image 20240515112511.png](/img/user/_attachments/Pasted%20image%2020240515112511.png)
[4-20mA Transmitter Explained using an Op Amp (youtube.com)](https://www.youtube.com/watch?v=ZqJxdBCpb6c)
- Spannung an Eingängen ist gleich (im eingeschwungenen Zustand)
- Strom wird durch V&lt;sub&gt;i&lt;/sub&gt; und R&lt;sub&gt;1&lt;/sub&gt; bestimmt (unabhängig von R&lt;sub&gt;L&lt;/sub&gt;!)
- Warum Signalübertragung als Strom?
	- Für Übertragung als Spannung R&lt;sub&gt;L&lt;/sub&gt; idealerweise sehr groß (damit Innenwiderstand von Spannungsquelle und Kabel keinen Einfluss haben)
	- Dann hat aber eine externe Störquelle (z.B. elektrisches Feld) einen sehr großen Einfluss
	- Bei Übertragung als Strom kann R&lt;sub&gt;L&lt;/sub&gt; klein gewählt werden, da Strom unabhängig von Widerstandswerten überall gleich
	- Somit ist auch Einfluss von externer Störquelle gering
## Summierender Verstärker (für Audio)
N parallele, gleich aufgebaute Op-Amp Schaltungen, welche am Ende summiert werden. Jede Op-Amp Schaltung fügt Rauschen hinzu. Bei der Summierung verstärkt sich das Signal welches auf allen Kanälen gleich ist, wohingegen das Rauschen stochastisch ist und sich gegenseitig aufhebt.
$$
Reduktion = &#92;sqrt{Anzahl&#92; parallele&#92; Schaltungen&#92; N}
$$
- Nur relevant, wenn das zu verstärkende Signal sehr schwach ist (z.B. bei Phono-Audio-Verstärkern).
- Schaltungen müssen dabei sehr gleich sein (Toleranzen in Widerständen und Co beachten, ggf. einzeln einmessen).
- [&quot;Input Offset Voltage&quot;](https://www.ti.com/lit/an/sloa059b/sloa059b.pdf?ts=1734505475015) (Spannungsdifferenz durch Fertigungsfehler zwischen Op-Amp Terminals) sollte deutlich kleiner als Amplitude von Signal sein -&gt; kann ausgemessen werden (siehe Videolink unten) 
![Pasted image 20241218095447.png](/img/user/_attachments/Pasted%20image%2020241218095447.png)
[Mastergroove repair by Mend it Mark &amp; an honest message to Tom Evans audio - YouTube](https://youtu.be/6hVe_spuJQI?feature=shared&amp;t=1037)

            </content>
            <link href="https://janek.ing/tech/op-amps/" >
        </entry>
        <entry>
            <title>
                Obsidian
                
            </title>
            <updated>2025-05-28T21:08:51.808Z</updated>
            <id>https://janek.ing/tech/obsidian/</id>
            <content type="html">
                &lt;h2 id=&quot;callouts&quot; tabindex=&quot;-1&quot;&gt;Callouts&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!note] Note&lt;br /&gt;
This is a note.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tldr] tldr/summary/abstract&lt;br /&gt;
Too long; didn&#39;t read.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!info] info&lt;br /&gt;
Here&#39;s some information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!todo] todo&lt;br /&gt;
Things to be done.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!tip] tip/hint/important&lt;br /&gt;
This is a tip&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!success] success/check/done&lt;br /&gt;
This thing is done&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question] question/help/faq&lt;br /&gt;
Here&#39;s a question&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning] warning/caution/attention&lt;br /&gt;
This is a warning!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!fail] failure/fail/missing&lt;br /&gt;
This failed!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!danger] danger/error&lt;br /&gt;
Error! Error!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!bug] bug&lt;br /&gt;
Bug reported!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!example] example&lt;br /&gt;
This is only an example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!quote] quote/cite&lt;br /&gt;
This is a quote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;special-features&quot; tabindex=&quot;-1&quot;&gt;Special Features&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[!note]- Foldable note&lt;br /&gt;
The minus sign after the callout type makes this text hidden on first sight! Works with all other types, too!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!question] Can callouts be nested?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!todo] Yes!, they can.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!example]  You can even use multiple layers of nesting.&lt;br /&gt;
Woo!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!INFO] Code in callout&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Make sure every line begins with a &amp;gt; in markdown
// otherwise the callout will break
int main(int argc, char **argv) { }
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;markdown&quot; tabindex=&quot;-1&quot;&gt;Markdown&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Markdown&quot;&gt;&amp;gt; [!note] Note
&amp;gt; This is a note.

&amp;gt; [!tldr] tldr/summary/abstract
&amp;gt; Too long; didn&#39;t read.

&amp;gt; [!info] info
&amp;gt; Here&#39;s some information.

&amp;gt; [!todo] todo
&amp;gt; Things to be done.

&amp;gt; [!tip] tip/hint/important
&amp;gt; This is a tip

&amp;gt; [!success] success/check/done
&amp;gt; This thing is done

&amp;gt; [!question] question/help/faq
&amp;gt; Here&#39;s a question

&amp;gt; [!warning] warning/caution/attention
&amp;gt; This is a warning!

&amp;gt; [!fail] failure/fail/missing
&amp;gt; This failed!

&amp;gt; [!danger] danger/error
&amp;gt; Error! Error!

&amp;gt; [!bug] bug
&amp;gt; Bug reported!

&amp;gt; [!example] example
&amp;gt; This is only an example.

&amp;gt; [!quote] quote/cite
&amp;gt; This is a quote.

&amp;gt; [!note]- Foldable note
&amp;gt; Text only visibale after unfolding

&amp;gt; [!question] Can callouts be nested?
&amp;gt; &amp;gt; [!todo] Yes!, they can.
&amp;gt; &amp;gt; &amp;gt; [!example]  You can even use multiple layers of nesting.
&amp;gt; &amp;gt; &amp;gt; Woo!

&amp;gt; [!INFO] Code in callout
&amp;gt; ```C
&amp;gt; // Make sure every line begins with a &amp;gt; in markdown
&amp;gt; // otherwise the callout will break
&amp;gt; int main(int argc, char **argv) { }
&amp;gt; ```
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;getting-rid-of-unused-properties&quot; tabindex=&quot;-1&quot;&gt;Getting rid of unused properties&lt;/h2&gt;
&lt;p&gt;Once you used a property it will always show up in auto-complete. Very annoying if you misspelled it and corrected it later.&lt;br /&gt;
Open &lt;code&gt;[path to your vault]/.obsidian/types.json&lt;/code&gt; and remove the unneeded properties. You can also just adjust property type there.&lt;br /&gt;
This is safe to do - editing a property still in use will not change or remove it from documents.&lt;br /&gt;
Unused properties are also removed from the list automatically after a while.&lt;/p&gt;
&lt;h2 id=&quot;digital-garden-documentation&quot; tabindex=&quot;-1&quot;&gt;Digital Garden Documentation&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dg-docs.ole.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Digital Garden - Publish Obsidian Notes For Free&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/oleeskild/Obsidian-Digital-Garden&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;oleeskild/obsidian-digital-garden&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;css-styling&quot; tabindex=&quot;-1&quot;&gt;CSS Styling&lt;/h2&gt;
&lt;p&gt;Obsidian playbook: &lt;a href=&quot;https://notes.nicolevanderhoeven.com/obsidian-playbook/Obsidian+Playbook+Readme&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://notes.nicolevanderhoeven.com/obsidian-playbook/Obsidian+Playbook+Readme&lt;/a&gt;&lt;br /&gt;
Styling with CSS: &lt;a href=&quot;https://help.obsidian.md/Extending+Obsidian/CSS+snippets&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CSS snippets - Obsidian Help&lt;/a&gt;&lt;br /&gt;
Available variables and classes: &lt;a href=&quot;https://docs.obsidian.md/Themes/App+themes/Build+a+theme#Step%207%20Discover%20CSS%20variables%20in%20use&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Build a theme - Developer Documentation (obsidian.md)&lt;/a&gt;&lt;br /&gt;
List of supported codeblock languages (Prism is the library used by Obsidian): &lt;a href=&quot;https://prismjs.com/#supported-languages&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://prismjs.com/#supported-languages&lt;/a&gt;&lt;br /&gt;
Obsidian is rendering using a web-browser, so you can always &lt;code&gt;Ctrl + Shift + I&lt;/code&gt; in Obsidian to bring up the dev tools (including the inspector to check individual classes and styling options).&lt;/p&gt;
&lt;h1 id=&quot;testing&quot; tabindex=&quot;-1&quot;&gt;Testing&lt;/h1&gt;
&lt;p&gt;This section is for testing CSS styling and the publishing results of the digital garden plugin...&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-shell&quot;&gt;~~~
foobar
~~~
cat foo.bar | grep test
[[Text that looks like a link]]
[[another|link]]
```C
int main() { return 0; }
```
baz
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Link to heading: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#callouts&quot;&gt;#Callouts&lt;/a&gt;&lt;br /&gt;
Link to document with &amp;amp;: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/data-structures-and-algorithms/&quot;&gt;Data Structures &amp;amp; Algorithms&lt;/a&gt;&lt;br /&gt;
Link to document with &amp;amp; and heading: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/data-structures-and-algorithms/#hash-tables&quot;&gt;Data Structures &amp;amp; Algorithms#Hash Tables&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;heading-1&quot; tabindex=&quot;-1&quot;&gt;Heading 1&lt;/h1&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;h2 id=&quot;heading-2&quot; tabindex=&quot;-1&quot;&gt;Heading 2&lt;/h2&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;h3 id=&quot;heading-3&quot; tabindex=&quot;-1&quot;&gt;Heading 3&lt;/h3&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;h4 id=&quot;heading-4&quot; tabindex=&quot;-1&quot;&gt;Heading 4&lt;/h4&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;h5 id=&quot;heading-5&quot; tabindex=&quot;-1&quot;&gt;Heading 5&lt;/h5&gt;
&lt;p&gt;Test&lt;/p&gt;
&lt;h6 id=&quot;heading-6&quot; tabindex=&quot;-1&quot;&gt;Heading 6&lt;/h6&gt;
&lt;p&gt;Test&lt;/p&gt;

            </content>
            <link href="https://janek.ing/tech/obsidian/" >
        </entry>
        <entry>
            <title>
                NodeRed
                
            </title>
            <updated>2025-05-26T12:51:52.521Z</updated>
            <id>https://janek.ing/tech/node-red/</id>
            <content type="html">
                &lt;h2 id=&quot;function-node-rueckgabewert&quot; tabindex=&quot;-1&quot;&gt;Function node - Rückgabewert&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Message passthorugh, normal return
return msg;
// Will stop flow at this point and not pass anything to next node
return null;
// Send array of messages to single output
arr = new Array(10);
return [arr];
return [[msg1, msg2, msg3]];
// Send msg1 to output 1, msg2 to output 2, msg3 to output 3
return [msg1, msg2, msg3];
// Send msg only to second output (of 4)
return [null, msg, null, null];
// Send 2 messages to first output, none to second, one to third
return [[msg1, msg2], null, msg3];
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;context&quot; tabindex=&quot;-1&quot;&gt;Context&lt;/h2&gt;
&lt;p&gt;Daten lesen und speichern. Doku: &lt;a href=&quot;https://nodered.org/docs/user-guide/writing-functions#storing-data&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Writing Functions : Node-RED (nodered.org)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;let data = context.get(&amp;quot;key&amp;quot;)
context.set(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;);
let data = flow.get(&amp;quot;key&amp;quot;);
flow.set(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;);
let data = global.get(&amp;quot;key&amp;quot;);
global.set(&amp;quot;key&amp;quot;, &amp;quot;value&amp;quot;);
// get/set multiple (NodeRED 0.19+)
var values = flow.get([&amp;quot;count&amp;quot;, &amp;quot;colour&amp;quot;, &amp;quot;temperature&amp;quot;]);
// values[0] is the &#39;count&#39; value
// values[1] is the &#39;colour&#39; value
// values[2] is the &#39;temperature&#39; value
flow.set([&amp;quot;count&amp;quot;, &amp;quot;colour&amp;quot;, &amp;quot;temperature&amp;quot;], [123, &amp;quot;red&amp;quot;, &amp;quot;12.5&amp;quot;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; - Node
&lt;ul&gt;
&lt;li&gt;Wird gelöscht/zurückgesetzt, wenn sich Node ändert (Titel, Inhalt, Verknüpfungen und Position im Flow sind egal)&lt;/li&gt;
&lt;li&gt;Nur im ausführenden Node verfügbar (gleicher Key in anderem Node liefert andere Daten)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;flow&lt;/code&gt; - Flow
&lt;ul&gt;
&lt;li&gt;Wird zurückgesetzt, wenn sich Flow maßgeblich ändert (Nicht ganz klar wann das ist. Bewegungen sind egal, Löschen von Verknüpfungen und einzelnen Nodes auch)&lt;/li&gt;
&lt;li&gt;Nur im ausführenden Flow verfügbar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;global&lt;/code&gt; - NodeRed Instanz
&lt;ul&gt;
&lt;li&gt;Wird vermutlich zurückgesetzt, wenn sich Instanz neu startet&lt;/li&gt;
&lt;li&gt;Flow- und Node-übergreifend verfügbar (Keys überschreiben aber nicht Daten mit gleichem Key in &lt;code&gt;context&lt;/code&gt; oder &lt;code&gt;flow&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Werte können beliebigen Typs sein&lt;/li&gt;
&lt;li&gt;Es ist auch möglich Werte asynchron zu lesen/schreiben (aber wer braucht das?)&lt;/li&gt;
&lt;li&gt;Seit 0.19 kann man auch den Speicherort explizit angeben (sofern mehrere eingerichtet sind)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;node-status&quot; tabindex=&quot;-1&quot;&gt;Node Status&lt;/h2&gt;
&lt;p&gt;Doku: &lt;a href=&quot;https://nodered.org/docs/creating-nodes/status&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Node status : Node-RED (nodered.org)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;node.status({fill:&amp;quot;red&amp;quot;,shape:&amp;quot;ring&amp;quot;,text:&amp;quot;disconnected&amp;quot;});
node.status({fill:&amp;quot;green&amp;quot;,shape:&amp;quot;dot&amp;quot;,text:&amp;quot;connected&amp;quot;});
node.status({text:&amp;quot;Just text status&amp;quot;});
node.status({});   // to clear the status
// The `shape` property can be: `ring` or `dot`.
// The `fill` property can be: `red`, `green`, `yellow`, `blue` or `grey`

// Example:
this.status({fill:&amp;quot;red&amp;quot;,shape:&amp;quot;ring&amp;quot;,text:&amp;quot;disconnected&amp;quot;});
this.status({fill:&amp;quot;green&amp;quot;,shape:&amp;quot;dot&amp;quot;,text:&amp;quot;connected&amp;quot;});
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240621141018.png&quot; alt=&quot;Pasted image 20240621141018.png&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;url-parameter&quot; tabindex=&quot;-1&quot;&gt;URL Parameter&lt;/h2&gt;
&lt;p&gt;TODO&lt;br /&gt;
&lt;code&gt;{{{field of msg object}}}&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;nuetzliche-links&quot; tabindex=&quot;-1&quot;&gt;Nützliche Links&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nodered.org/docs/user-guide/messages&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Working with messages : Node-RED (nodered.org)&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/tech/node-red/" >
        </entry>
        <entry>
            <title>
                Linux
                
            </title>
            <updated>2025-05-20T18:20:17.876Z</updated>
            <id>https://janek.ing/tech/linux/</id>
            <content type="html">
                &lt;h2 id=&quot;folder-structure&quot; tabindex=&quot;-1&quot;&gt;Folder structure&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;/bin - essential binaries for all users (like cd, bash)
/sbin - admin system binaries
/boot - files for booting (like the kernel)
/dev - device files (file-like access to (virtual) hardware)
	/dev/sda - first SATA drive
	/dev/random - random number generator
	/dev/null - no output, discard all input
	/dev/zero - infinite 0s
/etc - configuration files for programs
/home - home folders for each user (alias ~)
	/home/username - also contains userspace config files
/lib - system library files (needed for programs in /bin)
/lost+found - corrupted files after a crash will end here
/media - removable media (USB-Drives, CDs, etc.)
/mnt - manual mounting points (created by admins)
/opt - optional software
/proc - contains info about running processes
/root - home folder for root user
/tmp - temporary files (no guaranteed persistance)
/usr - user binaries and program data
	/usr/bin - userspace /bin (contains most programs)
	/usr/sbin - admin programs
	/usr/lib - library files
	/usr/share - documentation
	/usr/include - include files for compiling
/var - runtime information stored by programs (logs, cache)
	/var/log/wtmp - login history
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;chmod&quot; tabindex=&quot;-1&quot;&gt;chmod&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Permission&lt;/th&gt;
&lt;th&gt;Sum&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;– – –&lt;/td&gt;
&lt;td&gt;0+0+0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;– – x&lt;/td&gt;
&lt;td&gt;0+0+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;– w –&lt;/td&gt;
&lt;td&gt;0+2+0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;– w x&lt;/td&gt;
&lt;td&gt;0+2+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;r – –&lt;/td&gt;
&lt;td&gt;4+0+0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;r – x&lt;/td&gt;
&lt;td&gt;4+0+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;r w –&lt;/td&gt;
&lt;td&gt;4+2+0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;r w x&lt;/td&gt;
&lt;td&gt;4+2+1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Three groups:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;One permission for the &lt;em&gt;owner,&lt;/em&gt; the person who created the file or folder.&lt;/li&gt;
&lt;li&gt;One permission for all of the people in the same primary &lt;em&gt;group&lt;/em&gt; of the owner.&lt;/li&gt;
&lt;li&gt;One permission for everyone else, which includes &lt;em&gt;unauthenticated and anonymous users&lt;/em&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To change all directories under the current path to 755 (&lt;code&gt;drwxr-xr-x&lt;/code&gt;), excluding dotfiles (recursive):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;find . ! -path . ! -path &#39;*/.*&#39; -type d -exec chmod 755 &#39;{}&#39; &#92;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To change all files in the current path to 644 (&lt;code&gt;-rw-r--r--&lt;/code&gt;), excluding dotfiles (recursive):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;find . ! -path &#39;*/.*&#39; -type f -exec chmod 644 &#39;{}&#39; &#92;;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;chown&quot; tabindex=&quot;-1&quot;&gt;chown&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://linuxize.com/post/linux-chown-command/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Chown Command in Linux (File Ownership) | Linuxize&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;chown -R USER:GROUP ./ 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;which&quot; tabindex=&quot;-1&quot;&gt;which&lt;/h2&gt;
&lt;p&gt;Find out where binary lives&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;which curl
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;find-process&quot; tabindex=&quot;-1&quot;&gt;Find process&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ps -aux | grep [keyword]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: show all processes (including root, system, etc.), not just the ones belonging to current user&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt;: show in &amp;quot;user oriented format&amp;quot;, i.e. table with more information&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;: show background processes and daemons without controlling terminal (tty)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;find-text-in-files&quot; tabindex=&quot;-1&quot;&gt;Find text in files&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;grep -HiRn [text] [files/folders]
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-H&lt;/code&gt;: print out filename of result&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: ignore case&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-R&lt;/code&gt;: recursive search in passed folders, follow symlinks&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: print line-number of result&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;find-previous-command&quot; tabindex=&quot;-1&quot;&gt;Find previous command&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;history | grep [command]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;find-text-or-files-starting-with-minus&quot; tabindex=&quot;-1&quot;&gt;Find text or files starting with minus -&lt;/h2&gt;
&lt;p&gt;Passing arguments which starts with a minus to a tool will be usually interpreted as an option. This creates a problem when you want to delete a filename or grep text starting with a minus.&lt;br /&gt;
Solution: Pass &lt;code&gt;--&lt;/code&gt; to signify the end of the options.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ps --help | grep -- -a
rm -- --somefile.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://unix.stackexchange.com/a/87357&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://unix.stackexchange.com/a/87357&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;compress-extract-zip-files&quot; tabindex=&quot;-1&quot;&gt;Compress / extract zip files&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;tar -czf [filename/folder]
tar -xzf [filename]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;quot;Compres Ze File&amp;quot; / &amp;quot;Xtract Ze File&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-c&lt;/code&gt;: compress&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-x&lt;/code&gt;: extract&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-z&lt;/code&gt;: use gzip&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-f&lt;/code&gt;: use file archive&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;show-active-network-connections&quot; tabindex=&quot;-1&quot;&gt;Show active network connections&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;netstat -tulpen
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-t&lt;/code&gt;: show TCP connections.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-u&lt;/code&gt;: show UDP connections.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: list only listening sockets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;: show the PID and name of the program to which each socket belongs.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e&lt;/code&gt;: display extended information, including user ID and inode.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-n&lt;/code&gt;: show numerical addresses instead of resolving hostnames.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;show-filesystems&quot; tabindex=&quot;-1&quot;&gt;Show filesystems&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;df -Thal
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-T&lt;/code&gt;: show the file system type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: display sizes in a human-readable format (e.g., KB, MB, GB).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: include all file systems, even those that are not currently mounted.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: limit the output to local file systems only.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;show-disk-usage&quot; tabindex=&quot;-1&quot;&gt;Show disk usage&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;du -hs *
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: display sizes in a human-readable format (e.g., KB, MB, GB).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;: provide a summary of the disk usage for each specified file or directory, rather than listing the usage for each individual file within directories.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;show-files-in-current-folder-detailed&quot; tabindex=&quot;-1&quot;&gt;Show files in current folder (detailed)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;ls -lisah
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt;: Uses a long listing format, providing detailed information about each file and directory, such as permissions, number of links, owner, group, size, and modification date.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;/code&gt;: Shows the inode number for each file and directory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-s&lt;/code&gt;: Displays the size of each file in blocks.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt;: Includes all files, even those that are hidden (files starting with a dot &lt;code&gt;.&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: Displays sizes in a human-readable format (e.g., KB, MB, GB).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;logrotate&quot; tabindex=&quot;-1&quot;&gt;Logrotate&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING]&lt;br /&gt;
Does not work properly on CentOS6, but seems to work as intended on Ubuntu 24.04&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://linux.die.net/man/8/logrotate&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://linux.die.net/man/8/logrotate&lt;/a&gt;&lt;br /&gt;
Put a file (usually named after the program/logfile you are rotating) in &lt;code&gt;/etc/logrotate.d/&lt;/code&gt;. For example: &lt;code&gt;/etc/logrotate.d/mosquitto&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/var/log/mosquitto/mosquitto.log {
    rotate 12
    monthly
    compress
    delaycompress
    size 100k
    nocreate
    missingok
    postrotate
        if invoke-rc.d mosquitto status &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; then &#92;
            invoke-rc.d mosquitto reload &amp;gt; /dev/null 2&amp;gt;&amp;amp;1; &#92;
        fi;
    endscript
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rotate 12&lt;/code&gt;: keeps at most 12 versions of the file specified at the very beginning&lt;/li&gt;
&lt;li&gt;&lt;code&gt;monthly&lt;/code&gt;: rotate on first run of the month (i.e. keep one file per month), can also be daily, weekly or yearly&lt;/li&gt;
&lt;li&gt;&lt;code&gt;compress&lt;/code&gt;, &lt;code&gt;delaycompress&lt;/code&gt;: compress rotated files after 2 rotations (i.e. keep file for current and last month uncompressed)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;size&lt;/code&gt;: rotate only if size is bigger than specified limit (100k = 100KiB, 100M = 100MiB, 100G = 100Gib)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nocreate&lt;/code&gt;: logrotate does not create the new log file after rotating (the original program has to do it)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;missingok&lt;/code&gt;: don&#39;t raise an error if file is missing&lt;/li&gt;
&lt;li&gt;&lt;code&gt;postrotate&lt;/code&gt;: what to do after rotation - we just kept the script, which was generated by mosquitto on install&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/tech/linux/" >
        </entry>
        <entry>
            <title>
                Illustrator
                
            </title>
            <updated>2025-05-24T10:59:53.509Z</updated>
            <id>https://janek.ing/tech/illustrator/</id>
            <content type="html">
                &lt;h2 id=&quot;objekte-auf-pfad-verteilen-spezialpinsel&quot; tabindex=&quot;-1&quot;&gt;Objekte auf Pfad verteilen, Spezialpinsel&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=bcOK-uNnCjU&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=bcOK-uNnCjU&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;abgerundetes-rechteck&quot; tabindex=&quot;-1&quot;&gt;Abgerundetes Rechteck&lt;/h2&gt;
&lt;p&gt;Mit entsprechendem Werkzeug: Pfeiltasten zur Veränderung des Radius bei Erstellung (oder einfacher Linksklick öffnet Dialog zum Erstellen aus Werten)&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sachaheck.net/blog/illustrator/illustrator-abgerundetes-rechteck-werkzeug-eckenh-bearbeiten&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.sachaheck.net/blog/illustrator/illustrator-abgerundetes-rechteck-werkzeug-eckenh-bearbeiten&lt;/a&gt;&lt;br /&gt;
Alternative: Normales Rechteck zeichnen und dann Effekt -&amp;gt; In Form Umwandeln -&amp;gt; Abgerundetes Rechteck&lt;br /&gt;
Hier kann der Radius zahlenmäßig eingestellt und nachträglich verändert werden. Allerdings wird die äußere Kontur für die neue Form genommen. Das verhält sich nicht wie erwartet bei Drehung oder Bearbeitung bspw. mit dem Messer.&lt;br /&gt;
Objekt -&amp;gt; Aussehen umwandeln löst den Effekt auf und erstellt einen Pfad daraus.&lt;/p&gt;
&lt;h2 id=&quot;pfad-umkehren&quot; tabindex=&quot;-1&quot;&gt;Pfad umkehren&lt;/h2&gt;
&lt;p&gt;Mit Zeichenstift Werkzeug einen Endpunkt des offenen Pfades anklicken.&lt;/p&gt;
&lt;h2 id=&quot;bild-in-pfad-umwandeln-hintergrund-entfernen&quot; tabindex=&quot;-1&quot;&gt;Bild in Pfad umwandeln / Hintergrund entfernen&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020241218212512.png&quot; alt=&quot;Pasted image 20241218212512.png&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Einstellungen im Bildnachzeichner setzen&lt;/li&gt;
&lt;li&gt;Objekt &amp;gt; Umwandeln
&lt;ol&gt;
&lt;li&gt;oder: Objekt &amp;gt; Bildnachzeichner &amp;gt; Umwandeln&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;objekt-lineares-muster&quot; tabindex=&quot;-1&quot;&gt;Objekt - lineares Muster&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020241218212226.png&quot; alt=&quot;Pasted image 20241218212226.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020241218212251.png&quot; alt=&quot;Pasted image 20241218212251.png&quot; /&gt;&lt;br /&gt;
&lt;a href=&quot;https://graphicdesign.stackexchange.com/questions/95167/how-to-have-multiple-instances-of-the-same-object-in-illustrator-cc-2015&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://graphicdesign.stackexchange.com/questions/95167/how-to-have-multiple-instances-of-the-same-object-in-illustrator-cc-2015&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;schnittmaske&quot; tabindex=&quot;-1&quot;&gt;Schnittmaske&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Objekt zur Schnittmaske auf selber Ebene muss oben liegen (Fenster &amp;gt; Ebenen)&lt;/li&gt;
&lt;li&gt;Mehrere Objekte auswählen&lt;/li&gt;
&lt;li&gt;Objekt &amp;gt; Schnittmaske &amp;gt; Erstellen&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;gruppe-umranden&quot; tabindex=&quot;-1&quot;&gt;Gruppe umranden&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.vektorgarten.de/tipps-konstruktion.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.vektorgarten.de/tipps-konstruktion.html&lt;/a&gt; -&amp;gt;&amp;quot;Objekte mit einer gemeinsamen Kontur versehen&amp;quot; + weitere Tips!&lt;br /&gt;
&lt;a href=&quot;https://www.vektorgarten.de/illu-tipps-typo.html#2xinline&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.vektorgarten.de/illu-tipps-typo.html#2xinline&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Objekte gruppieren&lt;/li&gt;
&lt;li&gt;Der Gruppe eine Kontur hinzufügen&lt;/li&gt;
&lt;li&gt;Der Kontur den Effekt hinzufügen Pathfinder -&amp;gt; Hinzufügen&lt;/li&gt;
&lt;li&gt;Bei weiteren Umrandungen jeweils noch Pfad -&amp;gt; Pfad verschieben hinzufügen&lt;/li&gt;
&lt;/ol&gt;

            </content>
            <link href="https://janek.ing/tech/illustrator/" >
        </entry>
        <entry>
            <title>
                HDD
                
            </title>
            <updated>2025-05-24T10:54:44.262Z</updated>
            <id>https://janek.ing/tech/hdd/</id>
            <content type="html">
                &lt;h2 id=&quot;smr-vs-cmr-pmr&quot; tabindex=&quot;-1&quot;&gt;SMR vs CMR/PMR&lt;/h2&gt;
&lt;p&gt;Bei SMR werden die Daten leicht überlappend geschrieben. Dadurch wird eine höhere Speicherdichte erreicht, aber die Schreibraten leiden bei langen Schreibprozessen. Außerdem gibt es Erfahrungsberichte, wo SMR Platten nicht so lange halten und Datenverlust auftritt.&lt;br /&gt;
SMR ist stromsparender und oft günstiger (bei gleicher Speichergröße).&lt;br /&gt;
NAS Laufwerke sind meist CMR/PMR. Günstige Consumer Laufwerke oft SMR. Aber Achtung: WD hat zwischen 2 Modellgenerationen von CMR zu SMR gewechselt (WD Red). Das Datenblatt gibt hier meist mehr Auskunft (entweder direkt oder über eine Speicherdichte &amp;gt;1000GB/in²).&lt;br /&gt;
Generell sollte man zu CMR/PMR greifen, da die Vorteile überwiegen.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.reichelt.de/magazin/ratgeber/smr-cmr-welche-festplatte-eignet-sich-am-besten-fuer-welchen-zweck/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;SMR? CMR? Welche Festplatte eignet sich am besten für welchen Zweck? - reichelt Magazin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.hardwareluxx.de/index.php/artikel/hardware/storage/51244-cmr-smr-der-hdd-guide-zu-den-verschiedenen-aufnahmemethoden.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CMR/SMR: Der HDD-Guide zu den verschiedenen Aufnahmemethoden - Hardwareluxx&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;u-min&quot; tabindex=&quot;-1&quot;&gt;U/min&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mehr = schneller (lesen/schreiben), aber lauter und stromhungriger&lt;/li&gt;
&lt;li&gt;Gaming/Performance: 7200+&lt;/li&gt;
&lt;li&gt;NAS/Archiv: 5400&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cache&quot; tabindex=&quot;-1&quot;&gt;Cache&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generell: Mehr = besser&lt;/li&gt;
&lt;li&gt;Cache ist meist SSD-Technik und deutlich schneller als Platten&lt;/li&gt;
&lt;li&gt;je größer, desto eher passen ganze Dateien in Cache, was kleine Lese- oder Schreibvorgänge beschleunigt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;festplatten-arten&quot; tabindex=&quot;-1&quot;&gt;Festplatten Arten&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;z.B. WD Black/Blue/Red&lt;/li&gt;
&lt;li&gt;Am besten auf der Hersteller-Webseite gucken, für welchen Anwendungsfall die Bauart gedacht ist und sich an diese Angabe halten.&lt;/li&gt;
&lt;li&gt;Unterschiede sind Bauart (Anzahl Platten), U/min, SMR vs. CMR, Firmware, etc.&lt;/li&gt;
&lt;li&gt;NAS Festplatten sind bspw. darauf ausgelegt dauerhaft zu laufen und verkraften evtl. nicht so viele Spindowns und -ups&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/tech/hdd/" >
        </entry>
        <entry>
            <title>
                Database Types
                
            </title>
            <updated>2025-05-23T12:19:10.695Z</updated>
            <id>https://janek.ing/tech/database-types/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=W2Z7fbCLSTw&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;7 Database Paradigms (youtube.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-key-value&quot; tabindex=&quot;-1&quot;&gt;1. Key-Value&lt;/h2&gt;
&lt;p&gt;Example: Redis, Memcached&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entries are just pairs of keys and values&lt;/li&gt;
&lt;li&gt;Database is usually stored in memory&lt;/li&gt;
&lt;li&gt;Very fast, but limited space (amount of RAM)&lt;/li&gt;
&lt;li&gt;No advanced queries (e.g. join, filter), just set and get&lt;br /&gt;
Good for: Caching, Pub/Sub, Highscores, unstructured data&lt;br /&gt;
Not: Main/persistent app data, complex relations&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-wide-column&quot; tabindex=&quot;-1&quot;&gt;2. Wide-column&lt;/h2&gt;
&lt;p&gt;Example: Cassandra, Hbase&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fixed columns for values&lt;/li&gt;
&lt;li&gt;Key -&amp;gt; row of values&lt;/li&gt;
&lt;li&gt;No schema (data types for columns is not fixed)&lt;/li&gt;
&lt;li&gt;Query language is like SQL, but simpler (no join)&lt;/li&gt;
&lt;li&gt;Scales well horizontally&lt;br /&gt;
Good for: Time-series, historical records, high-write to low-read ratio&lt;br /&gt;
Not: Primary app database&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-document&quot; tabindex=&quot;-1&quot;&gt;3. Document&lt;/h2&gt;
&lt;p&gt;Example: MongoDB, Firestore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data is collection of documents&lt;/li&gt;
&lt;li&gt;Collections and documents can have hierarchy&lt;/li&gt;
&lt;li&gt;Documents are key-value stores (unstructured, without schema)&lt;/li&gt;
&lt;li&gt;Very flexible in data modeling&lt;/li&gt;
&lt;li&gt;Quite complex on the inside&lt;/li&gt;
&lt;li&gt;SQL: group data by content-type (posts, comments, authors, etc.) &amp;lt;-&amp;gt; Mongo: group data by application&lt;/li&gt;
&lt;li&gt;Reads can be faster (get all data for blog post from one source), but writes can be complex (update author name needs to touch all documents by that author)&lt;/li&gt;
&lt;li&gt;No join, but data can be grouped into &amp;quot;master&amp;quot; document by references&lt;br /&gt;
Good for: it is very general purpose, unstructured data&lt;br /&gt;
Not: it is too general purpose, also graphs (needs join)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-relational&quot; tabindex=&quot;-1&quot;&gt;4. Relational&lt;/h2&gt;
&lt;p&gt;Example: MySQL, Postgres&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data is grouped by content-type (e.g. 3 tables for users, comments, posts)&lt;/li&gt;
&lt;li&gt;Each entry has its own unique key&lt;/li&gt;
&lt;li&gt;Entries can reference elements from other tables by these keys&lt;/li&gt;
&lt;li&gt;Join fetches the data from the referenced &amp;quot;foreign&amp;quot; tables into one&lt;/li&gt;
&lt;li&gt;Schema is required (column names and data-types are fixed)&lt;/li&gt;
&lt;li&gt;ACID complicant: atomicity, consistency, isolation, durability&lt;/li&gt;
&lt;li&gt;Difficult to scale&lt;br /&gt;
Good for: most data&lt;br /&gt;
Not: unstructured data&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-graph&quot; tabindex=&quot;-1&quot;&gt;5. Graph&lt;/h2&gt;
&lt;p&gt;Example: Neo4j, Dgraph&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data is nodes, relationships are edges in a graph&lt;/li&gt;
&lt;li&gt;Custom query language&lt;/li&gt;
&lt;li&gt;No join required, queries can be more concise&lt;br /&gt;
Good for: graphs, recommendation engines&lt;br /&gt;
Not: not-graphs?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-search-index&quot; tabindex=&quot;-1&quot;&gt;6. Search / Index&lt;/h2&gt;
&lt;p&gt;Example: Elasticsearch, Lucene, Solr, Meiliserach&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Similar to Document-type&lt;/li&gt;
&lt;li&gt;DB analyzes text in documents and creates index of searchable terms&lt;/li&gt;
&lt;li&gt;Can add algorithms for ranking, spell-checking, filtering, etc.&lt;/li&gt;
&lt;li&gt;Very fast for its main purpose (search only hits index, not all documents)&lt;/li&gt;
&lt;li&gt;Adds overhead, can be expensive at scale&lt;br /&gt;
Good for: Search&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-multi-model&quot; tabindex=&quot;-1&quot;&gt;7. Multi-model&lt;/h2&gt;
&lt;p&gt;Example: FaunaDB&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Frontend describes how it wants to access data in GraphQL schema&lt;/li&gt;
&lt;li&gt;Fauna creates collections and index from schema&lt;/li&gt;
&lt;li&gt;Uses multiple DB models in background&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/tech/database-types/" >
        </entry>
        <entry>
            <title>
                Cryptography, RSA, SSL
                
            </title>
            <updated>2025-05-24T10:53:57.515Z</updated>
            <id>https://janek.ing/tech/cryptography-rsa-ssl/</id>
            <content type="html">
                &lt;h2 id=&quot;allgemeines&quot; tabindex=&quot;-1&quot;&gt;Allgemeines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ein Zertifikat enthält den Public Key (und weitere Textinformationen über die Webseite, Ablaufdatum, etc.) und wurde mithilfe des Private Keys erstellt&lt;/li&gt;
&lt;li&gt;Trapdoor-Funktion: Mathematisch sehr &amp;quot;einfach&amp;quot; in eine Richtung zu lösen, aber nahezu unmöglich umzukehren&lt;/li&gt;
&lt;li&gt;Encryption: Nutzt den public key des Empfängers um Nachricht zu verschlüsseln&lt;/li&gt;
&lt;li&gt;Decryption: Empfänger nutzt seinen Private Key, um Nachricht zu entschlüsseln. Nur Empfänger hat Private Key und Inhalt der Nachricht ist so sicher.&lt;/li&gt;
&lt;li&gt;Sign: Nutzt eigenen Private Key, um Nachricht (bzw. Hash der Nachricht wegen Längenbeschränkungen) zu verschlüsseln&lt;/li&gt;
&lt;li&gt;Verify: Nutzt Public Key des Senders, um Nachricht=Hash zu entschlüsseln und vergleicht mit Hash der Nachricht. Jeder hat Zugang zum Public Key und kann so die Echtheit der Nachricht verifizieren.&lt;/li&gt;
&lt;li&gt;RSA / DSA / EC (Elliptic Curve): unterschiedliche Methoden zur Generierung der Schlüssel&lt;/li&gt;
&lt;li&gt;PKCS#8: Aktuelles Format für Private-Keys (in PEM erkennbar am Header &lt;code&gt;BEGIN PRIVATE KEY&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;PKCS#1: Veraltetes Format für Keys (in PEM erkennbar am Header &lt;code&gt;BEGIN RSA PRIVATE KEY&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Das Zertifikat einer RootCA reicht aus, um allen untergeordneten Zertifikaten von dieser RootCA zu vertrauen (so validiert der Browser bspw. auch LetsEncrypt Zertifikate - er kann nicht die Zertifikate aller Webseiten kennen)&lt;br /&gt;
Mehr Info zu PKCS: &lt;a href=&quot;https://crypto.stackexchange.com/a/103585&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://crypto.stackexchange.com/a/103585&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dateitypen&quot; tabindex=&quot;-1&quot;&gt;Dateitypen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.pem&lt;/code&gt; - Format für Keys / Zertifikate / CSR, Base64-kodiert. Standardformat von OpenSSL.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.der&lt;/code&gt; - binär-kodiertes Äquivalent zu .pem&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.key&lt;/code&gt; - Meistens der Private-Key, kann auch der Public-Key sein. Meist im PEM-Format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.ppk&lt;/code&gt; - Putty Private Key. Dateiformat, welches von Putty erzeugt wird.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pub&lt;/code&gt; - Nicht standardisiert, wird oft für Public Keys verwendet. Meist PEM-Format.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.csr&lt;/code&gt; - Certificate Signing Request. Enthält Public Key und Name der Certificate Authority (CA). Wird mit Private Key erstellt und genutzt, um Zertifikat auszustellen.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.crt&lt;/code&gt; - Zertifikat, meistens X509, kann PEM- oder DER-kodiert sein.&lt;br /&gt;
Mehr Infos: &lt;a href=&quot;https://crypto.stackexchange.com/a/43700&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://crypto.stackexchange.com/a/43700&lt;/a&gt;&lt;br /&gt;
Weitere Formate (wie PKCS#7): &lt;a href=&quot;https://comodosslstore.com/resources/a-ssl-certificate-file-extension-explanation-pem-pkcs7-der-and-pkcs12/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;A SSL Certificate File Extension Explanation: PEM, PKCS7, DER, and PKCS#12 - Comodo SSL Resources&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;PEM:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-----BEGIN ENCRYPTED PRIVATE KEY-----
...
-----END ENCRYPTED PRIVATE KEY-----
-----BEGIN PRIVATE KEY-----
...
-----END PRIVATE KEY-----
-----BEGIN CERTIFICATE-----
...
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE REQUEST-----
...
-----END CERTIFICATE REQUEST-----
etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PPK:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;TODO
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DSR:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;just a bunch of binary data&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;one-way-tls-auth&quot; tabindex=&quot;-1&quot;&gt;One-way TLS auth&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/I0612.jpg&quot; alt=&quot;I0612.jpg&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;two-way-tls-auth&quot; tabindex=&quot;-1&quot;&gt;Two-way TLS auth&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/SGyYa.png&quot; alt=&quot;SGyYa.png&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;open-ssl-befehle&quot; tabindex=&quot;-1&quot;&gt;OpenSSL Befehle&lt;/h2&gt;
&lt;p&gt;OpenSSL kommt mit GitForWindows: &lt;code&gt;C:&#92;Program Files&#92;Git&#92;usr&#92;bin&#92;openssl.exe&lt;/code&gt;&lt;br /&gt;
Getestet mit Version: &lt;code&gt;OpenSSL 3.2.3 3 Sep 2024 (Library: OpenSSL 3.2.3 3 Sep 2024)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;key-pair-erzeugen-pem&quot; tabindex=&quot;-1&quot;&gt;Key-Pair erzeugen (PEM)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# Will promt for password
# Can also supply pw: -pass pass:very4secure%pass
# -des3 instead of -aes-128-cbc is also okay
openssl genpkey -algorithm RSA -out private.key -outpubkey public.pub -aes-128-cbc
# Privte-Key ohne Verschlüsselung
openssl genpkey -algorithm RSA -out private.key
# Public-Key aus Private-Key erzeugen
openssl rsa -in private.key -pubout &amp;gt; public.pub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Unter Windows: private.key ist ggf. UTF-16 und muss noch zu UTF-8 konvertiert werden &lt;a href=&quot;https://superuser.com/a/1778270&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://superuser.com/a/1778270&lt;/a&gt; (PowerShell 5.1 utf-8 ist mit BOM, aber das funktioniert mit mbedtls trotzdem)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;$PSDefaultParameterValues[&#39;Out-File:Encoding&#39;] = &#39;utf8&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Alternativ zu &lt;code&gt;genpkey&lt;/code&gt; kann auch &lt;code&gt;genrsa&lt;/code&gt; genutzt werden:&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/65449771/difference-between-openssl-genrsa-and-openssl-genpkey-algorithm-rsa&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ssl - Difference between &lt;code&gt;openssl genrsa&lt;/code&gt; and &lt;code&gt;openssl genpkey -algorithm rsa&lt;/code&gt;? - Stack Overflow&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/25459512/what-is-diffrent-between-rsa-and-rsa-des3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/25459512/what-is-diffrent-between-rsa-and-rsa-des3&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;self-signed-root-ca-zertifikat-erzeugen&quot; tabindex=&quot;-1&quot;&gt;Self-Signed RootCA-Zertifikat erzeugen&lt;/h3&gt;
&lt;p&gt;Voraussetzung: Private Key&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# CSR erzeugen. Man wird nach Infos zur CA gefragt
# Challenge Passwort kann leer gelassen werden
openssl req -new -key private.key -out csr.pem
# X509v3 RootCA erzeugen
# Gültigkeitsdauer wie gewünscht anpassen
openssl req -x509 -days 365 -key private.key -in csr.pem -out root.crt
# Ohne CSR
openssl req -new -x509 -days 365 -key rootCA.key -out rootCA.crt
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Man kann den Schritt mit dem CSR überspringen und den &lt;code&gt;-in&lt;/code&gt; Parameter beim Erstellen des Zertifikats weglässt. Man muss dann in diesem Schritt die Infos eingeben.&lt;br /&gt;
Der CSR ist nützlich, wenn man ein Zertifikat erneuern möchte, ohne nochmal die ganzen Infos (Land, E-Mail, etc.) einzugeben. Wenn man das RootCA-Zertifikat nie erneuern möchte (lange Gültigkeitsdauer), kann man sich den CSR sparen.&lt;/p&gt;
&lt;p&gt;Infos zu &amp;quot;Challenge Password&amp;quot;: &lt;a href=&quot;https://security.stackexchange.com/questions/77028/whats-the-use-of-challenge-password-in-build-key-server-and-build-key-from-easy/77082#77082&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;openssl - What&#39;s the use of challenge password in build-key-server and build-key from Easy-RSA? - Information Security Stack Exchange&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;self-signed-untergeordnetes-zertifikat-erzeugen&quot; tabindex=&quot;-1&quot;&gt;Self-Signed (untergeordnetes) Zertifikat erzeugen&lt;/h3&gt;
&lt;p&gt;Voraussetzungen: Private Key (idealerweise 2: für RootCA und neues Zertifikat) und RootCA-Zertifikat&lt;/p&gt;
&lt;p&gt;Konfigurationsdatei &lt;code&gt;subordinate.cnf&lt;/code&gt; erstellen:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-ini&quot;&gt;[ v3_ca ]
basicConstraints = CA:FALSE
authorityKeyIdentifier=keyid,issuer
keyUsage = nonRepudiation, digitalSignature, keyEncipherment, dataEncipherment
subjectAltName = @alt_names

[ alt_names ]
DNS.1 = yourdomain.com
DNS.2 = www.yourdomain.com
DNS.3 = 192.168.1.114
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;subjectAltName&lt;/code&gt;  und der &lt;code&gt;alt_names&lt;/code&gt; Block sind optional.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;# CSR
openssl req -new -key subordinate.key -out subordinate.csr
# Zertifikat mit Config
# Gültigkeitsdauer wie gewünscht anpassen
openssl x509 -req -days 3650 -in subordinate.csr -CA root.crt -CAkey root.key -CAcreateserial -out subordinate.crt -extfile subordinate.cnf -extensions v3_ca
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Wenn man die Konfigurationsdatei nicht verwendet (und &lt;code&gt;-extensions&lt;/code&gt; sowie &lt;code&gt;-extfile&lt;/code&gt; weglässt), wird ein X509v1 Zertifikat erstellt. Dies ist ein veralteter Standard und kann Probleme mit neuen Rust-Libraries (siehe Links unten), sowie der Erkennung in Chrome machen.&lt;br /&gt;
Ggf. werden aber X509v3 Zertifikate aber von manchen MQTT-Brokern nicht erkannt (Aussage aus github Thread zu Rust-Thematik).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mehr Info:&lt;/strong&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/18233835/creating-an-x509-v3-user-certificate-by-signing-csr&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;openssl - Creating an x509 v3 user certificate by signing CSR - Stack Overflow&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://docs.openssl.org/master/man5/x509v3_config/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;x509v3_config - OpenSSL Documentation&lt;/a&gt;&lt;br /&gt;
Rust unterstützt nur noch v3: &lt;a href=&quot;https://github.com/rustls/rustls/issues/1298&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/rustls/rustls/issues/1298&lt;/a&gt;&lt;br /&gt;
Erklärung der &lt;code&gt;keyUsage&lt;/code&gt; Parameter in der Config: &lt;a href=&quot;https://superuser.com/a/1248085&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://superuser.com/a/1248085&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;pkcs-1-in-pkcs-8-umwandeln&quot; tabindex=&quot;-1&quot;&gt;PKCS#1 in PKCS#8 umwandeln&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;openssl rsa -in ~/.ssh/id_rsa -outform pem &amp;gt; id_rsa.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Input: -----BEGIN RSA PRIVATE KEY----- (oder public)&lt;br /&gt;
Output: -----BEGIN PRIVATE KEY-----&lt;/p&gt;
&lt;h2 id=&quot;links&quot; tabindex=&quot;-1&quot;&gt;Links&lt;/h2&gt;
&lt;p&gt;Erklärung zu RSA&lt;br /&gt;
&lt;a href=&quot;https://security.stackexchange.com/questions/68822/trying-to-understand-rsa-and-its-terminology/68836#answer-68836&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://security.stackexchange.com/questions/68822/trying-to-understand-rsa-and-its-terminology/68836#answer-68836&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://security.stackexchange.com/questions/9260/sha-rsa-and-the-relation-between-them#answer-9265&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://security.stackexchange.com/questions/9260/sha-rsa-and-the-relation-between-them#answer-9265&lt;/a&gt;&lt;br /&gt;
OpenSSL Dokumentation&lt;br /&gt;
&lt;a href=&quot;https://docs.openssl.org/3.3/man1/openssl-genpkey/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;openssl-genpkey - OpenSSL Documentation&lt;/a&gt;&lt;br /&gt;
Noch mehr Befehle, Beispiele und Erklärungen&lt;br /&gt;
&lt;a href=&quot;https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.digitalocean.com/community/tutorials/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/tech/cryptography-rsa-ssl/" >
        </entry>
        <entry>
            <title>
                CPU
                
            </title>
            <updated>2025-07-11T14:01:28.658Z</updated>
            <id>https://janek.ing/tech/cpu/</id>
            <content type="html">
                &lt;h2 id=&quot;cache&quot; tabindex=&quot;-1&quot;&gt;Cache&lt;/h2&gt;
&lt;style&gt; .container {font-family: sans-serif; text-align: center;} .button-wrapper button {z-index: 1;height: 40px; width: 100px; margin: 10px;padding: 5px;} .excalidraw .App-menu_top .buttonList { display: flex;} .excalidraw-wrapper { height: 800px; margin: 50px; position: relative;} :root[dir=&quot;ltr&quot;] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left {transform: none;} &lt;/style&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react@17/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom@17/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/@excalidraw/excalidraw@0/dist/excalidraw.production.min.js&quot;&gt;&lt;/script&gt;&lt;div id=&quot;CPU_2025-06-16_1436.43.excalidraw.md1&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(){const InitialData={&quot;type&quot;:&quot;excalidraw&quot;,&quot;version&quot;:2,&quot;source&quot;:&quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.10.1&quot;,&quot;elements&quot;:[{&quot;id&quot;:&quot;gyedlUdVOe1lWZESllevz&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-143.25,&quot;y&quot;:-442.4375,&quot;width&quot;:217,&quot;height&quot;:78.99999999999999,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a0&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:611096473,&quot;version&quot;:78,&quot;versionNonce&quot;:1953808889,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;dOspa53y&quot;}],&quot;updated&quot;:1750077562181,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;dOspa53y&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-81.6899642944336,&quot;y&quot;:-415.4375,&quot;width&quot;:93.87992858886719,&quot;height&quot;:25,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a0V&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:156604217,&quot;version&quot;:55,&quot;versionNonce&quot;:1462393655,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077562182,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;CPU Core&quot;,&quot;rawText&quot;:&quot;CPU Core&quot;,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;gyedlUdVOe1lWZESllevz&quot;,&quot;originalText&quot;:&quot;CPU Core&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;S8utcE7MmnPfNn26Nl0Si&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-143.25,&quot;y&quot;:-345.4375,&quot;width&quot;:101,&quot;height&quot;:90,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a2&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1138830039,&quot;version&quot;:59,&quot;versionNonce&quot;:2147282809,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;AzBfpRdT&quot;},{&quot;id&quot;:&quot;dYwhU30RHy5B9_sKL3Ayv&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;ARea4BZIirmaonP-X_aMK&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1750077617047,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;AzBfpRdT&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-125.1419906616211,&quot;y&quot;:-320.4375,&quot;width&quot;:64.78398132324219,&quot;height&quot;:40,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a3&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:15028025,&quot;version&quot;:60,&quot;versionNonce&quot;:1854474297,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077599328,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;L1 Data&#92;nCache&quot;,&quot;rawText&quot;:&quot;L1 Data Cache&quot;,&quot;fontSize&quot;:16,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;S8utcE7MmnPfNn26Nl0Si&quot;,&quot;originalText&quot;:&quot;L1 Data Cache&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;LYD78UzUbNLhMDmeb95Rt&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-25.75,&quot;y&quot;:-344.4375,&quot;width&quot;:101,&quot;height&quot;:90,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a4&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:688204601,&quot;version&quot;:69,&quot;versionNonce&quot;:1832294615,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;raExnH1H&quot;},{&quot;id&quot;:&quot;JJNRNK3UJgMyrpl2tkI3P&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;oNcnPcyIqsJQrExZY0I6b&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1750077627035,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;raExnH1H&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-18.64997100830078,&quot;y&quot;:-329.4375,&quot;width&quot;:86.79994201660156,&quot;height&quot;:60,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a5&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:831347737,&quot;version&quot;:81,&quot;versionNonce&quot;:195189561,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077601857,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;L1&#92;nInstruction&#92;nCache&quot;,&quot;rawText&quot;:&quot;L1 Instruction Cache&quot;,&quot;fontSize&quot;:16,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;LYD78UzUbNLhMDmeb95Rt&quot;,&quot;originalText&quot;:&quot;L1 Instruction Cache&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;CNMSkJAJBPWmMGNK1Yanm&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-142.25,&quot;y&quot;:-229.4375,&quot;width&quot;:217,&quot;height&quot;:93,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a6&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:2096011415,&quot;version&quot;:37,&quot;versionNonce&quot;:664313175,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;QCezkKEN&quot;},{&quot;id&quot;:&quot;E58u8BQRQa45VZwZ2cRFp&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;dYwhU30RHy5B9_sKL3Ayv&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;JJNRNK3UJgMyrpl2tkI3P&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1750077592024,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;QCezkKEN&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-80.39997100830078,&quot;y&quot;:-195.4375,&quot;width&quot;:93.29994201660156,&quot;height&quot;:25,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a6V&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1491153113,&quot;version&quot;:15,&quot;versionNonce&quot;:1065838839,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077502249,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;L2 Cache&quot;,&quot;rawText&quot;:&quot;L2 Cache&quot;,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;CNMSkJAJBPWmMGNK1Yanm&quot;,&quot;originalText&quot;:&quot;L2 Cache&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;20VWaX8jbJAQoiouonA4_&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-142.75,&quot;y&quot;:-106.9375,&quot;width&quot;:341,&quot;height&quot;:93,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a8&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:905737431,&quot;version&quot;:80,&quot;versionNonce&quot;:351346231,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;6Zo9cVhF&quot;},{&quot;id&quot;:&quot;ioFtoWpYHoaxTMxAsnHhO&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;E58u8BQRQa45VZwZ2cRFp&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;4n95tARKb3p2sGvEk2tOU&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1750077724173,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;6Zo9cVhF&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-18.58997344970703,&quot;y&quot;:-72.9375,&quot;width&quot;:92.67994689941406,&quot;height&quot;:25,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;a9&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1248182775,&quot;version&quot;:67,&quot;versionNonce&quot;:208744375,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077520963,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;L3 Cache&quot;,&quot;rawText&quot;:&quot;L3 Cache&quot;,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;20VWaX8jbJAQoiouonA4_&quot;,&quot;originalText&quot;:&quot;L3 Cache&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;-x_mZYHq3TxKctIOQluBv&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-142.75,&quot;y&quot;:13.0625,&quot;width&quot;:341,&quot;height&quot;:93,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aA&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1018238743,&quot;version&quot;:102,&quot;versionNonce&quot;:983526103,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;FtC5JPDC&quot;},{&quot;id&quot;:&quot;B1gv1CCrE_u-i0wtkxpD0&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;ioFtoWpYHoaxTMxAsnHhO&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1750077572113,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;FtC5JPDC&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-32.429954528808594,&quot;y&quot;:47.0625,&quot;width&quot;:120.35990905761719,&quot;height&quot;:25,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aB&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1321999415,&quot;version&quot;:102,&quot;versionNonce&quot;:501271351,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077528704,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;Main Memory&quot;,&quot;rawText&quot;:&quot;Main Memory&quot;,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;-x_mZYHq3TxKctIOQluBv&quot;,&quot;originalText&quot;:&quot;Main Memory&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;fRTk-vM9EkPsV9ObAsQd4&quot;,&quot;type&quot;:&quot;rectangle&quot;,&quot;x&quot;:-141.75,&quot;y&quot;:135.0625,&quot;width&quot;:341,&quot;height&quot;:93,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aC&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1479303831,&quot;version&quot;:135,&quot;versionNonce&quot;:947631225,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;2Fx6vIXo&quot;},{&quot;id&quot;:&quot;B1gv1CCrE_u-i0wtkxpD0&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1750077566076,&quot;link&quot;:null,&quot;locked&quot;:false},{&quot;id&quot;:&quot;2Fx6vIXo&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-31.129966735839844,&quot;y&quot;:169.0625,&quot;width&quot;:119.75993347167969,&quot;height&quot;:25,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aD&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:64092087,&quot;version&quot;:147,&quot;versionNonce&quot;:1421674071,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077536854,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;HDD / Swap&quot;,&quot;rawText&quot;:&quot;HDD / Swap&quot;,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;fRTk-vM9EkPsV9ObAsQd4&quot;,&quot;originalText&quot;:&quot;HDD / Swap&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;B1gv1CCrE_u-i0wtkxpD0&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:25.75,&quot;y&quot;:132.56249999999997,&quot;width&quot;:3.552713678800501e-15,&quot;height&quot;:24.999999999999957,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aH&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:324548983,&quot;version&quot;:18,&quot;versionNonce&quot;:1278744473,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718385,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-3.552713678800501e-15,-24.999999999999957]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;fRTk-vM9EkPsV9ObAsQd4&quot;,&quot;focus&quot;:-0.017595307917888554,&quot;gap&quot;:2.5},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;-x_mZYHq3TxKctIOQluBv&quot;,&quot;focus&quot;:0.011730205278592377,&quot;gap&quot;:1.5},&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;ioFtoWpYHoaxTMxAsnHhO&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:27.75,&quot;y&quot;:10.5625,&quot;width&quot;:0,&quot;height&quot;:22,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aI&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:1987157751,&quot;version&quot;:15,&quot;versionNonce&quot;:893474489,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718384,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-22]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;-x_mZYHq3TxKctIOQluBv&quot;,&quot;focus&quot;:0,&quot;gap&quot;:2.5},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;20VWaX8jbJAQoiouonA4_&quot;,&quot;focus&quot;:0,&quot;gap&quot;:2.5},&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;E58u8BQRQa45VZwZ2cRFp&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:-36.25,&quot;y&quot;:-109.4375,&quot;width&quot;:2,&quot;height&quot;:23,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aJ&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:1160133817,&quot;version&quot;:20,&quot;versionNonce&quot;:1236566265,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718383,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[2,-23]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;20VWaX8jbJAQoiouonA4_&quot;,&quot;focus&quot;:-0.39108232656619757,&quot;gap&quot;:2.5},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;CNMSkJAJBPWmMGNK1Yanm&quot;,&quot;focus&quot;:-0.034576009271779076,&quot;gap&quot;:4},&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;dYwhU30RHy5B9_sKL3Ayv&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:-94.01581074068753,&quot;y&quot;:-233.43750000000003,&quot;width&quot;:0.8594786715067215,&quot;height&quot;:20,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aK&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:1234092057,&quot;version&quot;:85,&quot;versionNonce&quot;:1512992345,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718382,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0.8594786715067215,-20]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;CNMSkJAJBPWmMGNK1Yanm&quot;,&quot;focus&quot;:-0.5650403781494566,&quot;gap&quot;:4.000000000000028},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;S8utcE7MmnPfNn26Nl0Si&quot;,&quot;focus&quot;:-0.03077102894901965,&quot;gap&quot;:1.9999999999999716},&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;JJNRNK3UJgMyrpl2tkI3P&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:29.76850917872352,&quot;y&quot;:-230.4375,&quot;width&quot;:1.5168620569681863,&quot;height&quot;:19,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aL&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:1878069177,&quot;version&quot;:31,&quot;versionNonce&quot;:1860254521,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718383,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-1.5168620569681863,-19]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;CNMSkJAJBPWmMGNK1Yanm&quot;,&quot;focus&quot;:0.60092717790226,&quot;gap&quot;:1},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;LYD78UzUbNLhMDmeb95Rt&quot;,&quot;focus&quot;:0.008789452656811287,&quot;gap&quot;:5},&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;ARea4BZIirmaonP-X_aMK&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:-96.24999999999991,&quot;y&quot;:-346.4375,&quot;width&quot;:14.999999999999915,&quot;height&quot;:14,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aM&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:1061032825,&quot;version&quot;:63,&quot;versionNonce&quot;:1431249625,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718380,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[14.999999999999915,-14]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;S8utcE7MmnPfNn26Nl0Si&quot;,&quot;focus&quot;:-0.5347322720694645,&quot;gap&quot;:1},&quot;endBinding&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;oNcnPcyIqsJQrExZY0I6b&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:23.749999999999982,&quot;y&quot;:-345.4375,&quot;width&quot;:7.999999999999982,&quot;height&quot;:17,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aN&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:189441751,&quot;version&quot;:31,&quot;versionNonce&quot;:1111818393,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077718381,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[-7.999999999999982,-17]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;LYD78UzUbNLhMDmeb95Rt&quot;,&quot;focus&quot;:0.28805908904390654,&quot;gap&quot;:1},&quot;endBinding&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false},{&quot;id&quot;:&quot;pLxvck75&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:80.75,&quot;y&quot;:-297.4375,&quot;width&quot;:128.55990600585938,&quot;height&quot;:20,&quot;angle&quot;:4.71238898038469,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aO&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:476679959,&quot;version&quot;:79,&quot;versionNonce&quot;:1188531767,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077655204,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;... for each core&quot;,&quot;rawText&quot;:&quot;... for each core&quot;,&quot;fontSize&quot;:16,&quot;fontFamily&quot;:1,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;... for each core&quot;,&quot;autoResize&quot;:true,&quot;lineHeight&quot;:1.25},{&quot;id&quot;:&quot;kLzeJ3CNIuaqWWI-R6GrB&quot;,&quot;type&quot;:&quot;freedraw&quot;,&quot;x&quot;:149.75,&quot;y&quot;:-360.4375,&quot;width&quot;:27,&quot;height&quot;:86,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:0.5,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aR&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:1880993047,&quot;version&quot;:45,&quot;versionNonce&quot;:1280723737,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077672046,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-1],[0,-6],[0,-16],[0,-21],[0,-29],[0,-37],[0,-44],[0,-46],[0,-51],[0,-52],[0,-54],[0,-56],[0,-58],[0,-60],[0,-66],[0,-68],[0,-71],[0,-74],[0,-75],[-1,-76],[-1,-78],[-2,-79],[-3,-80],[-5,-82],[-6,-83],[-6,-84],[-8,-85],[-10,-85],[-12,-85],[-13,-86],[-15,-86],[-16,-86],[-17,-86],[-18,-86],[-19,-86],[-20,-86],[-21,-86],[-22,-86],[-23,-86],[-24,-86],[-26,-85],[-27,-85],[-27,-85]],&quot;pressures&quot;:[],&quot;simulatePressure&quot;:true,&quot;lastCommittedPoint&quot;:null},{&quot;id&quot;:&quot;jf9pankU4FhTW64RaQ9B3&quot;,&quot;type&quot;:&quot;freedraw&quot;,&quot;x&quot;:144.75,&quot;y&quot;:-215.4375,&quot;width&quot;:25,&quot;height&quot;:82,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:0.5,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aT&quot;,&quot;roundness&quot;:null,&quot;seed&quot;:564681207,&quot;version&quot;:43,&quot;versionNonce&quot;:1741559641,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1750077679389,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,1],[0,5],[0,7],[-1,10],[-1,19],[-1,22],[-1,25],[-1,26],[-1,29],[-1,31],[-1,37],[-1,39],[-1,40],[-1,45],[-1,48],[-1,50],[-1,56],[-1,59],[-1,62],[-1,66],[-2,68],[-2,71],[-2,72],[-3,73],[-3,75],[-4,76],[-5,78],[-7,79],[-8,80],[-9,81],[-10,81],[-12,82],[-13,82],[-14,82],[-17,82],[-20,82],[-21,81],[-23,81],[-24,80],[-25,80],[-25,80]],&quot;pressures&quot;:[],&quot;simulatePressure&quot;:true,&quot;lastCommittedPoint&quot;:null},{&quot;id&quot;:&quot;4n95tARKb3p2sGvEk2tOU&quot;,&quot;type&quot;:&quot;arrow&quot;,&quot;x&quot;:132.21893383625167,&quot;y&quot;:-108.34266428472557,&quot;width&quot;:0,&quot;height&quot;:23.790573742127492,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;index&quot;:&quot;aU&quot;,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;seed&quot;:1550040185,&quot;version&quot;:29,&quot;versionNonce&quot;:1286578233,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:null,&quot;updated&quot;:1750077730581,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;points&quot;:[[0,0],[0,-23.790573742127492]],&quot;lastCommittedPoint&quot;:null,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;20VWaX8jbJAQoiouonA4_&quot;,&quot;focus&quot;:0.6127210195674583,&quot;gap&quot;:1.405164284725572},&quot;endBinding&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;elbowed&quot;:false}],&quot;appState&quot;:{&quot;theme&quot;:&quot;dark&quot;,&quot;viewBackgroundColor&quot;:&quot;#ffffff&quot;,&quot;currentItemStrokeColor&quot;:&quot;#1e1e1e&quot;,&quot;currentItemBackgroundColor&quot;:&quot;transparent&quot;,&quot;currentItemFillStyle&quot;:&quot;solid&quot;,&quot;currentItemStrokeWidth&quot;:2,&quot;currentItemStrokeStyle&quot;:&quot;solid&quot;,&quot;currentItemRoughness&quot;:0,&quot;currentItemOpacity&quot;:100,&quot;currentItemFontFamily&quot;:1,&quot;currentItemFontSize&quot;:16,&quot;currentItemTextAlign&quot;:&quot;left&quot;,&quot;currentItemStartArrowhead&quot;:null,&quot;currentItemEndArrowhead&quot;:&quot;arrow&quot;,&quot;currentItemArrowType&quot;:&quot;round&quot;,&quot;scrollX&quot;:224.36932486677279,&quot;scrollY&quot;:464.1874675583085,&quot;zoom&quot;:{&quot;value&quot;:1.849472},&quot;currentItemRoundness&quot;:&quot;sharp&quot;,&quot;gridSize&quot;:20,&quot;gridStep&quot;:5,&quot;gridModeEnabled&quot;:false,&quot;gridColor&quot;:{&quot;Bold&quot;:&quot;rgba(217, 217, 217, 0.5)&quot;,&quot;Regular&quot;:&quot;rgba(230, 230, 230, 0.5)&quot;},&quot;currentStrokeOptions&quot;:null,&quot;frameRendering&quot;:{&quot;enabled&quot;:true,&quot;clip&quot;:true,&quot;name&quot;:true,&quot;outline&quot;:true},&quot;objectsSnapModeEnabled&quot;:false,&quot;activeTool&quot;:{&quot;type&quot;:&quot;selection&quot;,&quot;customType&quot;:null,&quot;locked&quot;:false,&quot;fromSelection&quot;:false,&quot;lastActiveTool&quot;:null}},&quot;files&quot;:{}};InitialData.scrollToContent=true;App=()=&gt;{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(&quot;resize&quot;,e),()=&gt;window.removeEventListener(&quot;resize&quot;,e)},[t]),React.createElement(React.Fragment,null,React.createElement(&quot;div&quot;,{className:&quot;excalidraw-wrapper&quot;,ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(&quot;CPU_2025-06-16_1436.43.excalidraw.md1&quot;);ReactDOM.render(React.createElement(App),excalidrawWrapper);})();&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;Register &amp;lt;-&amp;gt; L1-Cache &amp;lt;-&amp;gt; L2(L3/L4)-Cache &amp;lt;-&amp;gt; Main memory (RAM)&amp;lt;-&amp;gt;HDD (Swap)
&lt;ul&gt;
&lt;li&gt;L1-Cache oftmals unterteilt in &amp;quot;data&amp;quot; und &amp;quot;instruction cache&amp;quot;&lt;/li&gt;
&lt;li&gt;L1 oftmals pro Core&lt;/li&gt;
&lt;li&gt;L1: Größe bei aktuellen Prozessoren &amp;lt;100kB (pro Kern)
&lt;ul&gt;
&lt;li&gt;5700X: 32KB, 9950X3D: 80KB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L2-Cache wird unter Windows &amp;quot;unified cache&amp;quot; genannt&lt;/li&gt;
&lt;li&gt;L2 oftmals pro Core, manchmal geteilt mit mehreren Cores oder gesamter CPU&lt;/li&gt;
&lt;li&gt;L2: Größe bei aktuellen Prozessoren &amp;lt; 1MB (pro Kern)
&lt;ul&gt;
&lt;li&gt;5700X: 512KB, 9950X3D: 1MB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;L3/L4 cache meist für gesamte CPU, Größe &amp;lt; 100MB
&lt;ul&gt;
&lt;li&gt;5700X: 32MB, 9950X3D: 128MB&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache Line: Die CPU lädt immer 64 Bytes auf einmal in den L1 Cache
&lt;ul&gt;
&lt;li&gt;ESP32: 32 Bytes&lt;/li&gt;
&lt;li&gt;ARM Cortex M0..4: kein Cache&lt;/li&gt;
&lt;li&gt;ARM Cortex M7+: 32 Bytes&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Cache Miss: Programm fordert Daten an, welche nicht im L1+L2-Cache sind und daher aus dem RAM geladen werden müssen&lt;/li&gt;
&lt;li&gt;Viele Operationen sind schneller, als das Laden aus dem RAM -&amp;gt; Performance wird von Nutzung des Caches dominiert
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://igoro.com/archive/gallery-of-processor-cache-effects/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Gallery of Processor Cache Effects (igoro.com)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.7-cpu.com/cpu/Zen.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Zen 1 timings&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;L1 Cache: 4-5 cycles (1ns)&lt;/li&gt;
&lt;li&gt;L2 Cache: 17 cycles (4-5ns)&lt;/li&gt;
&lt;li&gt;L3 Cache: ~40 cycles (10ns)&lt;/li&gt;
&lt;li&gt;RAM: 40 cycles + 90ns (100ns)&lt;/li&gt;
&lt;li&gt;1 Cycle ~ 0.25ns (@4GHz)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;(L1) Cache Aufbau
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/rLWeHpzAYhg?feature=shared&amp;amp;t=1855&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/rLWeHpzAYhg?feature=shared&amp;amp;t=1855&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Cache funktioniert grundsätzlich wie hash table, wobei als key ein Teil der Speicheradresse genutzt wird&lt;/li&gt;
&lt;li&gt;Cache Line ist 64 Bytes&lt;/li&gt;
&lt;li&gt;Pointer-Adresse sind 64bit, von denen meist 48bit für Speicheradresse genutzt werden&lt;/li&gt;
&lt;li&gt;Speicheradressen sind virtuell und müssen übersetzt werden. Virtuell, damit bspw swap funktioniert.&lt;/li&gt;
&lt;li&gt;Übersetzung läuft über anderen cache den Translation Lookaside Buffer. Dieser Cache mappt bei x64 12bit große &amp;quot;pages&amp;quot; (4096 Bytes) zwischen physischem und virtuellem Speicher.&lt;/li&gt;
&lt;li&gt;6 LSB eines pointers sind offset in cache line&lt;/li&gt;
&lt;li&gt;12 LSB sind offset in page&lt;/li&gt;
&lt;li&gt;wir wollen nicht auf Übersetzung der Adresse warten. Daher läuft beides parallel. Cache access ist sehr schnell (&amp;lt;5 cycles)&lt;/li&gt;
&lt;li&gt;zur Adressierung in Cache muss also Teil des pointers genutzt werden, welcher von Übersetzung nicht verändert wird = 12 LSB.&lt;/li&gt;
&lt;li&gt;unteren 6 bits davon helfen nicht, da sie nur offset in cache line sind und nicht zur Unterscheidung von cache lines helfen können.&lt;/li&gt;
&lt;li&gt;Bleiben 6 bits übrig, was maximal 64 sets im Cache ergibt&lt;/li&gt;
&lt;li&gt;Daten im cache sind entweder mit virtueller oder physischer Adresse getaggt.&lt;/li&gt;
&lt;li&gt;nach Zugriff und paralleler Übersetzung wird überprüft, ob daten zu gewünschter Adresse gehören, da viele Speicherbereiche dieselben 12 LSB haben könnten&lt;/li&gt;
&lt;li&gt;Somit sind alle Adressen mit einem ähnlichen Bit-Aufbau immer im selben Set zu finden.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Typischer Aufbau: N-way Associative Cache
&lt;ul&gt;
&lt;li&gt;es werden N cache lines pro cache set gespeichert, gleichzeitig abgerufen und dann verglichen (mit getaggter Adresse), ob richtige Daten dabei sind&lt;/li&gt;
&lt;li&gt;größere Anzahl cache lines pro set bedeutet, dass mehr unterschiedliche Speicherbereiche mit gleicher bit Struktur im Cache Platz finden und Kollisionen verringert werden&lt;/li&gt;
&lt;li&gt;Beispiel Zen 4: 8-way Set, 64 sets, je line 64 Bytes also 8*64*64 Bytes = 32KByte (Architektur Limit)&lt;/li&gt;
&lt;li&gt;Zen 5: 12-way = 48KByte&lt;/li&gt;
&lt;li&gt;Beispiel Apple M1/M2: 12-way Set, jedes Set hat also 12 Plätze je 128 Bytes (eine L2-Cache Line) = 1,5KB pro Set = ~10.900 Sets bei 16MB Cache&lt;/li&gt;
&lt;li&gt;Apple M-chips haben größere pages (64K)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;pointers&quot; tabindex=&quot;-1&quot;&gt;Pointers&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;mindestens top 8 bits bei Intel und ARM Prozessoren sind nicht Teil der Speicheradresse (da unrealistisch großer Speicher benötigt werden würde), sondern können für andere Zwecke wie GC-flags genutzt werden. Meist werden nur 48bit für Speicheradresse genutzt
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/uZEBkOrfUzM?feature=shared&amp;amp;t=908&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/uZEBkOrfUzM?feature=shared&amp;amp;t=908&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;assembly&quot; tabindex=&quot;-1&quot;&gt;Assembly&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://uops.info/table.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://uops.info/table.html&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Liste von Assembly Instructions für verschiedene CPU-Typen und ihre Eigenschaften (entnommen aus den ISA-Dokumenten der CPUs)&lt;/li&gt;
&lt;li&gt;Latency = Anzahl Clock Cycles für Operation&lt;/li&gt;
&lt;li&gt;TP (Throughput) = Anzahl Clock Cycles Wartezeit zwischen 2 Operationen (Wert &amp;lt; 1 = Mehrere Operationen pro Clock Cycle, bspw. 0.5 = 2 OPs/Cycle)&lt;/li&gt;
&lt;li&gt;Ports = Verfügbare Ports für Micro-OPs, Stern = Mehrere Micro-OPs auf denselben Ports, Plus = Mehrere Micro-OPs auf unterschiedlichen Ports (Bsp.: 3&lt;em&gt;p015+1&lt;/em&gt;p23 = 3 µOps auf Port 0, 1 oder 5 und 1 µOp auf Port 2 oder 3)&lt;br /&gt;
&lt;a href=&quot;https://godbolt.org/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://godbolt.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Zeigt Assembly für eingegebenen Programmcode und für verschiedene Architekturen und Compiler an&lt;/li&gt;
&lt;li&gt;Kann auch ESP32 und Co.&lt;/li&gt;
&lt;li&gt;Vergleich zwischen zwei Assembly möglich&lt;/li&gt;
&lt;li&gt;Mouse-Over erklärt Assembly Instruktionen&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;modulus&quot; tabindex=&quot;-1&quot;&gt;Modulus (%)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=RrHGX1wwSYM&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Language Performance Comparisons Are Junk&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Moderne CPUs haben keine schnelle Instruktion für Modulus-Operation (und keine SIMD-Instruktion)&lt;/li&gt;
&lt;li&gt;Modulus wird in äquivalente Instruktionen umgewandelt (z.B. Berechnung über Floats), welche ggf. mit SIMD beschleunigt werden können&lt;br /&gt;
-&amp;gt; Modulus mit zur Compile-Zeit unbekanntem Divisor ist für CPU sehr aufwändig, da diese Operation nicht umgewandelt werden kann&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;napkin-math&quot; tabindex=&quot;-1&quot;&gt;Napkin Math&lt;/h2&gt;
&lt;p&gt;Cost of CPU operations: &lt;a href=&quot;http://ithare.com/infographics-operation-costs-in-cpu-clock-cycles/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Infographics: Operation Costs in CPU Clock Cycles - IT Hare on Soft.ware&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub repo with programming related &amp;quot;ballpark&amp;quot; numbers: &lt;a href=&quot;https://github.com/sirupsen/napkin-math&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub - sirupsen/napkin-math: Techniques and numbers for estimating system&#39;s performance from first-principles&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Great visualization of latency numbers (with historical data): &lt;a href=&quot;https://colin-scott.github.io/personal_website/research/interactive_latency.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://colin-scott.github.io/personal_website/research/interactive_latency.html&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/tech/cpu/" >
        </entry>
        <entry>
            <title>
                Schlaf
                
            </title>
            <updated>2025-05-24T11:10:07.386Z</updated>
            <id>https://janek.ing/life/schlaf/</id>
            <content type="html">
                &lt;p&gt;Einschlafen, 3 Schritte&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Brainwriting: alles was schlecht lief am Tag, alles was einen bewegt (3min ununterbrochen durchschreiben)
&lt;ul&gt;
&lt;li&gt;alternativ: wenn...dann Sätze aufschreiben (wenn x eintritt dann Konsequenz y und dad passiert mit Wahrscheinlichkeit z)&lt;/li&gt;
&lt;li&gt;alternativ: 3mal sich selbst zu allen Themen &amp;quot;und dann?&amp;quot; Fragen. Herausfinden, on Konsequenzen groß sind.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;4-8-4 Atmung (4s einatmen, 8s ausatmen, 4mal)&lt;/li&gt;
&lt;li&gt;5 Dinge aufschreiben, die am Tag gut liefen / für die man dankbar ist. Nicht nur externe, sondern vor allem interne Sachen (die man selbst kontrolliert).
&lt;ul&gt;
&lt;li&gt;Hilfe: Erbsen Methode. 5 kleine Gegenstände in rechte Tasche/Haargummis an rechten Arm. Bei jeder schönen Sache einen Gegenstand rüber nach links packen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;tagsüber stress reduzieren, um nicht mit vollem Kopf einzuschlafen&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alle 90min kleine Pause machen. 4-8-4 oder kurz aus dem Fenster schauen reicht ggf schon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;nach der Arbeit Sport oder kurzen Spaziergang machen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jeder Mensch ist anderer Schlaf Typ (Lärche, Taube, Eule). Kann man anhand von DNA bestimmen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;benötigte Menge schlaf ist auch unterschiedlich&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;beste Schlafzeit und menge für sich finden&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Schlafzyklen ca. 90min lang - Schlafzeit Vielzahl von 90min&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;wenn man nachts aufwacht NICHT auf Handy oder Uhr schauen&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Powernap max 20-25min und am besten vor 14 Uhr, damit man nicht in Tiefschlaf kommt und Rhythmus stört&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;idealerweise gleiche Schlafenszeit jeden tag (auch am Wochenende!)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/life/schlaf/" >
        </entry>
        <entry>
            <title>
                Video Games
                
            </title>
            <updated>2025-06-05T10:42:31.065Z</updated>
            <id>https://janek.ing/design/video-games/</id>
            <content type="html">
                &lt;h2 id=&quot;10-lessons-as-per-mark-brown&quot; tabindex=&quot;-1&quot;&gt;10 Lessons as per Mark Brown&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Cm2_drGLGbc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=Cm2_drGLGbc&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If you want to understand why a game makes you feel a certain way, ask yourself: how do the mechanics contribute to the experience?&lt;/li&gt;
&lt;li&gt;There is no definitive right or wrong mechanic. The only way to judge a mechanic, is to ask whether or not it can contribute to the experience you are trying to forge.&lt;/li&gt;
&lt;li&gt;You have to decide who the game is for and tune your mechanics appropriately. (e.g. hard-code or casual, accessible or much to learn)&lt;/li&gt;
&lt;li&gt;Options and bonus content can be used to make a game appealing to those who are more (or less) hardcore than the target audience. (bonus levels in Mario as an example)&lt;/li&gt;
&lt;li&gt;Options, accessibility settings and easy modes don&#39;t have to pose a threat to your intended experience. (Assist mode in celeste as an example)&lt;/li&gt;
&lt;li&gt;Designers should think of genres in the loosest possible terms. (Don&#39;t put yourself in a box, before designing something)&lt;/li&gt;
&lt;li&gt;The best solution for a complex problem is whatever provides the most interesting experience to the player. (Iterate often, follow the fun)&lt;/li&gt;
&lt;li&gt;A game idea is worthless until you have proven its value through a prototype.&lt;/li&gt;
&lt;li&gt;Frequent playtesting should be used to make sure your design is effectively producing the results you desire. (use with caution, there is only once chance for a first impression)&lt;/li&gt;
&lt;li&gt;Always figure out for yourself if a game design lesson is true for your and for the type of games you want to make. (Trends change, play a lot of games)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;what-is-fun&quot; tabindex=&quot;-1&quot;&gt;What is fun?&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=TbZ3HzvFEto&amp;amp;t=940s&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=TbZ3HzvFEto&amp;amp;t=940s&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;The degree to which the games recognizes and responds to the player&#39;s choices and actions&amp;quot;
&lt;ul&gt;
&lt;li&gt;Behavioral science equivalent: What are the reinforcers? What is the reinforcement schedule?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you do something, the game has to react to it. If you shoot a wall, there have to be decals (and a sound effect). If the wall is ignoring the player, it inflicts a &amp;quot;narcissistic injury&amp;quot;&lt;/li&gt;
&lt;li&gt;The game has to acknowledge back to the player that he is making choices and that he is progressing. Otherwise it loses any impact.&lt;/li&gt;
&lt;li&gt;If the player stands still, the world can be quiet. But as you walk forward, something has to happen every 3-5 seconds (even if it is just a little thing like an interesting sign or a sound). &lt;a href=&quot;https://youtu.be/TbZ3HzvFEto?feature=shared&amp;amp;t=670&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/TbZ3HzvFEto?feature=shared&amp;amp;t=670&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://youtu.be/nCxU-OBoISk?feature=shared&amp;amp;t=1057&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/nCxU-OBoISk?feature=shared&amp;amp;t=1057&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;There needs to be a response to the action. The more meaningful the action, the bigger the response&lt;/li&gt;
&lt;li&gt;Exaggerate a bit. Use sounds / animation / screen shake / etc.&lt;/li&gt;
&lt;li&gt;The core actions of the game should feel really awesome. Create an unique experience that matches the action&lt;/li&gt;
&lt;li&gt;These responses keep the player engaged&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;combinatorics&quot; tabindex=&quot;-1&quot;&gt;Combinatorics&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In many cases you want combinatoric explosion (e.g. n*m instead of n+m), because it gives you a bigger solution space to work in
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/nCxU-OBoISk?feature=shared&amp;amp;t=831&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/nCxU-OBoISk?feature=shared&amp;amp;t=831&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Example: Draw/handle hats separately from characters, so you can put any hat on any character. Draw background for cards separately from emblem, so they can be animated individually (and don&#39;t require a spritesheet)&lt;/li&gt;
&lt;li&gt;Make behaviors orthogonal to each other so they can be combined in interesting ways (see &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/game-programming/#fat-flat-struct-behaviors&quot;&gt;Game Programming#Fat/Flat struct (behaviors)&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;puzzle-games&quot; tabindex=&quot;-1&quot;&gt;Puzzle Games&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Was ist das Kernthema des Spiels? (Braid: Zeit, VVVVVV: Flipping)
&lt;ul&gt;
&lt;li&gt;Alle Puzzle sollten eine Eigenschaft dieses Themas behandeln (On-Topic) und nicht über Off-Topic Eigenschaften lösbar sein (z.B. Timing bei Jumps)&lt;/li&gt;
&lt;li&gt;Alle interessanten Effekte und Eigenschaften des Themas sollten durchgespielt werden (siehe z.B. Braid). Wie verändert das Thema ein klassisches Spiel? Was passiert wenn man XYZ hinzufügt? Was passiert, wenn man es weglässt? Was passiert wenn man Parameter XYZ davon ändert? etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die offensichtliche aber falsche Lösung sollte eindeutig falsch sein (ein Sprung sollte deutlich zu kurz sein, wenn das entscheidende Element fehlt und nicht nur ein bisschen zu kurz) -&amp;gt; ansonsten denkt ein Spieler, dass es an seinen mangelnden Fähigkeiten liegt (Off-Topic Element)
&lt;ul&gt;
&lt;li&gt;Insbesondere gilt dies bei &amp;quot;analogen&amp;quot; Spielen/Mechaniken: Die richtige Lösung sollte sich deutlich von falschen abheben (hoher &amp;quot;margin of error&amp;quot; bei der richtigen Lösung)&lt;/li&gt;
&lt;li&gt;Bei präzisen Elementen kann man kleine visuelle Hinweise an der richtigen Stelle platzieren (darf nicht zu auffällig sein)&lt;/li&gt;
&lt;li&gt;Genauso sollte die finale Lösung einfach zu erzeugen sein, damit nach dem Aha-Moment des Spielers es nicht mehr an mechanischen Fähigkeiten scheitert (oder anderen Off-Topic Elementen)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die Grundelemente des Spiels sollten sehr simpel und verständlich sein. Ansonsten wird das Spiel zu komplex, wenn Elemente des Kernthemas dazu kommen
&lt;ul&gt;
&lt;li&gt;Jedes dieser Elemente ist ein Werkzeug für den Spieler. Er muss dieses gut verstehen und von den anderen Werkzeugen unterscheiden können, um die richtige Auswahl beim Lösen eines Puzzles zu treffen.&lt;/li&gt;
&lt;li&gt;Dem Spieler Zeit geben die einzelnen Elemente einzeln und in Kombination zu lernen&lt;/li&gt;
&lt;li&gt;Sich Gedanken a-priori über diese Elemente machen ist sehr wichtig: z.B. wie groß soll Charakter sein (beeinflusst wie viel auf den Bildschirm passt), wie schnell (beeinflusst wie viel mechanische Fähigkeiten der Spieler haben muss und wie schnell sich das Spiel anfühlt), wie hoch soll Jump sein (beeinflusst Vertikalität und wie groß Level sein kann), etc.&lt;/li&gt;
&lt;li&gt;Konsistenz: Die Elemente sollten sich nicht groß verändern, sodass der Spieler keine Überraschung erlebt und sich immer auf die Kernfunktionen verlassen kann (sonst: Frustration, Unklarheit)&lt;/li&gt;
&lt;li&gt;Idealerweise gibt es keine Elemente, die nur einmal in Spezialsituationen verwendet werden. Ansonsten wird der Spieler diese auch an anderer Stelle suchen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Analoge Elemente sind schwieriger zu designen als diskrete
&lt;ul&gt;
&lt;li&gt;(s.o.) Bandbreite zwischen Lösungen ist kontinuierlich und ggf. klein&lt;/li&gt;
&lt;li&gt;Spieler muss viel mit den Variablen probieren um &amp;quot;sweet spot&amp;quot; zu finden (im Gegensatz zu einer richtigen Kombination von diskreten Einstellungen)&lt;/li&gt;
&lt;li&gt;Plattformer: Jump sollte vermutlich konstant sein (Länge wie Höhe). Ansonsten zu viele Variablen beim Gestalten von Puzzles (muss immer alle Variationen des Jumps testen) und zu viel Fokus auf mechanische Fähigkeiten des Spielers&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Antithese: Manchmal bietet es sich an, einzelne dieser Regeln zu brechen, um den Spieler auf etwas zu stoßen, andere Elemente hervorzuheben oder das Spiel aufzulockern (Braid: Hunt Levels - drehen sich nicht strikt um Zeit, haben komisches Hud und besondere Tür)&lt;/li&gt;
&lt;li&gt;Puzzles sollten auf ihre Essenz destilliert werden: Nicht mehr Elemente als nötig enthalten (On-Topic wie Off-Topic)
&lt;ul&gt;
&lt;li&gt;Idealerweise entwickelt man ein Gefühl dafür, was ein spezielles Puzzle &amp;quot;ausmacht&amp;quot; und wie es sich von anderen Puzzles abhebt. Man sollte versuchen alle Elemente zu entfernen, die dafür nicht zwingend notwendig sind&lt;/li&gt;
&lt;li&gt;Hierbei ist die Balance des Schwierigkeitsgrad und wie viele implizite oder explizite Hinweise man gibt nicht immer einfach/offensichtlich -&amp;gt; Playtesting&lt;/li&gt;
&lt;li&gt;Beispiel Braid Anniversary Edition: High Jump (ideal: nur 1 Monster mit Entanglement, schlechter: mit zusätzlicher Tür und Schlüssel oder Version, wo man mit der Nase auf Lösung gestoßen wird) -&amp;gt; &amp;quot;Can I find a more elegant way to build this puzzle?&amp;quot;&lt;/li&gt;
&lt;li&gt;Viele Versionen eines Puzzles ausprobieren -&amp;gt; guter Level Editor hilfreich, alternativ im Kopf oder auf Papier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Partielle Lösbarkeit
&lt;ul&gt;
&lt;li&gt;Um Frustration zu vermeiden und Erfolgsmomente auch bei schwierigen Puzzles zu erzeugen, kann man versuchen &amp;quot;partielle&amp;quot; Lösungen einzubauen. Dies sind Momente, wo der Spieler realisiert, dass er einen Teil des Problems richtig erfasst und gelöst hat und sich anschließend auf die weiteren Teile des Puzzles fokussieren kann.&lt;/li&gt;
&lt;li&gt;Dies kann auch helfen, dass der Spieler auf dem richtigen Weg bleibt und nicht vorzeitig abbricht, um eine andere (falsche) Lösung zu suchen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Spieler sollten nicht per Zufall auf die richtige Lösung eines Puzzles stoßen (oftmals so in &amp;quot;Antimatter&amp;quot; - einfach rückwärts durch alles laufen löst gefühlt 10% der Puzzles). Nur wenn man über ein Problem nachdenkt und es bewusst löst, fühlt es sich gut an.&lt;/li&gt;
&lt;li&gt;Schwierigkeit sollte nicht von Größe oder Komplexität der Puzzles kommen. (siehe Notizen zu Destillat oben)&lt;/li&gt;
&lt;li&gt;Fokus auf die interessanten Elemente und Puzzles, kein &amp;quot;Filler&amp;quot; einbauen. Jedes Puzzle sollte eine (neue) Idee präsentieren oder weiter ausbauen.&lt;/li&gt;
&lt;li&gt;Magic Moment: &amp;quot;Dieses Puzzle ist unmöglich!&amp;quot; -&amp;gt; &amp;quot;Ah! Eureka!&amp;quot; Die Erkenntnis, wie man das &amp;quot;unmögliche&amp;quot; schaffen kann.&lt;/li&gt;
&lt;li&gt;Es ist ein Videospiel -&amp;gt; alles ist möglich. Der Spieler geht erstmal von den &amp;quot;üblichen&amp;quot; Regeln aus (sofern er diese kenn, je nachdem welches Vorwissen er hat - u.U. gar keins!). Das heißt aber jede Regel kann gebrochen werden und muss erklärt oder gezeigt werden. Nichts sollte als &amp;quot;gegeben&amp;quot; angenommen werden.&lt;/li&gt;
&lt;li&gt;Puzzles, wo Elemente eine &amp;quot;natürlich&amp;quot; Bedeutung haben, können interessant sein (z.B. weil man sie sowieso braucht, um einen bestimmten Ort zu erreichen, aber dann nochmal konkret im Kontext des Puzzles). Fühlt sich &amp;quot;natürlich&amp;quot; an, weil die Elemente nicht ausschließlich für das Puzzle existieren. (-&amp;gt; Braid &amp;quot;Elevator action&amp;quot;, JBlow nennt es &amp;quot;artful excuses&amp;quot;). Vorsicht: Werden schnell zu &amp;quot;red herrings&amp;quot;, wenn sie zu sehr vom eigentlichen Puzzle ablenken oder nur die Lösung verschleiern.&lt;/li&gt;
&lt;li&gt;Flow of ideas: Grundidee eines Puzzles mit weniger Elementen, dann nach und nach Elemente hinzufügen, die das Puzzle interessanter machen oder einen &amp;quot;Twist&amp;quot; erzeugen (nicht einfach nur Schwierigkeit oder Unübersichtlichkeit erhöhen)&lt;/li&gt;
&lt;li&gt;Puzzles sollten sich idealerweise nicht groß überlappen, um Redundanz zu vermeiden (jedes Puzzles behandelt eine eigene interessante Idee / Interaktion zwischen den Elementen des Spiels) -&amp;gt; sonst zu viel &amp;quot;Filler&amp;quot;
&lt;ul&gt;
&lt;li&gt;Auch so bei &amp;quot;Tutorial&amp;quot;-Puzzles: Jedes sollte mindestens eine Mechanik erklären (und nicht zu viele auf einmal)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Designentscheidungen sollten davon geleitet sein, welche Variante mehr interessante Interaktionen und Puzzle zulässt&lt;/li&gt;
&lt;li&gt;Intrinsische vs. extrinsische Motivation:
&lt;ul&gt;
&lt;li&gt;Spieler will selbst etwas erreichen&lt;/li&gt;
&lt;li&gt;Spiel belohnt Spieler bei Erreichen von Meilenstein mit Grafik / Sound / Text, etc.&lt;/li&gt;
&lt;li&gt;Es ist immer etwas extrinsische Motivation da (weil man z.B. Elemente nicht sofort zugänglich macht oder Spieler diese nicht versteht), aber man kann gestalten wie viel&lt;/li&gt;
&lt;li&gt;Intrinsische Motivation kann z.B. durch Story-Bits oder ähnliche Rewards entstehen, die das Spiel nicht explizit trackt oder den Spieler darauf hinweist (das Spiel weiß nicht, dass der Spieler etwas erreicht hat und kann es nicht anpreisen -&amp;gt; er tut es nur des Ergebnisses wegen, aus freien Stücken)&lt;/li&gt;
&lt;li&gt;Das Verknüpfen (im Kopf des Spielers) von Gameplay-Elementen und Story zur Interpretation eines größeren Ganzen (welche der Entwickler so geplant hat), kann auch intrinsische Motivation sein -&amp;gt; zweite Ebene. Spielt trackt es nicht und weißt nicht explizit darauf hin -&amp;gt; Kunst&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Knowledge Gates (Konzept aus The Witness)
&lt;ul&gt;
&lt;li&gt;Bereiche des Spiels nicht durch Schlüssel, sondern durch Wissen verschließen&lt;/li&gt;
&lt;li&gt;Puzzle am Eingang eines Bereichs ist gerade schwer genug, dass es nicht per brute-force oder per Zufall gelöst werden kann, aber wenn der Spieler das notwendige Wissen (z.B. in einem anderen Bereich) erlangt hat, ist es nahezu trivial&lt;/li&gt;
&lt;li&gt;Elegantes Konzept, weil es alleine die Mechaniken des Spiels nutzt, um notwendiges Vorwissen für einen Bereich zu testen. Es kann Frustration beim Spieler vorgebeugt werden, indem Bereiche verschlossen bleiben, welche zu schwer sind oder weiteres Wissen erfordern. Sehr natürlich und direkt (&amp;quot;Schlüssel ist im Gehirn des Spielers&amp;quot;).&lt;/li&gt;
&lt;li&gt;Gegenbeispiel Antichamber: Man findet die farbigen &amp;quot;Waffen&amp;quot; als explizite Schlüssel zu bestimmten Bereichen&lt;/li&gt;
&lt;li&gt;Achtung: Puzzle muss als &amp;quot;Gate&amp;quot; eindeutig erkennbar sein. Wenn der Spieler es brute-forcen kann oder es zum Lernen der Mechanik nutzt, wird dies zu Frustration führen.
&lt;ul&gt;
&lt;li&gt;In The Witness sind bei Knowledge Gates bspw. die Fehler-Indikatoren deaktiviert (normalerweise blinken alle Elemente rot, welche eine Lösung nicht erfüllt)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Open-world vs. linear
&lt;ul&gt;
&lt;li&gt;Linear ist viel einfacher zu designen&lt;/li&gt;
&lt;li&gt;Open world ist deutlich angenehmer für den Spieler, da er einzelne Puzzles überspringen kann (und nicht dauerhaft an einem Puzzle hängen bleibt oder gezwungen ist triviale Puzzle unterhalb seines Wissenstands zu machen) und die Reihenfolge bestimmen kann (mehr Interaktion, mehr Möglichkeiten für persönliche Erfahrung)&lt;/li&gt;
&lt;li&gt;Weiteres Problem von linearen Spielen: Orthogonale Ideen/Mechaniken müssen in eine (künstliche) lineare Reihenfolge gebracht werden&lt;/li&gt;
&lt;li&gt;Unterschiedliche Ansätze möglich
&lt;ul&gt;
&lt;li&gt;Braid: Level sind je nach Mechanik gruppiert und werden jeweils linear durchlaufen. Gruppen werden nacheinander frei geschaltet. Die schwierigen Puzzle sind jedoch nicht auf dem &amp;quot;kritischen Pfad&amp;quot; und können übersprungen werden (man läuft einfach dran vorbei).&lt;/li&gt;
&lt;li&gt;The Witness: Komplett open world, aber mit &amp;quot;Knowledge Gates&amp;quot; (s.o.) vor schwierigeren Bereichen (meist wo mehrere Mechaniken kombiniert werden). Endgame ist mit expliziten Schlüsseln zu öffnen (man muss ans Ende der Bereiche vorher kommen), aber es gibt mehr Schlüssel als Schlösser (es ist also nicht 100% Lösung erforderlich)&lt;/li&gt;
&lt;li&gt;Stephen Sausage Roll: Open world, aber mit expliziten Schlüssel-Gates (man muss alle Puzzle eines Bereichs schaffen, um den nächsten freizuschalten)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Deduktive vs. Induktive Schlussfolgerung
&lt;ul&gt;
&lt;li&gt;Deduktiv: Ich weiß, dass X wahr ist, also muss auch Y wahr sein (Detektiv-Spiele)&lt;/li&gt;
&lt;li&gt;Induktiv: Ich vermute, dass X wahr ist, also könnte auch Y wahr sein (Exploration der Mechaniken und Regeln)&lt;/li&gt;
&lt;li&gt;Spiele wie The Witness, Braid, Corrypt, Stephens Sausage Roll starten &amp;quot;induktiv&amp;quot; (Spieler lernt die Mechaniken über Beispiele und Experimente und zieht daraus Schlussfolgerungen auf die Regeln) und enden mehr &amp;quot;deduktiv&amp;quot; (Spieler hat die Regeln gelernt und wendet sie in immer komplizierteren Umgebungen an).&lt;/li&gt;
&lt;li&gt;Antichamber hat bei an manchen Stellen diesen Sprung nicht geschafft und fühlte sich daher &amp;quot;leer&amp;quot; an (kein echtes Verständnis, aber Puzzles trotzdem gelöst)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;jon-blow-on-game-networking&quot; tabindex=&quot;-1&quot;&gt;Jon Blow on Game Networking&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nitter.space/Jonathan_Blow/status/1894511416088170716#m&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://nitter.space/Jonathan_Blow/status/1894511416088170716#m&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Okay, so, like, here&#39;s a very &lt;em&gt;high level&lt;/em&gt; overview of the issues involved in doing a networked game at a decent level of quality.&lt;/p&gt;
&lt;p&gt;The first thing one discovers when doing this kind of system is that, even though web dudes love TCP, it is very bad for games if that&#39;s all you use, because the second there is any packet loss or delay in a TCP stream, it holds up everything else in the stream after, then you get all this data and it&#39;s now useless because it&#39;s late (who cares where the other player was 2 seconds ago). So in general one needs to develop a protocol on top of UDP that transmits ephemeral-data-that-may-be-lost, and then either implement a reliable protocol on top of that one to transmit data-that-cannot-be-lost, or use TCP there.&lt;/p&gt;
&lt;p&gt;So now you have reliable messages and unreliable messages, and you decide what is short-term data that is okay if it gets lost (positions, orientations, whatever) and what is long-term data that cannot be lost (one-time changes of rare variables, changes of communication phase, etc).&lt;/p&gt;
&lt;p&gt;But now one of the most common bugs in these systems is partitioning the logic cleanly between these two types of communication in a very complicated system -- there can be race conditions (maybe some unreliable data you didn&#39;t expect beats the reliable message that tells the client to prepare to receive that unreliable data), you get all kinds of weird softlocks etc unless this is very carefully designed.&lt;/p&gt;
&lt;p&gt;Then you have the problem that these games are being worked on by programmers and designers who are not doing networking at all. They are defining fields on entities and world state, and there will be some system for attempting to automatically sync these over the network. But in order for this system not to be totally dismal performance-wise, it has to be very carefully programmed, and the problem is that the more magical the system tries to be, the more prone to the above desync bugs it will be (see many Unreal engine games). But at the same time, on a big enough project it is just a reality that you need this system to exist and work. So there tends to be a two-phase approach where fields are defined but treated conservatively (reliable send always, no compression) and then get optimized later, with very careful consideration about how to get this to perform well.&lt;/p&gt;
&lt;p&gt;Because network messages only come sometimes, but players are running at maybe 240Hz, there is a system on the client side that does prediction of what the current game state is, based on extrapolation from previously known states. This gets very complicated because the naive things (linear extrapolation based on previous velocity) look very bad in the face of packet loss etc. You need to attempt to emulate complex behavior by running some gameplay code similar to what the server is doing, but it&#39;s never exactly the same, and factoring the code so that it can be used in both contexts, while being understandable and maintainable, but also not painfully slow, can be a big challenge.&lt;/p&gt;
&lt;p&gt;No matter how good a job you do on the client-side prediction, it&#39;s always desynced from the server, so you need to have a system that smoothly reconciles between the extrapolated state, and the new information received from the server, without snapping stuff to the target value (this looks bad and is very disorienting) but also without interpolating too slowly (since this adds too much latency). This tends to be specific to the type of any particular value.&lt;/p&gt;
&lt;p&gt;On the server there also tends to be a latency compensation component to help players deal with lag: Incoming packets arrive that represent user commands, and rather than applying those commands to the &lt;em&gt;current&lt;/em&gt; world state, in which case they will always be late, one often tries to pull up a representation of prior world state and see what the command was doing in that context (like if the command is &amp;quot;I am shooting from position X in direction K&amp;quot;, you are almost always going to miss the target if the server naively applies the command &#39;late&#39;). A famous example of handling this is Yahn Bernier&#39;s system for Counter-Strike that he presented at GDC a long time ago (though I don&#39;t exactly like the particular things his system does).&lt;/p&gt;
&lt;p&gt;The above system relies on having an accurate estimate of the latency from client to server and from server to client, which is a whole system itself.&lt;/p&gt;
&lt;p&gt;How do you represent the values inside the packets? You are sending a lot of information so you want to keep them small. If you have a typical floating-point value, for example, you don&#39;t want to send 32 bits. So you represent it in a different way. How? Do you linearly quantize as an integer? Nonlinearly quantize as an integer? Make some kind of smaller float format? How many bits do you need for this value, and is it enough? Do you need to dynamically vary how many bits are used to represent this value in different contexts, and have something in the protocol to indicate this? All of these have different trade-offs and a significant amount of math is brought to bear here to make the right decisions.&lt;/p&gt;
&lt;p&gt;What about vector quantities, 3D positions or directions? What about 4D stuff like quaternions for orientation representation, or homogeneous-coordinate transformation matrices? To make good decisions here requires fluid working knowledge of all the linear algebra involved in 3D rendering, plus then knowledge of vector quantization schemes or some equivalent. Just representing quaternions in a reasonable manner is a whole thing, and it depends on the nature of how the rotations look typically.&lt;/p&gt;
&lt;p&gt;You can put the data into the packet as full values, but one of the most general techniques used in data compression is to represent things as deltas from a known-previous-value rather than the full value. But deltas are only relevant straightforwardly for the reliable messages, because in unreliable messages the client may not have the previous value! (aka client and server may disagree on what that is). What do you do here? Do you negotiate a neighborhood for the value via reliable messages, that then gets used in the unreliable messages? How much bandwidth does this take, is it a win?&lt;/p&gt;
&lt;p&gt;You want to entropy-code the outgoing messages to make them smaller (basically applying generic stream compression on top of the data stream you have already been trying to make small), because you are sending a lot of world state, and this involves knowledge of general data compression, which is itself a huge topic (there are entire textbooks just on the &lt;em&gt;basics&lt;/em&gt; of how to compress data), but it&#39;s tricky because good compression relies on context, and you only know that the receiver has context on the reliable (TCP-style) messages, not the unreliable (UDP-style) messages, so maybe those two things have different compression styles (the unreliable messages cannot use context outside the message for compression).&lt;/p&gt;
&lt;p&gt;You have a bandwidth and CPU usage cap on the server, so you want to decide which updates to send each frame. You don&#39;t want to oversaturate someone (if you just sent data last frame you don&#39;t want to push out more), but you do want people to get a lot of data in brief periods if a lot is happening.&lt;/p&gt;
&lt;p&gt;In a 3D space some players/objects/etc are a lot further from you and others are closer, and you can&#39;t send all the data all the time, so there is some heuristic that provides more fidelity for things that need more fidelity. You might even have occlusion detection running on the server to decide that some players should get almost no information about some things (if it&#39;s a closed room-based world for example), but if an event is big enough you still need to know about it.&lt;/p&gt;
&lt;p&gt;Because CPU is limited on the server and there are a lot of clients you want to &lt;em&gt;quickly&lt;/em&gt; determine whose world state is the most erroneous and prioritize sending to those people (which will change every frame), and if you are randomly-accessing a ton of memory this will be too slow, so this involves knowledge of cache-coherent data structures and general code optimization.&lt;/p&gt;
&lt;p&gt;If you are trying to serve a lot of clients you realize that this horrendous model of doing a system call per network message send or receipt (Unix or Windows-style) is really bad, so you end up wanting to code for hardware that doesn&#39;t work this way, so you use a network card that has an API that lets you talk to it via userspace without going through the kernel, and you talk to that via an asynchronous command-buffer API, and this in itself is a different paradigm than most programmers have ever dealt with, that has its own challenges.&lt;/p&gt;
&lt;p&gt;I have surely forgotten a lot of things here. It&#39;s a quick tweet. Each of the above paragraphs would be at least several chapters in the hypothesized book on the topic. And of course when you go do stuff in practice you run into a lot of practical problems not considered by theory (&amp;quot;hey all our designers are writing all this Blueprint code, how in the hell are we going to client-side-predict the results of this?&amp;quot;)&lt;/p&gt;
&lt;p&gt;Oh, here&#39;s one I forgot: Getting UDP messages through peoples&#39; NAT is a whole thing that is very difficult and annoying and may not work at all no matter what you try. There are some other UDP-based protocols that do their best at this if anyone is interested in what it entails.&lt;/p&gt;
&lt;p&gt;Have EXTRA fun if you want two clients to be able to send UDP to &lt;em&gt;each other&lt;/em&gt; in a modern environment...&lt;/p&gt;
&lt;h2 id=&quot;games-vs-film&quot; tabindex=&quot;-1&quot;&gt;Games vs Film&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/lLFCtg4DqrE?feature=shared&amp;amp;t=860&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/lLFCtg4DqrE?feature=shared&amp;amp;t=860&lt;/a&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Plays&lt;/th&gt;
&lt;th&gt;Enhanced by Film&lt;/th&gt;
&lt;th&gt;Unique to Film&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Characters&lt;/td&gt;
&lt;td&gt;Musical accompaniment&lt;/td&gt;
&lt;td&gt;Montage (how shots are cut together)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Dialogue&lt;/td&gt;
&lt;td&gt;Acting&lt;/td&gt;
&lt;td&gt;Framing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Plot&lt;/td&gt;
&lt;td&gt;Lighting&lt;/td&gt;
&lt;td&gt;Focus + Exposure&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Scenes&lt;/td&gt;
&lt;td&gt;Pacing&lt;/td&gt;
&lt;td&gt;Lens Choice&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Costuming&lt;/td&gt;
&lt;td&gt;Staging (how actors move through the scene)&lt;/td&gt;
&lt;td&gt;Blocking (moving the camera through the scene as it occurs)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Makeup&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Sound mixing&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Sets&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Existing in Film&lt;/th&gt;
&lt;th&gt;Enhanced by Games&lt;/th&gt;
&lt;th&gt;Unique to Games&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Sound mixing&lt;/td&gt;
&lt;td&gt;Characters&lt;/td&gt;
&lt;td&gt;Simulation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Blocking&lt;/td&gt;
&lt;td&gt;Dialogue&lt;/td&gt;
&lt;td&gt;Emergent Behavior (get more out than you put in)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Focus and Exposure&lt;/td&gt;
&lt;td&gt;Setting&lt;/td&gt;
&lt;td&gt;Dynamism (can be different for different players, or every time you play)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pacing&lt;/td&gt;
&lt;td&gt;Scenes&lt;/td&gt;
&lt;td&gt;Challenge&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Plot&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Subjectivity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Framing&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Player Expression / Creativity&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Acting&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Affordance (the way the game expresses how you can interact with it)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Montage&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Gameplay Arc (the way gameplay changes over the course of a game, difficulty curve, etc.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

            </content>
            <link href="https://janek.ing/design/video-games/" >
        </entry>
        <entry>
            <title>
                UI - UX
                
            </title>
            <updated>2025-06-26T09:48:10.505Z</updated>
            <id>https://janek.ing/design/ui-ux/</id>
            <content type="html">
                &lt;ul&gt;
&lt;li&gt;Error / Info messages &amp;gt; Disabled buttons &amp;gt; Hidden buttons
&lt;ul&gt;
&lt;li&gt;hiding UI elements can be useful in complex environments to filter non-applicable items&lt;/li&gt;
&lt;li&gt;however keep in mind that making an element unavailable or unclickable always comes with the user asking himself &amp;quot;where is that button I used a minute ago?&amp;quot; or &amp;quot;why can&#39;t I click this now - I could before?&amp;quot;&lt;/li&gt;
&lt;li&gt;if you are hiding or disabling elements, it should be totally obvious to the user why that is the case (or you could tell him in a hover text)&lt;/li&gt;
&lt;li&gt;bad counter example: Photoshop disabling certain options when image uses indexed color mode or the layer mask is selected instead of the image or not doing anything when deleting a selection on a layer that is hidden (not even an error message)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide a search option, if your program has lots of options or settings
&lt;ul&gt;
&lt;li&gt;I think for modern programs this should always be a default. An in-program fuzzy text search over all features, settings and commands is much more powerful than an external (or even internal) documentation/help.&lt;/li&gt;
&lt;li&gt;It keeps the user in the program and in flow, since it can be navigated quickly from keyboard only.&lt;/li&gt;
&lt;li&gt;This also brings one big advantage of the terminal to GUI applications: You cannot copy GUI actions (click here, then this menu opens, scroll down, click that button), but you CAN copy text commands from &lt;s&gt;stackoverflow&lt;/s&gt; ChatGPT into a command search&lt;/li&gt;
&lt;li&gt;Good examples: Sublime Text&#39;s &lt;code&gt;Ctrl + Shift + P&lt;/code&gt;, RadDBG&#39;s &lt;code&gt;F1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide feedback
&lt;ul&gt;
&lt;li&gt;Clicking a button should do &lt;em&gt;something&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;If the user does an action, there needs to be a response. If the computation takes longer, show a progress bar (but also consider moving that action to a background thread, so the program stays operable)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Don&#39;t overuse animations
&lt;ul&gt;
&lt;li&gt;They can be handy to direct the users attention&lt;/li&gt;
&lt;li&gt;They can make an interface feel more smooth&lt;/li&gt;
&lt;li&gt;Be mindful: They increase complexity of the code, since you now have &amp;quot;intermediate&amp;quot; state and lerps you need to track. To keep things simple, just keep an &amp;quot;actual value&amp;quot; and an &amp;quot;animated value&amp;quot; - first one is for computing, second only for drawing.&lt;/li&gt;
&lt;li&gt;If you include them, make them fast and snappy. Don&#39;t waste the user&#39;s time. lerp with a high t value can be a good choice.&lt;/li&gt;
&lt;li&gt;I generally don&#39;t like animations, but some people do. This might be an area where customization options shine (speed of animations, on/off toggle).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The user should always be in control
&lt;ul&gt;
&lt;li&gt;Avoid modals (this includes error popups) - these break control flow&lt;/li&gt;
&lt;li&gt;Make long operations cancel-able&lt;/li&gt;
&lt;li&gt;Undo/redo&lt;/li&gt;
&lt;li&gt;Avoid waiting time (animations, etc.)&lt;/li&gt;
&lt;li&gt;Respect what the user has entered and do not edit it without his consent (e.g. do a validation pass when the user has clicked submit on a form and highlight or correct errors then. Don&#39;t edit while the user is typing, show errors at maximum then)&lt;/li&gt;
&lt;li&gt;Config options, window customization - with good defaults (see below)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Treat the user as a intelligent individual with agency
&lt;ul&gt;
&lt;li&gt;Give the power to do complex stuff&lt;/li&gt;
&lt;li&gt;don&#39;t oversimplify the interface, alternatively provide an &amp;quot;expert&amp;quot; mode (but be aware that this doubles the amount of work and code paths, so you probably want to avoid it)&lt;/li&gt;
&lt;li&gt;Give background/developer information the user can use to diagnose problems (googleable). Maybe hide those in an optional text box, but never remove them&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make clickable elements obvious as such
&lt;ul&gt;
&lt;li&gt;Text hyperlinks are for the web, not UIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use well known elements, don&#39;t re-invent the wheel
&lt;ul&gt;
&lt;li&gt;create fancy new controls only if they provide a clear benefit and are absolutely necessary&lt;/li&gt;
&lt;li&gt;Users interact with tons of UI every day. They don&#39;t have time to learn something new&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide meaningful defaults
&lt;ul&gt;
&lt;li&gt;provide a good experience out of the box&lt;/li&gt;
&lt;li&gt;Config options are nice, but don&#39;t make them necessary&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Consistency is key
&lt;ul&gt;
&lt;li&gt;Keep a clear structure to your UI (main navigation, position of nested elements, etc.)&lt;/li&gt;
&lt;li&gt;Don&#39;t make one element do multiple things in different contexts (or make it very obvious, if it is totally necessary)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The less screens information is scattered on, the better
&lt;ul&gt;
&lt;li&gt;Screens should not be overcluttered with buttons and information, but should not be too simple either as to require a lot of popups and screen changes&lt;/li&gt;
&lt;li&gt;Every screen change removes context and makes it harder to follow&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Whitespace
&lt;ul&gt;
&lt;li&gt;less is more: make all meaningful content actually fit the screen. Don&#39;t require popups or scrolling&lt;/li&gt;
&lt;li&gt;cluttering: it takes a lot to be cluttered, just group elements together in a meaningful way and thinks keep being organized even with much on the screen&lt;/li&gt;
&lt;li&gt;add whitespace around elements only for touchscreens (different ui concept, different problems)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Load times and memory usage
&lt;ul&gt;
&lt;li&gt;This matters more than you think.&lt;/li&gt;
&lt;li&gt;Low-end consumer screens operate at 60Hz (60 images per second), high end screens in 2025 are up to 500Hz. Modern phone screens are usually 90 or 120Hz. This is because lag and jitter are noticeable and degrade the experience. Higher refresh rates provide a smoother experience and the users notice that, so your program should run in at least 60fps all the time.&lt;/li&gt;
&lt;li&gt;Modern computers are really fast. Load times for most programs should be non-existent (SSDs load files at multiple GB/s, CPUs execute millions of instructions every second). You have no excuse.&lt;/li&gt;
&lt;li&gt;Having invisible load times enables users to iterate and try features more quickly.&lt;/li&gt;
&lt;li&gt;Waiting is annoying, nobody likes looking at a progress bar or spinner. Using a fast and snappy program just feels better and is more fun, generally a better UX.&lt;/li&gt;
&lt;li&gt;&lt;a class=&quot;internal-link is-unresolved&quot; href=&quot;https://janek.ing/404&quot; target=&quot;&quot;&gt;Bullshit detector&lt;/a&gt;: If your program does a simple task, it should not take hundreds of MiB of disk space. Bad example: Balena etcher (170MiB program for writing an image to a flash drive vs the GNU tool dd which is 68KiB and does the same job) &lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020250626114023.png&quot; alt=&quot;Pasted image 20250626114023.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;concurrency&quot; tabindex=&quot;-1&quot;&gt;Concurrency&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Tvms2DaG8UY&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=Tvms2DaG8UY&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UI becomes 10x harder when the web or any server is involved&lt;/li&gt;
&lt;li&gt;requests can get lost or delayed, so UI can become out of sync&lt;/li&gt;
&lt;li&gt;Including updates state in POST request: can be inconsistent, when earlier request out of multiple is delayed and applies old state on return&lt;/li&gt;
&lt;li&gt;updating after POST: adds another round trip to the server (lag), plus possible inconsistent updates/jitter in between multiple request (but at least good state at the end)&lt;/li&gt;
&lt;li&gt;more problems when infrastructure is scaled (state needs to be synced between servers)&lt;/li&gt;
&lt;li&gt;timestamps are also tricky, since you need to carefully design at what moment to take them&lt;/li&gt;
&lt;li&gt;big problem: non idempotent changes like shopping checkout, which should only be handled once&lt;/li&gt;
&lt;li&gt;possible solution: causal ordering. Include dependency on request 1 in data of request 2 and handle on server&lt;/li&gt;
&lt;li&gt;generally: update UI locally to show immediate feedback, do not wait or block, update when corrected data arrives&lt;/li&gt;
&lt;li&gt;generally: solution is trade off between solving state sync problems and managing concurrency with stateless sources&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;user-error&quot; tabindex=&quot;-1&quot;&gt;User Error&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020250626103353.png&quot; alt=&quot;Pasted image 20250626103353.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What is user error: Clicked the wrong button, hit the wrong key, etc.
&lt;ul&gt;
&lt;li&gt;Result: An unwanted slow operation starts, something is deleted or added without intent, etc.&lt;/li&gt;
&lt;li&gt;This happens, but it&#39;s the 1% case.&lt;/li&gt;
&lt;li&gt;Handling this case should not be the default.&lt;/li&gt;
&lt;li&gt;Don&#39;t slow down the 99% to handle this case. Do not break the flow of a user on the correct path.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://dl.acm.org/doi/10.1145/191666.191729&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;10 usability heuristics by Nielsen&lt;/a&gt; - Factor 3 User Control and Freedom
&lt;ul&gt;
&lt;li&gt;User action should be reversible&lt;/li&gt;
&lt;li&gt;User has to be able to exit the unwanted state quickly without additional confirmations&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Errors happen, but it&#39;s better to give an &amp;quot;Undo&amp;quot; than to ask for confirmation every time.&lt;/li&gt;
&lt;li&gt;Consider how likely the error is and how bad the result if it is triggered without intent
&lt;ul&gt;
&lt;li&gt;If a dangerous action can be triggered easily (for example by being one pixel off when clicking the &amp;quot;save&amp;quot; button and hitting the &amp;quot;exit without saving&amp;quot; button next to it), it&#39;s more sensible to ask for confirmation than if the user has to hit a very specific keybind to trigger this state.&lt;/li&gt;
&lt;li&gt;But also: don&#39;t put the dangerous option right next to the harmless one.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Modern Windows delete dialog mostly gets this right imo (even though it gets a lot of hate): Moving files to the recycle bin does not prompt for confirmation by default (though you can enable it) and you can undo it easily (through Ctrl + Z or context menu). Deleting a file permanently does prompt for confirmation and is not reversible. That is sensible in my eyes.
&lt;ul&gt;
&lt;li&gt;Even though to delete it permanently you have to hit Shift + Delete, which probably never happens accidentally (and Windows really should have a recycle bin solution for remote drives by now).&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programs that ask for confirmation before closing when there are unsaved changes.
&lt;ul&gt;
&lt;li&gt;This okay, but a better solution would be to just save these to a &amp;quot;session&amp;quot; file and re-open them automatically on next startup (a welcome change in Windows 11 Editor and most modern text editors).&lt;/li&gt;
&lt;li&gt;This implies that saving and loading is instant, which it should be in most cases! (if it is not, you can still ask &amp;quot;Hey there were unsaved changes on last exit, do you want to load them?&amp;quot; on startup)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Try to reduce user error in general
&lt;ul&gt;
&lt;li&gt;Use the right affordances to communicate cleanly&lt;/li&gt;
&lt;li&gt;If there are multiple ways to interpret an action, but only one leads to the right solution, default to that one&lt;/li&gt;
&lt;li&gt;Group actions sensibly&lt;/li&gt;
&lt;li&gt;Use commonly understood UI elements in their intended way (don&#39;t use them out of context or assign new meaning to them - for example I HATE when a program minimizes to tray when I try to close it)&lt;/li&gt;
&lt;li&gt;Provide context help&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide a cancel action when an operation might take longer than 500ms (kind of an arbitrary value, but most monitors are running at 60Hz, so 30 frames is clearly noticable lag, human reaction times are generally 200-500ms, so this is enough time to react and actually hit cancel)&lt;/li&gt;
&lt;li&gt;Avoid error messages by handling everything you can (which is more than you think). If you cannot handle an error internally, provide (meaningful) error messages
&lt;ul&gt;
&lt;li&gt;This does not help anyone: &lt;img src=&quot;https://janek.ing/img/user/_attachments/media_GMIPHd9aIAAM5nf.webp&quot; alt=&quot;media_GMIPHd9aIAAM5nf.webp&quot; /&gt;&lt;/li&gt;
&lt;li&gt;Tell the user exactly what went wrong&lt;/li&gt;
&lt;li&gt;Ideally include a hint on how to fix the error&lt;/li&gt;
&lt;li&gt;Make the error message easily googleable (use descriptive keywords, make the text copyable - old Windows error dialog boxes copied the whole content to clipboard when the user pressed Ctrl + C)&lt;/li&gt;
&lt;li&gt;If you fear overly technical terms might scare the user, first reconsider the user as a competent individual, second if you are still unsure hide additional details &amp;quot;for nerds&amp;quot; behind a &amp;quot;more info&amp;quot; dropdown&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/design/ui-ux/" >
        </entry>
        <entry>
            <title>
                Musiktheorie
                
            </title>
            <updated>2025-05-24T10:50:50.494Z</updated>
            <id>https://janek.ing/design/musiktheorie/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=HAWUhboLW-0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=HAWUhboLW-0&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;vorgehen&quot; tabindex=&quot;-1&quot;&gt;Vorgehen&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329214230.png&quot; alt=&quot;Pasted image 20240329214230.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ungefähre Melodie spielen&lt;/li&gt;
&lt;li&gt;&amp;quot;Rest points&amp;quot; identifizieren (Moment wo Melodie &amp;quot;anhält&amp;quot;)&lt;/li&gt;
&lt;li&gt;Akkord unter diese Momente legen, welcher Note aus Melodie beinhaltet (um Oktave verschoben)&lt;/li&gt;
&lt;li&gt;Heroes Journey
&lt;ul&gt;
&lt;li&gt;Center / Home -&amp;gt; Call -&amp;gt; Threshold -&amp;gt; Learning -&amp;gt; Coming Back&lt;/li&gt;
&lt;li&gt;Akkorde: I -&amp;gt; IV, VI, III (einer oder mehrere) -&amp;gt; II (optional) -&amp;gt; V -&amp;gt; I&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;I, IV, V sind dur (III, VI moll) in C-dur -&amp;gt; positive Emotionen&lt;/li&gt;
&lt;li&gt;I, IV, V sind moll (III, VI dur) in C-moll -&amp;gt; negative Emotionen&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tonleiter&quot; tabindex=&quot;-1&quot;&gt;Tonleiter&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329221948.png&quot; alt=&quot;Pasted image 20240329221948.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/g-schluessel.jpg&quot; alt=&quot;g-schluessel.jpg&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/piano-sheet-music-flats-and-sharps.jpg&quot; alt=&quot;piano-sheet-music-flats-and-sharps.jpg&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dur&quot; tabindex=&quot;-1&quot;&gt;Dur&lt;/h3&gt;
&lt;p&gt;1 -&amp;gt; 1 -&amp;gt; 1/2 -&amp;gt; 1 -&amp;gt; 1 -&amp;gt; 1 -&amp;gt; 1/2&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329221755.png&quot; alt=&quot;Pasted image 20240329221755.png&quot; /&gt;&lt;br /&gt;
C-dur: C -&amp;gt; D -&amp;gt; E -&amp;gt; F -&amp;gt; G -&amp;gt; A -&amp;gt; B -&amp;gt; C&lt;/p&gt;
&lt;h3 id=&quot;moll&quot; tabindex=&quot;-1&quot;&gt;Moll&lt;/h3&gt;
&lt;p&gt;1 -&amp;gt; 1/2 -&amp;gt; 1 -&amp;gt; 1 -&amp;gt; 1/2 -&amp;gt; 1 -&amp;gt; 1&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329222047.png&quot; alt=&quot;Pasted image 20240329222047.png&quot; /&gt;&lt;br /&gt;
A-moll: A -&amp;gt; B -&amp;gt; C -&amp;gt; D -&amp;gt; E -&amp;gt; F -&amp;gt; G -&amp;gt; A&lt;/p&gt;
&lt;h2 id=&quot;wichtigste-akkorde-c-dur&quot; tabindex=&quot;-1&quot;&gt;Wichtigste Akkorde (C-dur)&lt;/h2&gt;
&lt;h3 id=&quot;dur-1&quot; tabindex=&quot;-1&quot;&gt;Dur&lt;/h3&gt;
&lt;p&gt;Start -&amp;gt; 4 Halbtöne -&amp;gt; 3 Halbtöne&lt;br /&gt;
I -&amp;gt; C E G&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329214745.png&quot; alt=&quot;Pasted image 20240329214745.png&quot; /&gt;&lt;br /&gt;
IV -&amp;gt; C F A&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329214908.png&quot; alt=&quot;Pasted image 20240329214908.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329214955.png&quot; alt=&quot;Pasted image 20240329214955.png&quot; /&gt;&lt;br /&gt;
V -&amp;gt; G D B&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329215052.png&quot; alt=&quot;Pasted image 20240329215052.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329214649.png&quot; alt=&quot;Pasted image 20240329214649.png&quot; /&gt;&lt;/p&gt;
&lt;h3 id=&quot;moll-1&quot; tabindex=&quot;-1&quot;&gt;Moll&lt;/h3&gt;
&lt;p&gt;Start -&amp;gt; 3 Halbtöne -&amp;gt; 4 Halbtöne&lt;br /&gt;
III -&amp;gt; E G B&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329215517.png&quot; alt=&quot;Pasted image 20240329215517.png&quot; /&gt;&lt;br /&gt;
VI -&amp;gt; A C E&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329215342.png&quot; alt=&quot;Pasted image 20240329215342.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240329215229.png&quot; alt=&quot;Pasted image 20240329215229.png&quot; /&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/design/musiktheorie/" >
        </entry>
        <entry>
            <title>
                Testing
                
            </title>
            <updated>2025-05-26T17:30:38.114Z</updated>
            <id>https://janek.ing/code/testing/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://youtu.be/IqHaGd9J42s?feature=shared&amp;amp;t=1511&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/IqHaGd9J42s?feature=shared&amp;amp;t=1511&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=isI1c0eGSZ0&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=isI1c0eGSZ0&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://youtu.be/kJWsFWY25GA?feature=shared&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/kJWsFWY25GA?feature=shared&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://grugbrain.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://grugbrain.dev/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://lightbrd.com/SebAaltonen/status/1924075241413705914#m&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://lightbrd.com/SebAaltonen/status/1924075241413705914#m&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;generell&quot; tabindex=&quot;-1&quot;&gt;Generell&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;100% Coverage ist Quatsch (trivialer Code muss nicht getestet werden und erzeugt nur Rattenschwanz an Mehraufwand). 100% sagt auch nichts darüber aus, ob wirklich alle Edge-Cases getroffen wurden (sondern nur, dass jede Zeile Code mindestens 1x von einem Test aufgerufen wird) - ist also kein Garant für Bug-freien Code.&lt;/li&gt;
&lt;li&gt;Tests sind Code und können auch Bugs enthalten (Wer testet die Tests?)&lt;/li&gt;
&lt;li&gt;Tests sollten so deklarativ wie möglich sein (doX; doY; doZ)&lt;/li&gt;
&lt;li&gt;Tests müssen ordentlich funktionieren. Wenn Tests zu viele false-positives liefern werden sie irgendwann ignoriert.
&lt;ul&gt;
&lt;li&gt;Ein fehlender Test ist besser als ein falscher Test!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Test-Code muss von mindestens so erfahrenem Entwickler geschrieben werden, wie der zu testende Application Code
&lt;ul&gt;
&lt;li&gt;Es ist sehr schwierig alle Edge-Cases auf dem Schirm zu haben und zu testen. Aber hier liegt der wahre Wert von Tests.&lt;/li&gt;
&lt;li&gt;Tests finden nur &amp;quot;bekannte&amp;quot; Bugs, die man vorher erwartet hat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Generell gute Idee: Wenn man einen neuen Bug findet, einen Test für den Fix schreiben (welcher ohne Fix anschlägt), um Regressionen zu vermeiden. Insbesondere bei komplexen Bugs sehr zu empfehlen.&lt;/li&gt;
&lt;li&gt;Testcode sollten Bereiche testen, wo der Output relativ stabil ist. Wenn sich bei Änderung der Implementierung auch der Output ändert, müssen meist die Test-Cases angepasst werden und sind damit wertlos (bzw. erzeugen nur Mehraufwand). Den Scope des Tests (Unit vs. Integration vs. E2E vs. ...) richtig zu wählen, kann hier Arbeit ersparen (bspw. keine Unit Tests für eine Implementierung schreiben, welche sich täglich ändert, sondern lieber einen E2E Test wenn das Ergebnis immer gleich ist)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-driven-development-tdd&quot; tabindex=&quot;-1&quot;&gt;Test Driven Development (TDD)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Kann sinnvoll sein, muss aber zielgerichtet eingesetzt werden&lt;/li&gt;
&lt;li&gt;Kann dazu führen, dass man Code schreibt, welcher sich zu sehr auf die vorher definierten Tests fokussiert und nicht auf den eigentlichen &amp;quot;Job-to-be-done&amp;quot; (also z.B. eine API welche die Tests super abdeckt, aber in der Praxis schwer zu benutzen ist)&lt;/li&gt;
&lt;li&gt;Test im vorhinein zu schreiben ist sehr schwierig, da das System oder die Aufgabe meist nicht klar definiert ist. Kann dazu führen, dass man während der Entwicklung viel Arbeit doppelt macht. Oftmals ist es einfacher ein System zu testen, sobald es sich stabilisiert hat.&lt;/li&gt;
&lt;li&gt;TDD scores können als Gamification-Element zur Erhöhung der Motivation beitragen (man will seinen Test-Score erhöhen und quält sich deswegen durch ein langweiliges Problem)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unit-tests&quot; tabindex=&quot;-1&quot;&gt;Unit Tests&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Testen von einzelnen Code &amp;quot;Units&amp;quot;, also z.B. Funktionen, Datentypen, Modulen etc.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Keine Logik in Unit-Tests! (if..else) -&amp;gt; macht debugging deutlich schwieriger und man kann sich nicht darauf verlassen, dass alle Pfade richtig getestet wurden&lt;/li&gt;
&lt;li&gt;Bei einem Refactoring müssen auch die meisten Unit Tests umgeschrieben werden
&lt;ul&gt;
&lt;li&gt;Zu umfangreiche Tests vermeiden&lt;/li&gt;
&lt;li&gt;Unit Tests für trivialen Code vermeiden&lt;/li&gt;
&lt;li&gt;Ggf. besser: Integrations-Tests in CI/CD-Pipeline&lt;/li&gt;
&lt;li&gt;Zu viele Tests erhöhen die Reibung bei einem notwendigen Rewrite und halten ggf. davon ab (man will keinen fertigen Code wegschmeißen)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Empfohlen bei komplexen Code (wo man Code nicht auf Anhieb richtig hinbekommen hat)&lt;/li&gt;
&lt;li&gt;Bei Libraries empfohlen, sobald API einigermaßen fest ist
&lt;ul&gt;
&lt;li&gt;Tests können als eine Art Dokumentation einer API dienen, da man sieht wie Funktionen aufgerufen und welche Ergebnisse erwartet werden.&lt;/li&gt;
&lt;li&gt;Casey empfiehlt (-&amp;gt;&lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/architecture/#api-design&quot;&gt;Architecture#API Design&lt;/a&gt;) den Anwendungscode zuerst zu schreiben. Dies kann auch in Form von Tests passieren, wenn diese nah an der realen Anwendung orientiert sind.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Herausforderung: Testen von Verbindungen zu externen Quellen (Lesen/Schreiben von Dateien, Zugriff auf Datenbanken, HTTP, etc.)
&lt;ul&gt;
&lt;li&gt;Mocking: Simulation externer Abhängigkeiten (z.B. Datei oder Datenbank) durch eigene &amp;quot;Fake&amp;quot;-Implementation. (z.B. indem Zugriff in abstrakten &amp;quot;provider&amp;quot; gewrappt ist). Achtung: Hierbei werden ggf. nicht die Fehlerfälle getestet, welche bei echtem Zugriff entstehen können. Erfolg hängt von Qualität des Mocks ab und ist ggf. mit hohem Aufwand verbunden.&lt;/li&gt;
&lt;li&gt;Besser: Split von Zugriff und Verarbeitung der Daten (zweite Funktion welche z.B. byte-Array als Input nimmt). Können separat getestet werden.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/isI1c0eGSZ0?feature=shared&amp;amp;t=540&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/isI1c0eGSZ0?feature=shared&amp;amp;t=540&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Die Unit Tests sollten niemals die Programm Architektur bestimmen: Gefahr, dass Code geschrieben wird, der zwar sehr &amp;quot;testbar&amp;quot; ist, aber die eigentliche Aufgabe nur schlecht erfüllt (zu langsam ist, schlechte API, zu viele Abstraktionen, etc.). Wird durch TDD zusätzlich erhöht, wenn Tests zuerst geschrieben werden und der Code danach nur auf die Tests ausgerichtet ist.&lt;/li&gt;
&lt;li&gt;Tests müssen schnell sein! Iterationsgeschwindigkeit ist key und Tests dürfen dem nicht im Wege stehen
&lt;ul&gt;
&lt;li&gt;Zugriff auf externe Systeme (Datenbanken, Dateisystem, Web!) vermeiden und lieber &amp;quot;golden master&amp;quot; Testdaten im Code ablegen.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Programmiersprachen mit striktem Typensystem haben gewisse Tests eingebaut (Test auf Kompatibilität der Datentypen, Test auf Verlust bei Konvertierung, Test auf Mutability, etc.). Wenn dies genutzt werden kann, ist dies immer besser als ein vergleichbarer Unit-Test (kein zusätzlicher Code, mit größerer Sicherheit Bug-frei, schneller/effizienter).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;integration-tests&quot; tabindex=&quot;-1&quot;&gt;Integration Tests&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Test des Zusammenspiels mehrerer Module (Klassen, Services, Funktionen, etc.)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gute Möglichkeit Wechselwirkung und Kommunikation zwischen mehreren Bereichen des Codes zu testen (z.B. Zugriff auf Datenbank + Verarbeitung der Daten oder Authentifizierung + Login)&lt;/li&gt;
&lt;li&gt;Umfang und Aufwand liegt zwischen Unit- und E2E-Tests. Oftmals guter Mittelweg.&lt;/li&gt;
&lt;li&gt;Sollten erst geschrieben werden, wenn der Systemaufbau einigermaßen stabil ist. Ansonsten zu viel Arbeit zum Maintainen&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;end-to-end-tests&quot; tabindex=&quot;-1&quot;&gt;End-To-End Tests&lt;/h2&gt;
&lt;p&gt;&lt;em&gt;Testen des gesamten Produktes anhand der Systemgrenzen (z.B. von User-Input bis GUI oder Eintreffen eines Datenpakets, über die Verarbeitung bis zum Versand einer Alert-E-Mail)&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Idealerweise in CI/CD-Pipeline integriert&lt;/li&gt;
&lt;li&gt;Testen das gesamte System mit seinen Abhängigkeiten in einer &amp;quot;realen&amp;quot; Umgebung&lt;/li&gt;
&lt;li&gt;Sehr aufwändig zu implementieren und zu maintainen (müssen auch aktiv maintained werden, sonst versagen sie irgendwann und liefern false-positives)&lt;/li&gt;
&lt;li&gt;Müssen reproduzierbar sein, ansonsten wird debugging unmöglich&lt;/li&gt;
&lt;li&gt;Sehr wertvoll, aber auch aufwendig, daher: Fokus auf die wichtigsten (am häufigsten genutzten) Funktionen&lt;/li&gt;
&lt;li&gt;Aufpassen, dass Tests nicht zu sehr den internen State beschreiben/festlegen und dadurch notwendige Änderungen blockieren&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;snapshot-tests&quot; tabindex=&quot;-1&quot;&gt;Snapshot Tests&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Man nimmt einen Schnappschuss des Systems im &amp;quot;known good&amp;quot; Zustand auf (&amp;quot;golden Master&amp;quot;) und vergleicht im Folgenden damit (bspw. Zustand des Programms nachdem gewisser Input geliefert wurde)&lt;/li&gt;
&lt;li&gt;Abweichungen vom Schnappschuss führen zum Fehlschlagen des Tests und Diff kann dann näher zur Ursachenforschung untersucht werden&lt;/li&gt;
&lt;li&gt;Eine Form von Integration oder End-To-End Tests&lt;/li&gt;
&lt;li&gt;Aufwendig aufzubauen, aber sehr hilfreich bei großen Änderungen&lt;/li&gt;
&lt;li&gt;Hilft ungewollte Veränderung an global state zu erkennen&lt;/li&gt;
&lt;li&gt;Nur sinnvoll, wenn der Systemzustand konstant bleibt (also bspw. die Änderungen nur den Weg dahin beeinflussen, aber nicht den Zustand an sich)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;test-framework-fuer-c&quot; tabindex=&quot;-1&quot;&gt;Test-Framework für C&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;assert, assertf&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://nemequ.github.io/munit/#miscellaneous&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;µnit — C Unit Testing Framework&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Vordefinierte assert Makros&lt;/li&gt;
&lt;li&gt;Definition von Test-Suites mit Performance-Benchmark und Statistik Output&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/code/testing/" >
        </entry>
        <entry>
            <title>
                Stack vs. Heap
                
            </title>
            <updated>2025-05-24T10:52:56.435Z</updated>
            <id>https://janek.ing/code/stack-vs-heap/</id>
            <content type="html">
                &lt;h2 id=&quot;fazit&quot; tabindex=&quot;-1&quot;&gt;Fazit&lt;/h2&gt;
&lt;p&gt;Pass by Value ist bei kleinen Objekten zu bevorzugen. Es kann besser optimiert werden, da es für den Compiler transparent ist.&lt;/p&gt;
&lt;p&gt;Bei größeren Objekten ist ein gewisser overhead zur Vorbereitung des Funktionsaufrufs verbunden. Allerdings kann der Compiler mathematische Operation ggf. vorberechnen und loops unrollen. Dies gilt solange das Objekt auf dem Stack liegt, falls nicht muss es dorthin kopiert werden, das ist dann deutlich aufwendiger!&lt;br /&gt;
Es müssen also die Kosten für copy auf den stack vs. Pointer indirection (und damit einhergehende Intransparenz) abgewogen werden.&lt;br /&gt;
&lt;a href=&quot;https://godbolt.org/z/7jPYhn9TP&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://godbolt.org/z/7jPYhn9TP&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;CPUs laden Daten in Chunks (Cache line). Bei modernen Desktop-CPUs ist diese 64 Byte groß - bei vielen embedded Systemen (ESP32, ARM Cortex &amp;gt;M4) 32 Bytes. Maximalgröße für Pass-by-value sollte kleiner als eine Cache Line sein. Wenn das Object kleiner als 1-2 Words (also 8-16 Byte bei 64-bit Systemen) ist, kann es sogar direkt in einen/mehreren Registern geladen werden (und muss auch kein pointer offset berechnet werden).&lt;br /&gt;
&lt;a href=&quot;https://igoro.com/archive/gallery-of-processor-cache-effects/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Gallery of Processor Cache Effects (igoro.com)&lt;/a&gt;&lt;br /&gt;
siehe auch: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/tech/cpu/#cache&quot;&gt;CPU#Cache&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Auf 8bit/16bit-Systemen mit wenigen Registern immer pass-by-reference!&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/a/30987540&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/a/30987540&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;grundlagen&quot; tabindex=&quot;-1&quot;&gt;Grundlagen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;stack wird pro thread bei start des Programms allokiert. Größe wird von Compiler oder OS bestimmt.
&lt;ul&gt;
&lt;li&gt;Für C siehe: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/langauges/c/#stack-space&quot;&gt;C#Stack space&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Funktionsaufrufe, return Adresse und lokale variablen liegen im stack. Größe für lokale variablen wird beim Kompilieren bestimmt.&lt;/li&gt;
&lt;li&gt;globale und static variablen liegen im &amp;quot;code&amp;quot; (const) oder &amp;quot;data&amp;quot; segment (in C/C++)&lt;/li&gt;
&lt;li&gt;Allokationen von Pointern reservieren platz auf dem heap&lt;/li&gt;
&lt;li&gt;Allokationen auf dem stack verschieben nur stack pointer (schnell)&lt;/li&gt;
&lt;li&gt;Allokationen auf dem heap sind deutlich aufwendiger (virtual alloc)&lt;/li&gt;
&lt;li&gt;Anonyme Funktionen (in C# oder Java) haben Zugriff auf variablen aus dem aufrufenden Kontext. Diese müssen temporär auf dem heap gespeichert werden!&lt;/li&gt;
&lt;li&gt;Speicheradresse von Variablen auf dem Stack: 0x7f.... (x86_64)&lt;br /&gt;
&lt;a href=&quot;https://endjin.com/blog/2022/07/understanding-the-stack-and-heap-in-csharp-dotnet?utm_source=csharpdigest&amp;amp;utm_medium&amp;amp;utm_campaign=1386&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://endjin.com/blog/2022/07/understanding-the-stack-and-heap-in-csharp-dotnet?utm_source=csharpdigest&amp;amp;utm_medium&amp;amp;utm_campaign=1386&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;beispiel&quot; tabindex=&quot;-1&quot;&gt;Beispiel&lt;/h2&gt;
&lt;p&gt;Ohne compiler Optimierung:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;Point p = {.x=5,.y=3};
int len = length(p);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;stack pointer wird verringert&lt;/li&gt;
&lt;li&gt;werte werden in den stack geschrieben&lt;/li&gt;
&lt;li&gt;Adresse von struct wird in register geschrieben&lt;/li&gt;
&lt;li&gt;Funktion wird aufgerufen
&lt;ul&gt;
&lt;li&gt;lädt werte aus stack in register&lt;/li&gt;
&lt;li&gt;multipliziert register&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ergebnis wird aus register in stack geschrieben&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;Point *p = malloc(sizeof(Point));
p-&amp;gt;x = 5;
P-&amp;gt;y = 3;
int len = length(p);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;stack pointer wird verringert&lt;/li&gt;
&lt;li&gt;malloc wird aufgerufen&lt;/li&gt;
&lt;li&gt;Adressen von membern werden einzeln in register geladen&lt;/li&gt;
&lt;li&gt;werte werden an Adresse in Registern geschrieben&lt;/li&gt;
&lt;li&gt;Adresse von struct wird in Register geschrieben&lt;/li&gt;
&lt;li&gt;Funktion wird aufgerufen
&lt;ul&gt;
&lt;li&gt;lädt Adresse von membern in register&lt;/li&gt;
&lt;li&gt;lädt wert an Adresse in anderen Register&lt;/li&gt;
&lt;li&gt;multipliziert werte&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Ergebnis wird aus register in stack geschrieben&lt;br /&gt;
&lt;a href=&quot;https://godbolt.org/z/h9v8PhEce&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://godbolt.org/z/h9v8PhEce&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mit zusätzlicher globaler count variable, um zu verhindern, dass compiler alles statisch berechnet und weg optimiert:&lt;br /&gt;
Fall1 mit übergebenem struct wird immer noch vom compiler weg optimiert und statisch berechnet, fall2 mit malloc und Referenz nicht!&lt;br /&gt;
Aber funktion mit Berechnung mit pointer wird zu Fall1 ohne pointer optimiert (aka laden der member Adressen in Register wird übersprungen). Funktion für Fall1 ohne pointer ist nun shift Operation (?).&lt;br /&gt;
-&amp;gt; optimierung von pointer fall laggt einen zyklus hinterher&lt;br /&gt;
&lt;a href=&quot;https://godbolt.org/z/Efdhaj65o&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://godbolt.org/z/Efdhaj65o&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;pass-by-reference&quot; tabindex=&quot;-1&quot;&gt;Pass-by-reference&lt;/h2&gt;
&lt;p&gt;C hat kein pass-by-reference! Alles wird als value übergeben.&lt;br /&gt;
Pass-by-reference und pass-by-pointer in C++ produzieren denselben Assembler Code!&lt;br /&gt;
&lt;a href=&quot;https://godbolt.org/z/zc3asWoWc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://godbolt.org/z/zc3asWoWc&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Weiteres Beispiel mit einem Parameter, welcher verändert werden soll (pointer) und einem zusätzlichen wert (einmal value, einmal pointer). Assembly ist sehr ähnlich, pass by pointer hat im Grunde nur einen mov und eine dereferenzierung mehr. Dies bleibt auch über unterschiedliche -Ox settings ähnlich. Bei -O wird immer nur der erste call zu addScaled weg optimiert.&lt;br /&gt;
&lt;a href=&quot;https://godbolt.org/z/4PW31a66o&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://godbolt.org/z/4PW31a66o&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Praktische Betrachtung im Playdate collision code: Kein messbarer Unterschied zwischen pass-by-value und pass-by-reference für Vector2D Klasse. Auch bei 20 zusätzlichen floats nicht. Erst bei 200 sinkt die Performance von pass-by-value merklich (5-10%).&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/stack-vs-heap/" >
        </entry>
        <entry>
            <title>
                Rules for Code Comments
                
            </title>
            <updated>2025-06-16T12:45:09.933Z</updated>
            <id>https://janek.ing/code/rules-for-code-comments/</id>
            <content type="html">
                &lt;style&gt; .container {font-family: sans-serif; text-align: center;} .button-wrapper button {z-index: 1;height: 40px; width: 100px; margin: 10px;padding: 5px;} .excalidraw .App-menu_top .buttonList { display: flex;} .excalidraw-wrapper { height: 800px; margin: 50px; position: relative;} :root[dir=&quot;ltr&quot;] .excalidraw .layer-ui__wrapper .zen-mode-transition.App-menu_bottom--transition-left {transform: none;} &lt;/style&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react@17/umd/react.production.min.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;https://cdn.jsdelivr.net/npm/react-dom@17/umd/react-dom.production.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.jsdelivr.net/npm/@excalidraw/excalidraw@0/dist/excalidraw.production.min.js&quot;&gt;&lt;/script&gt;&lt;div id=&quot;Rules_for_Code_Comments_2024-03-21_0941.05.excalidraw.md1&quot;&gt;&lt;/div&gt;&lt;script&gt;(function(){const InitialData={&quot;type&quot;:&quot;excalidraw&quot;,&quot;version&quot;:2,&quot;source&quot;:&quot;https://github.com/zsviczian/obsidian-excalidraw-plugin/releases/tag/2.10.1&quot;,&quot;elements&quot;:[{&quot;type&quot;:&quot;diamond&quot;,&quot;version&quot;:242,&quot;versionNonce&quot;:261255413,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;E02_zOcpqN6QTtv-jgTxF&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-864.9305555555555,&quot;y&quot;:-862.2152777777778,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:360,&quot;height&quot;:170,&quot;seed&quot;:1116960449,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;0Pegy4lt&quot;},{&quot;id&quot;:&quot;GJK9OGogKrybUpAvKov3s&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;hOtTbsLuhuA9F6ujbMhTc&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;a0&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:268,&quot;versionNonce&quot;:1036059867,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;0Pegy4lt&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-761.1024305555555,&quot;y&quot;:-813.2152777777778,&quot;strokeColor&quot;:&quot;#1971c2&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:152.34375,&quot;height&quot;:72,&quot;seed&quot;:1523266241,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;are you&#92;nwriting code&#92;nor a comment?&quot;,&quot;rawText&quot;:&quot;are you writing code or a comment?&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;E02_zOcpqN6QTtv-jgTxF&quot;,&quot;originalText&quot;:&quot;are you writing code or a comment?&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:67,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;a1&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:578,&quot;versionNonce&quot;:1211850331,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;GJK9OGogKrybUpAvKov3s&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-681.8174304257582,&quot;y&quot;:-689.380699608195,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0.4121017527099866,&quot;height&quot;:149.0746616415896,&quot;seed&quot;:1980864399,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;0QuD5jhW&quot;}],&quot;updated&quot;:1745772063883,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;E02_zOcpqN6QTtv-jgTxF&quot;,&quot;focus&quot;:-0.015946196386071816,&quot;gap&quot;:8.26691098389999},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;aFf8R93gN5cMnmivT_m-Y&quot;,&quot;focus&quot;:0.008951896067003822,&quot;gap&quot;:5.730408418460129},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[0.4121017527099866,149.0746616415896]],&quot;index&quot;:&quot;a2&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:17,&quot;versionNonce&quot;:916566395,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;0QuD5jhW&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-705.0532231420705,&quot;y&quot;:-628.4146272367195,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:46.875,&quot;height&quot;:24,&quot;seed&quot;:1775122575,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;code&quot;,&quot;rawText&quot;:&quot;code&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;GJK9OGogKrybUpAvKov3s&quot;,&quot;originalText&quot;:&quot;code&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;a3&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:847,&quot;versionNonce&quot;:897782619,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;hOtTbsLuhuA9F6ujbMhTc&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-685.7334827822903,&quot;y&quot;:-867.2216888808291,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:0.37400902087870236,&quot;height&quot;:152.61402408795982,&quot;seed&quot;:933176545,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;gWdYOkXr&quot;}],&quot;updated&quot;:1745772063891,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;E02_zOcpqN6QTtv-jgTxF&quot;,&quot;focus&quot;:-0.0032352765690069948,&quot;gap&quot;:10.433938436927946},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;E4egjr6rkvuDdDN6tCEq0&quot;,&quot;focus&quot;:-0.024318584104156448,&quot;gap&quot;:9.852826583471952},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[-0.37400902087870236,-152.61402408795982]],&quot;index&quot;:&quot;a4&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:16,&quot;versionNonce&quot;:1946405403,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;gWdYOkXr&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-726.9385670778945,&quot;y&quot;:-956.5301651454134,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:82.03125,&quot;height&quot;:24,&quot;seed&quot;:1874565985,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;comment&quot;,&quot;rawText&quot;:&quot;comment&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;hOtTbsLuhuA9F6ujbMhTc&quot;,&quot;originalText&quot;:&quot;comment&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;a5&quot;},{&quot;type&quot;:&quot;diamond&quot;,&quot;version&quot;:346,&quot;versionNonce&quot;:378124565,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;aFf8R93gN5cMnmivT_m-Y&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-930.2638888888891,&quot;y&quot;:-542.7708333333335,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:494,&quot;height&quot;:260,&quot;seed&quot;:144175407,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;HGhhc8kE&quot;},{&quot;id&quot;:&quot;GJK9OGogKrybUpAvKov3s&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;6Y90rCFayCtO-ZSWunyxZ&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;GPugp4Lb9aDZVc-lpa7fY&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;a6&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:439,&quot;versionNonce&quot;:987352763,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;HGhhc8kE&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-800.4513888888891,&quot;y&quot;:-472.7708333333335,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:234.375,&quot;height&quot;:120,&quot;seed&quot;:491242671,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Is the code readable&#92;nand understandable&#92;nfor another&#92;nprogrammer of equal&#92;nor lower skill?&quot;,&quot;rawText&quot;:&quot;Is the code readable and understandable for another programmer of equal or lower skill?&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;aFf8R93gN5cMnmivT_m-Y&quot;,&quot;originalText&quot;:&quot;Is the code readable and understandable for another programmer of equal or lower skill?&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:115,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;a7&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:215,&quot;versionNonce&quot;:60087035,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;6Y90rCFayCtO-ZSWunyxZ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-867.5989108762467,&quot;y&quot;:-372.63867039585733,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:84.66497801264245,&quot;height&quot;:110.86783706252385,&quot;seed&quot;:154283119,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;qOeiWMjl&quot;}],&quot;updated&quot;:1745772063884,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;aFf8R93gN5cMnmivT_m-Y&quot;,&quot;focus&quot;:0.6222179058254884,&quot;gap&quot;:10.8452090593792},&quot;endBinding&quot;:null,&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[-84.66497801264245,110.86783706252385]],&quot;index&quot;:&quot;a8&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:12,&quot;versionNonce&quot;:231096155,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;qOeiWMjl&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-928.8999262793102,&quot;y&quot;:-327.38403686384856,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:35.15625,&quot;height&quot;:24,&quot;seed&quot;:1226837807,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;yes&quot;,&quot;rawText&quot;:&quot;yes&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;6Y90rCFayCtO-ZSWunyxZ&quot;,&quot;originalText&quot;:&quot;yes&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;a9&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:112,&quot;versionNonce&quot;:1212430293,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;wVgLXr24j71QKeP0ygRzD&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1082.2638888888891,&quot;y&quot;:-244.77083333333348,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:201,&quot;height&quot;:59,&quot;seed&quot;:305187343,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;JpsG3Yyz&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aA&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:125,&quot;versionNonce&quot;:1998298107,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;JpsG3Yyz&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1046.2170138888891,&quot;y&quot;:-239.27083333333348,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:128.90625,&quot;height&quot;:48,&quot;seed&quot;:1023096961,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;great! Keep&#92;ngoing!&quot;,&quot;rawText&quot;:&quot;great! Keep going!&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;wVgLXr24j71QKeP0ygRzD&quot;,&quot;originalText&quot;:&quot;great! Keep going!&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:43,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aB&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:826,&quot;versionNonce&quot;:422615099,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;GPugp4Lb9aDZVc-lpa7fY&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-483.4502510733486,&quot;y&quot;:-380.169483367045,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:67.68946947318358,&quot;height&quot;:69.62428314240492,&quot;seed&quot;:1578886945,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;aPnHsc3p&quot;}],&quot;updated&quot;:1745772063886,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;aFf8R93gN5cMnmivT_m-Y&quot;,&quot;focus&quot;:-0.7505407040362784,&quot;gap&quot;:12.543293947001061},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;kj9RE4ItW4xMb4ktZpCXF&quot;,&quot;focus&quot;:0.39935148659711617,&quot;gap&quot;:15.757777940344255},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[67.68946947318358,69.62428314240492]],&quot;index&quot;:&quot;aC&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:316433563,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;aPnHsc3p&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-491.8818056412716,&quot;y&quot;:-338.23970586018316,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:23.4375,&quot;height&quot;:24,&quot;seed&quot;:832203247,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;no&quot;,&quot;rawText&quot;:&quot;no&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;GPugp4Lb9aDZVc-lpa7fY&quot;,&quot;originalText&quot;:&quot;no&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aD&quot;},{&quot;type&quot;:&quot;diamond&quot;,&quot;version&quot;:427,&quot;versionNonce&quot;:1660814997,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;kj9RE4ItW4xMb4ktZpCXF&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-614.978174603175,&quot;y&quot;:-322.34226190476204,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:482.3214285714286,&quot;height&quot;:308,&quot;seed&quot;:1358162607,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;5cDiJeVk&quot;},{&quot;id&quot;:&quot;GPugp4Lb9aDZVc-lpa7fY&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;HBl42pf69sNSIr7NeLw1s&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;EVW-2FrbhUke86xP9IgFr&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aE&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:390,&quot;versionNonce&quot;:1488656699,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;5cDiJeVk&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-485.22594246031787,&quot;y&quot;:-240.34226190476204,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:222.65625,&quot;height&quot;:144,&quot;seed&quot;:33314753,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Is the code doing&#92;nsomething&#92;ncomplicated? Or did&#92;nit take you at&#92;nleast 3 tries to&#92;nget it working?&quot;,&quot;rawText&quot;:&quot;Is the code doing something complicated? Or did it take you at least 3 tries to get it working?&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;kj9RE4ItW4xMb4ktZpCXF&quot;,&quot;originalText&quot;:&quot;Is the code doing something complicated? Or did it take you at least 3 tries to get it working?&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:139,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aF&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:775,&quot;versionNonce&quot;:52796955,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;HBl42pf69sNSIr7NeLw1s&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-584.9342200400505,&quot;y&quot;:-138.67804780229332,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:139.6171461926557,&quot;height&quot;:129.0124155422711,&quot;seed&quot;:2001597377,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;1jxstZrC&quot;}],&quot;updated&quot;:1745772063888,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;kj9RE4ItW4xMb4ktZpCXF&quot;,&quot;focus&quot;:0.7488225198929629,&quot;gap&quot;:14.72072200536428},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;bYdhDmk0HKvg3vNrEQBow&quot;,&quot;focus&quot;:-0.5625355097287595,&quot;gap&quot;:15.714285714285808},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[-139.6171461926557,129.0124155422711]],&quot;index&quot;:&quot;aG&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:639252955,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;1jxstZrC&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-657.5332439937216,&quot;y&quot;:-83.61945126899667,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:35.15625,&quot;height&quot;:24,&quot;seed&quot;:215779151,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;yes&quot;,&quot;rawText&quot;:&quot;yes&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;HBl42pf69sNSIr7NeLw1s&quot;,&quot;originalText&quot;:&quot;yes&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aH&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:791,&quot;versionNonce&quot;:782312123,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;EVW-2FrbhUke86xP9IgFr&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-202.87328817434013,&quot;y&quot;:-111.57102429492159,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:87.70476904162913,&quot;height&quot;:117.36837724175318,&quot;seed&quot;:692823599,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;PHw1x0IR&quot;}],&quot;updated&quot;:1745772063890,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;kj9RE4ItW4xMb4ktZpCXF&quot;,&quot;focus&quot;:-0.5329278485736761,&quot;gap&quot;:15.416322677209905},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;X2Py8I-2abr82I7cCgfv9&quot;,&quot;focus&quot;:0.22885269490409033,&quot;gap&quot;:15.714285714285765},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[87.70476904162913,117.36837724175318]],&quot;index&quot;:&quot;aI&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:10,&quot;versionNonce&quot;:135022203,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;PHw1x0IR&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-171.90557641125088,&quot;y&quot;:-66.44709817241048,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:23.4375,&quot;height&quot;:24,&quot;seed&quot;:1841608705,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;no&quot;,&quot;rawText&quot;:&quot;no&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;EVW-2FrbhUke86xP9IgFr&quot;,&quot;originalText&quot;:&quot;no&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aJ&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:184,&quot;versionNonce&quot;:43889333,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;bYdhDmk0HKvg3vNrEQBow&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-848.9067460317467,&quot;y&quot;:-3.0565476190477057,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:368.5714285714287,&quot;height&quot;:154,&quot;seed&quot;:1048904513,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;id&quot;:&quot;HBl42pf69sNSIr7NeLw1s&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;2pCv94gX&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aK&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:412,&quot;versionNonce&quot;:1163116315,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;2pCv94gX&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-840.4022817460324,&quot;y&quot;:1.9434523809522943,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:351.5625,&quot;height&quot;:144,&quot;seed&quot;:690023297,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;You are probably a senior and&#92;nknow what you are doing. Carry&#92;non. Maybe think about leaving&#92;na comment for the confused&#92;nintern who has to fix a bug in&#92;n6 months.&quot;,&quot;rawText&quot;:&quot;You are probably a senior and know what you are doing. Carry on. Maybe think about leaving a comment for the confused intern who has to fix a bug in 6 months.&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;bYdhDmk0HKvg3vNrEQBow&quot;,&quot;originalText&quot;:&quot;You are probably a senior and know what you are doing. Carry on. Maybe think about leaving a comment for the confused intern who has to fix a bug in 6 months.&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:139,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aL&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:168,&quot;versionNonce&quot;:975148053,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;X2Py8I-2abr82I7cCgfv9&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-211.95869408369458,&quot;y&quot;:14.086309523809632,&quot;strokeColor&quot;:&quot;#e03131&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:228.57142857142867,&quot;height&quot;:130,&quot;seed&quot;:1994240929,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;JyCss5N9&quot;},{&quot;id&quot;:&quot;EVW-2FrbhUke86xP9IgFr&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aM&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:233,&quot;versionNonce&quot;:677585851,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;JyCss5N9&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-197.28235479798025,&quot;y&quot;:19.086309523809632,&quot;strokeColor&quot;:&quot;#e03131&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:199.21875,&quot;height&quot;:120,&quot;seed&quot;:819309825,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;You should&#92;nprobably stop and&#92;nrewrite your code&#92;n(or have a senior&#92;nlook at it)&quot;,&quot;rawText&quot;:&quot;You should probably stop and rewrite your code (or have a senior look at it)&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;X2Py8I-2abr82I7cCgfv9&quot;,&quot;originalText&quot;:&quot;You should probably stop and rewrite your code (or have a senior look at it)&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:115,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aN&quot;},{&quot;type&quot;:&quot;diamond&quot;,&quot;version&quot;:331,&quot;versionNonce&quot;:1570654581,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;E4egjr6rkvuDdDN6tCEq0&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-906.5548201798204,&quot;y&quot;:-1194.1298076923078,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:430.00000000000034,&quot;height&quot;:170,&quot;seed&quot;:509016847,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;id&quot;:&quot;hOtTbsLuhuA9F6ujbMhTc&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;iKDKpFyo&quot;},{&quot;id&quot;:&quot;ad8m8N6otkqIco3A2SS4s&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;EUDrSO6P5myvZ79jXOeDs&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aO&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:234,&quot;versionNonce&quot;:157086811,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;iKDKpFyo&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-785.3048201798202,&quot;y&quot;:-1145.1298076923078,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:187.5,&quot;height&quot;:72,&quot;seed&quot;:323027727,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Are you&#92;ndocumenting what&#92;nthe code does?&quot;,&quot;rawText&quot;:&quot;Are you documenting what the code does?&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;E4egjr6rkvuDdDN6tCEq0&quot;,&quot;originalText&quot;:&quot;Are you documenting what the code does?&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:67,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aP&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:765,&quot;versionNonce&quot;:339242299,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;ad8m8N6otkqIco3A2SS4s&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-799.0808892545534,&quot;y&quot;:-1165.9550715210155,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:80.5962400782006,&quot;height&quot;:138.61802780191624,&quot;seed&quot;:62952449,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;X08953Gk&quot;}],&quot;updated&quot;:1745772063893,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;E4egjr6rkvuDdDN6tCEq0&quot;,&quot;focus&quot;:-0.3464480754881543,&quot;gap&quot;:20.345917751538096},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;WDKIy4_OaSn4ID3fBt9li&quot;,&quot;focus&quot;:-0.2951067495203762,&quot;gap&quot;:11.619656839216105},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[-80.5962400782006,-138.61802780191624]],&quot;index&quot;:&quot;aQ&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:403943675,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;X08953Gk&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-857.99383150188,&quot;y&quot;:-1249.047108082741,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:35.15625,&quot;height&quot;:24,&quot;seed&quot;:1904309071,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;yes&quot;,&quot;rawText&quot;:&quot;yes&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;ad8m8N6otkqIco3A2SS4s&quot;,&quot;originalText&quot;:&quot;yes&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aR&quot;},{&quot;type&quot;:&quot;diamond&quot;,&quot;version&quot;:259,&quot;versionNonce&quot;:1761095733,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;WDKIy4_OaSn4ID3fBt9li&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1134.3993922743923,&quot;y&quot;:-1472.7872890997892,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:337.5,&quot;height&quot;:212,&quot;seed&quot;:284299823,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;id&quot;:&quot;ad8m8N6otkqIco3A2SS4s&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;CktcIYNv&quot;},{&quot;id&quot;:&quot;_EbRjtFcvyWacG32dlehT&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;vGvtYy-VbndBr6RVnx8RO&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aS&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:250,&quot;versionNonce&quot;:1711921563,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;CktcIYNv&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1041.6962672743923,&quot;y&quot;:-1414.7872890997892,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:152.34375,&quot;height&quot;:96,&quot;seed&quot;:321026369,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Is it a&#92;nstable,&#92;npublic facing&#92;nAPI?&quot;,&quot;rawText&quot;:&quot;Is it a stable, public facing API?&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;WDKIy4_OaSn4ID3fBt9li&quot;,&quot;originalText&quot;:&quot;Is it a stable, public facing API?&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:91,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aT&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:757,&quot;versionNonce&quot;:1986106139,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;_EbRjtFcvyWacG32dlehT&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1040.877658047264,&quot;y&quot;:-1443.7826154182032,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:76.66894811787142,&quot;height&quot;:149.1231546685217,&quot;seed&quot;:159610593,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;N2rT39wb&quot;}],&quot;updated&quot;:1745772063896,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;WDKIy4_OaSn4ID3fBt9li&quot;,&quot;focus&quot;:-0.2112149576028748,&quot;gap&quot;:21.30185442608311},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;G3JlxS4W9SlifBvxoq3g6&quot;,&quot;focus&quot;:0.13452332385492413,&quot;gap&quot;:16.666666666666288},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[-76.66894811787142,-149.1231546685217]],&quot;index&quot;:&quot;aU&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:812772923,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;N2rT39wb&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1095.9263886473605,&quot;y&quot;:-1528.663945495091,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:35.15625,&quot;height&quot;:24,&quot;seed&quot;:2028948769,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;yes&quot;,&quot;rawText&quot;:&quot;yes&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;_EbRjtFcvyWacG32dlehT&quot;,&quot;originalText&quot;:&quot;yes&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aV&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:241,&quot;versionNonce&quot;:983000821,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;G3JlxS4W9SlifBvxoq3g6&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1243.5433316683316,&quot;y&quot;:-1710.9918345543347,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:225.00000000000006,&quot;height&quot;:110.00000000000001,&quot;seed&quot;:106264143,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;svnVXCNB&quot;},{&quot;id&quot;:&quot;_EbRjtFcvyWacG32dlehT&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aW&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:306,&quot;versionNonce&quot;:1781427931,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;svnVXCNB&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-1230.6527066683316,&quot;y&quot;:-1703.9918345543347,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:199.21875,&quot;height&quot;:96,&quot;seed&quot;:2066747023,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Alright, this is&#92;nprobably fine.&#92;nJust don&#39;t overdo&#92;nit. &quot;,&quot;rawText&quot;:&quot;Alright, this is probably fine. Just don&#39;t overdo it. &quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;G3JlxS4W9SlifBvxoq3g6&quot;,&quot;originalText&quot;:&quot;Alright, this is probably fine. Just don&#39;t overdo it. &quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:91,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aX&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:763,&quot;versionNonce&quot;:546731963,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;vGvtYy-VbndBr6RVnx8RO&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-913.6860882647969,&quot;y&quot;:-1456.0702242275513,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:60.989743400770635,&quot;height&quot;:140.70883055725244,&quot;seed&quot;:536846639,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;mpCSij4v&quot;}],&quot;updated&quot;:1745772063897,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;WDKIy4_OaSn4ID3fBt9li&quot;,&quot;focus&quot;:0.07860108168809486,&quot;gap&quot;:16.612030350554505},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;4BgMR-JW8jquLasKskum6&quot;,&quot;focus&quot;:-0.10884440105885718,&quot;gap&quot;:12.499999999999773},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[60.989743400770635,-140.70883055725244]],&quot;index&quot;:&quot;aY&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:97639291,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;mpCSij4v&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-895.7155648059417,&quot;y&quot;:-1536.5660518134923,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:23.4375,&quot;height&quot;:24,&quot;seed&quot;:1279486497,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;no&quot;,&quot;rawText&quot;:&quot;no&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;vGvtYy-VbndBr6RVnx8RO&quot;,&quot;originalText&quot;:&quot;no&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aZ&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:253,&quot;versionNonce&quot;:1567092149,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;4BgMR-JW8jquLasKskum6&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-952.2933316683318,&quot;y&quot;:-1708.9085012210012,&quot;strokeColor&quot;:&quot;#e03131&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:221.2500000000001,&quot;height&quot;:106.25,&quot;seed&quot;:1474775361,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;jsop4sS1&quot;},{&quot;id&quot;:&quot;vGvtYy-VbndBr6RVnx8RO&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;aa&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:264,&quot;versionNonce&quot;:2141107227,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;jsop4sS1&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-947.1370816683318,&quot;y&quot;:-1691.7835012210012,&quot;strokeColor&quot;:&quot;#e03131&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:210.9375,&quot;height&quot;:72,&quot;seed&quot;:1406209921,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Stop and write&#92;n(better) code or a&#92;ntest instead!&quot;,&quot;rawText&quot;:&quot;Stop and write (better) code or a test instead!&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;4BgMR-JW8jquLasKskum6&quot;,&quot;originalText&quot;:&quot;Stop and write (better) code or a test instead!&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:67,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;ab&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:800,&quot;versionNonce&quot;:1208338523,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;EUDrSO6P5myvZ79jXOeDs&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-607.0567500903293,&quot;y&quot;:-1171.341856824156,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:93.19190744303887,&quot;height&quot;:98.67137011424688,&quot;seed&quot;:1247863041,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;NNkmfY0Y&quot;}],&quot;updated&quot;:1745772063897,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;E4egjr6rkvuDdDN6tCEq0&quot;,&quot;focus&quot;:0.11972468978599413,&quot;gap&quot;:12.489549732142095},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;dvM1YkYPsUKICFxEOGIYh&quot;,&quot;focus&quot;:0.4250395894408385,&quot;gap&quot;:13.26153098019104},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[93.19190744303887,-98.67137011424688]],&quot;index&quot;:&quot;ac&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:25,&quot;versionNonce&quot;:663189691,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;NNkmfY0Y&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-625.7142112666393,&quot;y&quot;:-1231.8301968394828,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:128.90625,&quot;height&quot;:24,&quot;seed&quot;:1876468463,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;no, the why&quot;,&quot;rawText&quot;:&quot;no, the why&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;EUDrSO6P5myvZ79jXOeDs&quot;,&quot;originalText&quot;:&quot;no, the why&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;ad&quot;},{&quot;type&quot;:&quot;diamond&quot;,&quot;version&quot;:453,&quot;versionNonce&quot;:290833525,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;dvM1YkYPsUKICFxEOGIYh&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-617.0433316683318,&quot;y&quot;:-1458.075167887668,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:549.6590909090912,&quot;height&quot;:260,&quot;seed&quot;:1507763631,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;0OYQEKHa&quot;},{&quot;id&quot;:&quot;EUDrSO6P5myvZ79jXOeDs&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;CvHp73zp5f2PX6rZaLODs&quot;,&quot;type&quot;:&quot;arrow&quot;},{&quot;id&quot;:&quot;15347cTLb3D3zficDyFsc&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;ae&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:527,&quot;versionNonce&quot;:724478299,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;0OYQEKHa&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-471.034808941059,&quot;y&quot;:-1388.075167887668,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:257.8125,&quot;height&quot;:120,&quot;seed&quot;:258550191,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Good! But can the code&#92;nbe changed in a way to&#92;nnot require comments?&#92;n(i.e. be self-&#92;nexplanatory)&quot;,&quot;rawText&quot;:&quot;Good! But can the code be changed in a way to not require comments? (i.e. be self-explanatory)&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;dvM1YkYPsUKICFxEOGIYh&quot;,&quot;originalText&quot;:&quot;Good! But can the code be changed in a way to not require comments? (i.e. be self-explanatory)&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:115,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;af&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:913,&quot;versionNonce&quot;:1515930171,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;CvHp73zp5f2PX6rZaLODs&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-448.166266542179,&quot;y&quot;:-1422.076445930685,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:76.42949630525237,&quot;height&quot;:171.4264896752211,&quot;seed&quot;:323494703,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;d1TdAjKq&quot;}],&quot;updated&quot;:1745772063899,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;dvM1YkYPsUKICFxEOGIYh&quot;,&quot;gap&quot;:16.697082406392937,&quot;focus&quot;:-0.23430046735756072},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;t1EWA-yJ78t1xz5gJLEDQ&quot;,&quot;gap&quot;:12.925824175824118,&quot;focus&quot;:0.1328921442636625},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[-76.42949630525237,-171.4264896752211]],&quot;index&quot;:&quot;ag&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:11,&quot;versionNonce&quot;:1608959483,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;d1TdAjKq&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-502.51456164913475,&quot;y&quot;:-1520.231992527736,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:35.15625,&quot;height&quot;:24,&quot;seed&quot;:348656513,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;yes&quot;,&quot;rawText&quot;:&quot;yes&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;CvHp73zp5f2PX6rZaLODs&quot;,&quot;originalText&quot;:&quot;yes&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;ah&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:233,&quot;versionNonce&quot;:189590325,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;t1EWA-yJ78t1xz5gJLEDQ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-641.3766650016651,&quot;y&quot;:-1712.4918345543347,&quot;strokeColor&quot;:&quot;#e03131&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:212.50000000000023,&quot;height&quot;:112.5,&quot;seed&quot;:1768570529,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;dl6Pnyys&quot;},{&quot;id&quot;:&quot;CvHp73zp5f2PX6rZaLODs&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;ai&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:247,&quot;versionNonce&quot;:1286753947,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;dl6Pnyys&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-623.017290001665,&quot;y&quot;:-1680.2418345543347,&quot;strokeColor&quot;:&quot;#e03131&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:175.78125,&quot;height&quot;:48,&quot;seed&quot;:1828018177,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Well... then do&#92;nthat instead.&quot;,&quot;rawText&quot;:&quot;Well... then do that instead.&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;t1EWA-yJ78t1xz5gJLEDQ&quot;,&quot;originalText&quot;:&quot;Well... then do that instead.&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:43,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;aj&quot;},{&quot;type&quot;:&quot;arrow&quot;,&quot;version&quot;:1009,&quot;versionNonce&quot;:869090011,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;15347cTLb3D3zficDyFsc&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-203.12118968697067,&quot;y&quot;:-1404.1944102231719,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:116.0725040927356,&quot;height&quot;:151.08200189586546,&quot;seed&quot;:666665647,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:2},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;B9ZuKvHP&quot;}],&quot;updated&quot;:1745772063900,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;startBinding&quot;:{&quot;elementId&quot;:&quot;dvM1YkYPsUKICFxEOGIYh&quot;,&quot;gap&quot;:16.293433776118675,&quot;focus&quot;:0.295831873190218},&quot;endBinding&quot;:{&quot;elementId&quot;:&quot;YYobtGzF2n-ANcJ7kRnaZ&quot;,&quot;gap&quot;:13.03571428571422,&quot;focus&quot;:-0.3936417898210161},&quot;lastCommittedPoint&quot;:null,&quot;startArrowhead&quot;:null,&quot;endArrowhead&quot;:&quot;arrow&quot;,&quot;points&quot;:[[0,0],[116.0725040927356,-151.08200189586546]],&quot;index&quot;:&quot;ak&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:10,&quot;versionNonce&quot;:1950597947,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;B9ZuKvHP&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-158.95533868535037,&quot;y&quot;:-1492.8601444437677,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:23.4375,&quot;height&quot;:24,&quot;seed&quot;:785250639,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;no&quot;,&quot;rawText&quot;:&quot;no&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;15347cTLb3D3zficDyFsc&quot;,&quot;originalText&quot;:&quot;no&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:19,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;al&quot;},{&quot;type&quot;:&quot;rectangle&quot;,&quot;version&quot;:284,&quot;versionNonce&quot;:892953077,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;YYobtGzF2n-ANcJ7kRnaZ&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-312.55090742590755,&quot;y&quot;:-1751.2418345543347,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:393.7500000000001,&quot;height&quot;:190,&quot;seed&quot;:1271689743,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:{&quot;type&quot;:3},&quot;boundElements&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;id&quot;:&quot;18ks67SF&quot;},{&quot;id&quot;:&quot;15347cTLb3D3zficDyFsc&quot;,&quot;type&quot;:&quot;arrow&quot;}],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;index&quot;:&quot;am&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:541,&quot;versionNonce&quot;:1593680859,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;18ks67SF&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-303.1759074259075,&quot;y&quot;:-1740.2418345543347,&quot;strokeColor&quot;:&quot;#2f9e44&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:375,&quot;height&quot;:168,&quot;seed&quot;:1100184431,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:20,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;Alright. Sometimes things just&#92;nsuck. Be sure to include the&#92;ndate, your name and links to&#92;nexternal resources (if&#92;napplicable). Make sure to reduce&#92;nthe surprises for developers&#92;nfollowing in your footsteps.&quot;,&quot;rawText&quot;:&quot;Alright. Sometimes things just suck. Be sure to include the date, your name and links to external resources (if applicable). Make sure to reduce the surprises for developers following in your footsteps.&quot;,&quot;textAlign&quot;:&quot;center&quot;,&quot;verticalAlign&quot;:&quot;middle&quot;,&quot;containerId&quot;:&quot;YYobtGzF2n-ANcJ7kRnaZ&quot;,&quot;originalText&quot;:&quot;Alright. Sometimes things just suck. Be sure to include the date, your name and links to external resources (if applicable). Make sure to reduce the surprises for developers following in your footsteps.&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:163,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;an&quot;},{&quot;id&quot;:&quot;0K6U8GOd&quot;,&quot;type&quot;:&quot;text&quot;,&quot;x&quot;:-1154.493797868798,&quot;y&quot;:-793.5696456321458,&quot;width&quot;:253.125,&quot;height&quot;:43.199999999999996,&quot;angle&quot;:0,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;seed&quot;:221421372,&quot;version&quot;:65,&quot;versionNonce&quot;:1409506133,&quot;isDeleted&quot;:false,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;text&quot;:&quot;START HERE &gt;&quot;,&quot;rawText&quot;:&quot;START HERE &gt;&quot;,&quot;fontSize&quot;:36,&quot;fontFamily&quot;:3,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;baseline&quot;:35,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;START HERE &gt;&quot;,&quot;lineHeight&quot;:1.2,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;ao&quot;},{&quot;type&quot;:&quot;text&quot;,&quot;version&quot;:106,&quot;versionNonce&quot;:1693610107,&quot;isDeleted&quot;:false,&quot;id&quot;:&quot;LToGvfgF&quot;,&quot;fillStyle&quot;:&quot;solid&quot;,&quot;strokeWidth&quot;:2,&quot;strokeStyle&quot;:&quot;solid&quot;,&quot;roughness&quot;:0,&quot;opacity&quot;:100,&quot;angle&quot;:0,&quot;x&quot;:-456.2650185761911,&quot;y&quot;:-796.1395757020758,&quot;strokeColor&quot;:&quot;#1e1e1e&quot;,&quot;backgroundColor&quot;:&quot;transparent&quot;,&quot;width&quot;:253.125,&quot;height&quot;:43.199999999999996,&quot;seed&quot;:702280636,&quot;groupIds&quot;:[],&quot;frameId&quot;:null,&quot;roundness&quot;:null,&quot;boundElements&quot;:[],&quot;updated&quot;:1745772063714,&quot;link&quot;:null,&quot;locked&quot;:false,&quot;fontSize&quot;:36,&quot;fontFamily&quot;:3,&quot;text&quot;:&quot;&lt; START HERE&quot;,&quot;rawText&quot;:&quot;&lt; START HERE&quot;,&quot;textAlign&quot;:&quot;left&quot;,&quot;verticalAlign&quot;:&quot;top&quot;,&quot;containerId&quot;:null,&quot;originalText&quot;:&quot;&lt; START HERE&quot;,&quot;lineHeight&quot;:1.2,&quot;baseline&quot;:35,&quot;autoResize&quot;:true,&quot;index&quot;:&quot;ap&quot;}],&quot;appState&quot;:{&quot;theme&quot;:&quot;dark&quot;,&quot;viewBackgroundColor&quot;:&quot;#ffffff&quot;,&quot;currentItemStrokeColor&quot;:&quot;#1971c2&quot;,&quot;currentItemBackgroundColor&quot;:&quot;transparent&quot;,&quot;currentItemFillStyle&quot;:&quot;solid&quot;,&quot;currentItemStrokeWidth&quot;:2,&quot;currentItemStrokeStyle&quot;:&quot;solid&quot;,&quot;currentItemRoughness&quot;:0,&quot;currentItemOpacity&quot;:100,&quot;currentItemFontFamily&quot;:3,&quot;currentItemFontSize&quot;:20,&quot;currentItemTextAlign&quot;:&quot;left&quot;,&quot;currentItemStartArrowhead&quot;:null,&quot;currentItemEndArrowhead&quot;:&quot;arrow&quot;,&quot;currentItemArrowType&quot;:&quot;round&quot;,&quot;scrollX&quot;:2048.816780715676,&quot;scrollY&quot;:2099.771973296992,&quot;zoom&quot;:{&quot;value&quot;:0.536063},&quot;currentItemRoundness&quot;:&quot;round&quot;,&quot;gridSize&quot;:20,&quot;gridStep&quot;:5,&quot;gridModeEnabled&quot;:false,&quot;gridColor&quot;:{&quot;Bold&quot;:&quot;rgba(217, 217, 217, 0.5)&quot;,&quot;Regular&quot;:&quot;rgba(230, 230, 230, 0.5)&quot;},&quot;currentStrokeOptions&quot;:null,&quot;frameRendering&quot;:{&quot;enabled&quot;:true,&quot;clip&quot;:true,&quot;name&quot;:true,&quot;outline&quot;:true},&quot;objectsSnapModeEnabled&quot;:false,&quot;activeTool&quot;:{&quot;type&quot;:&quot;selection&quot;,&quot;customType&quot;:null,&quot;locked&quot;:false,&quot;fromSelection&quot;:false,&quot;lastActiveTool&quot;:null}},&quot;files&quot;:{}};InitialData.scrollToContent=true;App=()=&gt;{const e=React.useRef(null),t=React.useRef(null),[n,i]=React.useState({width:void 0,height:void 0});return React.useEffect(()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height});const e=()=&gt;{i({width:t.current.getBoundingClientRect().width,height:t.current.getBoundingClientRect().height})};return window.addEventListener(&quot;resize&quot;,e),()=&gt;window.removeEventListener(&quot;resize&quot;,e)},[t]),React.createElement(React.Fragment,null,React.createElement(&quot;div&quot;,{className:&quot;excalidraw-wrapper&quot;,ref:t},React.createElement(ExcalidrawLib.Excalidraw,{ref:e,width:n.width,height:n.height,initialData:InitialData,viewModeEnabled:!0,zenModeEnabled:!0,gridModeEnabled:!1})))},excalidrawWrapper=document.getElementById(&quot;Rules_for_Code_Comments_2024-03-21_0941.05.excalidraw.md1&quot;);ReactDOM.render(React.createElement(App),excalidrawWrapper);})();&lt;/script&gt;
&lt;ul&gt;
&lt;li&gt;only document the &amp;quot;why&amp;quot; (the intent and motivation). The code should be documentation of the &amp;quot;what&amp;quot; in most cases&lt;/li&gt;
&lt;li&gt;if you had to rewrite a piece of code 3 times before it worked, write about what made it so difficult&lt;/li&gt;
&lt;li&gt;if you had to google or read documentations for a day before a piece of code worked, write about what made it so difficult and link the documentation/stack overflow result&lt;/li&gt;
&lt;li&gt;if a piece of code is much more complex than expected (&lt;a class=&quot;internal-link is-unresolved&quot; href=&quot;https://janek.ing/404&quot; target=&quot;&quot;&gt;Bullshit detector&lt;/a&gt;) write about the reason (or better: rewrite it)&lt;/li&gt;
&lt;li&gt;if you had a profound insight or learning while writing some code, leave a comment about it&lt;/li&gt;
&lt;li&gt;write about edge cases, that are easily missed&lt;/li&gt;
&lt;li&gt;include links to external resources&lt;/li&gt;
&lt;li&gt;comments are often read by people who have no idea about the context (this even might just be you in a few years), so make sure to provide context (links, your name, date)&lt;/li&gt;
&lt;li&gt;if you are having trouble reading your own code, document it (or better: rewrite it)&lt;/li&gt;
&lt;li&gt;only comment as little as possible, as much as necessary&lt;/li&gt;
&lt;li&gt;comments become stale and old -&amp;gt; do not document rapidly changing pieces, only code that has settled
&lt;ul&gt;
&lt;li&gt;docstring (&lt;code&gt;/* @param ... */&lt;/code&gt;) for stable APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tests can be documentation: a working example of how to use the API&lt;/li&gt;
&lt;li&gt;Leave a (3-5 line) summary of what a module does at the top of it. This is much better in most cases than line-by-line or function-by-function comments&lt;/li&gt;
&lt;li&gt;From comments on video &lt;a href=&quot;https://www.youtube.com/watch?v=uHh26-cHU-k&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;DON&#39;T Comment Your Code (youtube.com)&lt;/a&gt;: comments should
&lt;ul&gt;
&lt;li&gt;identify dependencies that are not apparent&lt;/li&gt;
&lt;li&gt;describe reasoning for architectural choices&lt;/li&gt;
&lt;li&gt;significantly reduce surprise&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The comments inserted by AI tools are usually not useful, since they just explain what the code is doing - which is mostly trivially obvious when you read it. You should not copy this style:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// List of options to populate the dropdown
const optionsList = [&#39;Option 1&#39;, &#39;Option 2&#39;, &#39;Option 3&#39;, &#39;Option 4&#39;];

// Function to populate the dropdown
function populateDropdown(options) {
    const dropdown = document.getElementById(&#39;dynamicDropdown&#39;);

    // Clear any existing options
    dropdown.innerHTML = &#39;&#39;;

    // Create and append options
    options.forEach(optionText =&amp;gt; {
        const option = document.createElement(&#39;option&#39;);
        option.value = optionText.toLowerCase().replace(&#39; &#39;, &#39;_&#39;); // Example of setting value
        option.textContent = optionText;
        dropdown.appendChild(option);
    });
}

// Call the function to populate the dropdown with the list
populateDropdown(optionsList);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Always motivate, always say why&lt;/strong&gt;. Never forget to say why. Because if you explain the rationale for a decision, it not only increases the hearer&#39;s understanding, and makes them more likely to adhere or comply, but it also shares criteria with them with which to evaluate the decision and its importance.&lt;br /&gt;
-- &lt;a href=&quot;https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;tigerbeetle/docs/TIGER_STYLE.md at main · tigerbeetle/tigerbeetle · GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

            </content>
            <link href="https://janek.ing/code/rules-for-code-comments/" >
        </entry>
        <entry>
            <title>
                REST vs. Websockets
                
            </title>
            <updated>2025-05-23T13:08:20.317Z</updated>
            <id>https://janek.ing/code/rest-vs-websockets/</id>
            <content type="html">
                &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=6QnTNKOJk5A&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Don&#39;t Use Websockets (Until You Try This…) (youtube.com)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=fG4dkrlaZAA&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;REST API (HTTP) vs Websockets - Concept Overview With Example (youtube.com)&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=6RvlKYgRFYQ&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Webhooks vs Websockets vs HTTP Streaming - Which Event-Driven API to use? (youtube.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;rest&quot; tabindex=&quot;-1&quot;&gt;REST&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;stateless&lt;/li&gt;
&lt;li&gt;Client Request -&amp;gt; Server Response&lt;/li&gt;
&lt;li&gt;CRUD -&amp;gt; HTTP Method
&lt;ul&gt;
&lt;li&gt;Create -&amp;gt; POST&lt;/li&gt;
&lt;li&gt;Read -&amp;gt; GET&lt;/li&gt;
&lt;li&gt;Update -&amp;gt; PUT&lt;/li&gt;
&lt;li&gt;Delete -&amp;gt; DELETE&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Sehr einfach zu implementieren, viel Doku und Beispiele&lt;/li&gt;
&lt;li&gt;Ideal geeignet für CRUD, einzelne (statische) Datenbankabfragen und Live-Updates mit langem Intervall (&amp;gt;1s) bei einem/wenigen Clients&lt;/li&gt;
&lt;li&gt;Weniger geeignet für Live-Apps mit kurzem Intervall (&amp;lt;1s) und vielen Clients - z.B. Chat oder Spiele (zu viel HTTP Overhead und Latency)&lt;/li&gt;
&lt;li&gt;Einfach zu skalieren (horizontal wie vertikal), da stateless&lt;/li&gt;
&lt;li&gt;Short Polling: Client Request -&amp;gt; Direkte Antwort vom Server (klassisches Modell)&lt;/li&gt;
&lt;li&gt;Long Polling: Client Request -&amp;gt; Verzögerte Antwort vom Server nachdem neue Daten eingetroffen sind (Verbindung wird solange aufrecht gehalten, Timeouts beachten!), nicht mehr stateless&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;http-streaming&quot; tabindex=&quot;-1&quot;&gt;HTTP Streaming&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;Server Side Events (SSE) -&amp;gt; Ähnlich Long Polling, aber Request wird nach Push von Daten nicht geschlossen und für weitere Updates genutzt (nur bei Read/GET möglich) nicht mehr stateless
&lt;ul&gt;
&lt;li&gt;Header: Content-Type: text/event-stream, Cache-Control: no-cache&lt;/li&gt;
&lt;li&gt;Body EVENT: id (fortlaufend), event: onProgress (und final dann &amp;quot;done&amp;quot;, um den Stream zu schließen), data&lt;/li&gt;
&lt;li&gt;In Go: Writer.Flush() ohne Writer.Close()&lt;/li&gt;
&lt;li&gt;Frontend: new EventSource, EventSource.addEventListener&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Alternative: Transfer-encoding Header &amp;quot;Chunked&amp;quot; (üblich für Server-Server-Kommunikation)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;websockets&quot; tabindex=&quot;-1&quot;&gt;Websockets&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;Stateful (Informationen zu bestehenden Verbindungen müssen gemanaged werden)&lt;/li&gt;
&lt;li&gt;Client baut dauerhafte Verbindung auf, welche für Full-Duplex Kommunikation genutzt werden kann&lt;/li&gt;
&lt;li&gt;Stand 2024 von allen großen Browsern unterstützt&lt;/li&gt;
&lt;li&gt;Ideal geeignet für Live-Apps mit kurzem Intervall (&amp;lt;1s), geringer Latenz und vielen Clients&lt;/li&gt;
&lt;li&gt;Overkill für statische Apps und langes Update-Intervall&lt;/li&gt;
&lt;li&gt;Komplizierter zu implementieren&lt;/li&gt;
&lt;li&gt;Herausfordernd zu skalieren, da Sessions/Verbindungen über Server-Instanzen synchronisiert werden müssen
&lt;ul&gt;
&lt;li&gt;z.B. mit Redis&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;webhooks&quot; tabindex=&quot;-1&quot;&gt;Webhooks&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;TCP&lt;/li&gt;
&lt;li&gt;Spezielle HTTP Endpoints an einem Server zum Abonieren von Updates&lt;/li&gt;
&lt;li&gt;Client muss ebenfalls öffentlichen HTTP Endpoint für Callbacks bereitstellen&lt;/li&gt;
&lt;li&gt;Client sendet Request zu Webhook API mit der Liste an Events, welcher er abonieren will und einem/mehreren Endpoints, wohin die API Callbacks ausführen soll&lt;/li&gt;
&lt;li&gt;Ideal geeignet für selten auftretende Events, welche asynchron verarbeitet werden können/sollen (REST hätte viel Overhead, Websockets wären overkill)&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/code/rest-vs-websockets/" >
        </entry>
        <entry>
            <title>
                Powershell
                
            </title>
            <updated>2025-05-23T13:04:48.690Z</updated>
            <id>https://janek.ing/code/langauges/powershell/</id>
            <content type="html">
                &lt;h2 id=&quot;allgemeines&quot; tabindex=&quot;-1&quot;&gt;Allgemeines&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Hat keinen Drag-and-Drop Handler (anders als Batch oder exe, wo man Dateien direkt auf die Executable ziehen kann)
&lt;ul&gt;
&lt;li&gt;Workaround: &lt;a href=&quot;https://stackoverflow.com/questions/2819908/drag-and-drop-to-a-powershell-script&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/2819908/drag-and-drop-to-a-powershell-script&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Man kann .NET Funktionen benutzen (sehr mächtig und gute API)&lt;/li&gt;
&lt;li&gt;Ausführung unter Windows 10+11 per default deaktiviert
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_execution_policies?view=powershell-7.5&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;about_Execution_Policies - PowerShell | Microsoft Learn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;In Admin PowerShell: &lt;code&gt;Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy RemoteSigned&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cheatsheet&quot; tabindex=&quot;-1&quot;&gt;Cheatsheet&lt;/h2&gt;
&lt;h3 id=&quot;argument-parsing&quot; tabindex=&quot;-1&quot;&gt;Argument Parsing&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;param (
    [string]$foo, # -foo file.txt
    [string]$bar = &amp;quot;default&amp;quot;,
    [string[]]$array, # -array file.txt, other.foo, bla
    [switch]$flagOn, # -flagOn
    [DateTime]$date, # -date &amp;quot;03.12.2024 13:10:42&amp;quot; -&amp;gt; 12.03.2024 13:10:42
    [int]$num # -num 3.5 -&amp;gt; 4
    [float]$num2 # -num2 -5.42
    # .NET types: System.DayOfWeek, File, custom types, etc.
)
param (
	# Powershell will ask user input if param not defined
	# HelpMessage text is displayed alongside the promt
	[Parameter(Mandatory=$true, HelpMessage=&amp;quot;Value for req&amp;quot;)]
	[string]$req,
	# &amp;quot;fake&amp;quot; mandatory -&amp;gt; throw if empty
    [ValidateNotNullOrEmpty()] # Alternative to default throw
	[string]$req=$(throw &amp;quot;Error parameter req missing&amp;quot;)
	# Eplicitly bind to position, others then must be bound by name
	[Parameter(Position=0)]
	[int]$first
)
# Only bind by name
[CmdletBinding(PositionalBinding=$false)]
param (...)
# Display bound parameters
echo $PSBoundParameters
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Parameter werden nach Name ODER Position geparst. Position 0 ist dabei das erste Argument, welches nicht nach Name zugeordnet werden konnte&lt;/li&gt;
&lt;li&gt;Sobald ein Parameter explizit eine Position zugewiesen bekommt, werden die anderen nicht mehr implizit nach Position gebindet&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;dokumentation-hilfe&quot; tabindex=&quot;-1&quot;&gt;Dokumentation / Hilfe&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;&amp;lt;#
.SYNOPSIS
Build LUA project for the Playdate
.PARAMETER in
Path to your project folder (main folder or Source directory)
.PARAMETER xyz
Another parameter cool
.DESCRIPTION
Longer description of script
.INPUTS
Details about input via pipes
.OUTPUTS
Details about output you can pipe
.EXAMPLE
PS&amp;gt; .&#92;yourscript.ps1 -example call
.LINK
Online help: https://yourwebsite.biz
#&amp;gt;
param (
    [string]$in,
    [int]$xyz
)
&amp;lt;&amp;lt; your script here &amp;gt;&amp;gt;

# Print info about parameters
Get-Help .&#92;script.ps1
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;variablen&quot; tabindex=&quot;-1&quot;&gt;Variablen&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Operators
-eq, -ne, -and, -or, -not
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;datei-oder-ordner&quot; tabindex=&quot;-1&quot;&gt;Datei oder Ordner&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;# Check if file oder folder (error if not exists)
(Get-Item $path) -is [System.IO.DirectoryInfo]
# Check if file exists
[System.IO.File]::Exists($path)
# Test if path is valid and exists
Test-Path $path
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;umbenennen&quot; tabindex=&quot;-1&quot;&gt;Umbenennen&lt;/h3&gt;
&lt;p&gt;Alle Dateien in aktuellem Ordner mit fortlaufender Nummer umbenennen&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;ls | %{Rename-Item $_ -NewName (&amp;quot;Bilder_{0}.jpg&amp;quot; -f $nr++)}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;weird-shit&quot; tabindex=&quot;-1&quot;&gt;Weird shit&lt;/h2&gt;
&lt;h3 id=&quot;input&quot; tabindex=&quot;-1&quot;&gt;$input&lt;/h3&gt;
&lt;p&gt;Niemals &lt;code&gt;$input&lt;/code&gt;als Variablenname oder param nutzen!&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/30546750/function-parameter-always-empty-why&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/30546750/function-parameter-always-empty-why&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;$Input&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Contains an enumerator that enumerates all input that is passed to a function. The &lt;code&gt;$input&lt;/code&gt; variable is available only to functions and script blocks (which are unnamed functions). In the Process block of a function, the &lt;code&gt;$input&lt;/code&gt; variable enumerates the object that is currently in the pipeline. When the Process block completes, there are no objects left in the pipeline, so the &lt;code&gt;$input&lt;/code&gt; variable enumerates an empty collection. If the function does not have a Process block, then in the End block, the &lt;code&gt;$input&lt;/code&gt; variable enumerates the collection of all input to the function.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;help-message&quot; tabindex=&quot;-1&quot;&gt;HelpMessage&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-powershell&quot;&gt;param (
	# HelpMessage is displayed in promt for missing mandatory
	# params, but only if user first inputs !? in promt
	[Parameter(Mandatory=$true, HelpMessage=&amp;quot;Value for req&amp;quot;)]
	[string]$req
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;todo&quot; tabindex=&quot;-1&quot;&gt;TODO&lt;/h2&gt;
&lt;p&gt;for loop over files&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/langauges/powershell/" >
        </entry>
        <entry>
            <title>
                Lua
                
            </title>
            <updated>2025-05-23T13:04:32.951Z</updated>
            <id>https://janek.ing/code/langauges/lua/</id>
            <content type="html">
                &lt;h2 id=&quot;cheatsheet&quot; tabindex=&quot;-1&quot;&gt;Cheatsheet&lt;/h2&gt;
&lt;h3 id=&quot;for&quot; tabindex=&quot;-1&quot;&gt;for&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;for var=start,endVal,step do ... end -- var is local, endVal is inclusive, step is optional (default 1)
for i=1,f(x) do ... end -- f(x) is evaluated only once at start
for i,v in ipairs(array) do ... end -- array for each
for k,v in pairs(table) do ... end -- key value for each
for i=1,10 do -- do not change i during loop!
	if i==5 then break end
	if i==1 then goto continue end
	::continue::
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;table-array&quot; tabindex=&quot;-1&quot;&gt;Table ~ Array&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Lua&quot;&gt;-- Add elements
table.insert(vtable, elem) -- at end
table.insert(vtable, 1, elem) -- at start
-- Remove elements
elem = table.remove(vtable, pos) -- no pos = last element
-- Count entries in array, stops at first nil element
table.getn(vtable)
#vtable -- same as getn
table.setn(vtable, size) -- set size of array
-- iterate over array
for k, v in ipairs(vtable) do sum = sum + v end
-- Count all entries in a table
local count = 0
for _ in pairs(vtable) do count = count + 1 end
-- Copy all table members from src to dst (shallow)
for k, v in pairs(src) do dst[k] = v end
-- Clear table
for k in pairs(vtable) do table[k] = nil end
-- Sort array
table.sort(vtable, orderFunc) -- orderFnc = true if a-&amp;gt;b
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;typeof&quot; tabindex=&quot;-1&quot;&gt;typeof&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;type(var)
&amp;quot;nil&amp;quot;, &amp;quot;boolean&amp;quot;, &amp;quot;number&amp;quot;, &amp;quot;string&amp;quot;, &amp;quot;userdata&amp;quot;, &amp;quot;function&amp;quot;, &amp;quot;thread&amp;quot;, &amp;quot;table&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;ipairs-vs-pairs&quot; tabindex=&quot;-1&quot;&gt;ipairs vs pairs&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;ipairs(table)&lt;/code&gt; iteriert über Elemente eines arrays (also alle table Elemente mit Integer &amp;gt;0 als key), in aufsteigeneder Reihenfolge, hält bei Lücken in den keys an.&lt;br /&gt;
&lt;code&gt;pairs(table)&lt;/code&gt; iteriert über alle Elemente einer Table (Reihenfolge der Elemente ist dabei zufällig!). Elemente entfernen (=nil setzen) ist okay während for .. in loop, Elemente hinzufügen nicht.&lt;/p&gt;
&lt;h3 id=&quot;tenary&quot; tabindex=&quot;-1&quot;&gt;Tenary&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/72021612&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/a/72021612&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Lua&quot;&gt;-- Does not work if trueValue is falsy (false or 0)!
(condition and trueValue or falseValue)
-- Works all the time
(condition and {ifTrue} or {ifFalse})[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;block-comments&quot; tabindex=&quot;-1&quot;&gt;Block Comments&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;--[[
print(10)         -- no action (comment)
--]]

-- Adding single hyphen to start of block comment will enable the block again:
---[[
print(10)         --&amp;gt; 10
--]]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;class-methods&quot; tabindex=&quot;-1&quot;&gt;Class methods&lt;/h3&gt;
&lt;p&gt;TODO&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Lua&quot;&gt;local class = {}
function class.normalFunc() 
	-- &amp;quot;static&amp;quot; function
end
local obj = { someValue = 0 }
class.normalFunc()
function class:classFunc() 
	self.someValue = 1 -- object is passed as &amp;quot;self&amp;quot;
end
class:classFunc()
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;table-to-string&quot; tabindex=&quot;-1&quot;&gt;Table to string&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Lua&quot;&gt;local function dump(o)
    if type(o) == &#39;table&#39; then
	    local s = &#39;{ &#39;
        for k,v in pairs(o) do
            if type(k) ~= &#39;number&#39; then k = &#39;&amp;quot;&#39;..k..&#39;&amp;quot;&#39; end
            s = s .. &#39;[&#39;..k..&#39;] = &#39; .. dump(v) .. &#39;,&#39;
        end
        return s .. &#39;} &#39;
    else
        return tostring(o)
    end
end
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;metamethod-cheatsheet&quot; tabindex=&quot;-1&quot;&gt;Metamethod cheatsheet&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/oatmealine/655c9e64599d0f0dd47687c1186de99f&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://gist.github.com/oatmealine/655c9e64599d0f0dd47687c1186de99f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A metatable can be defined like&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local t = setmetatable({}, {
  __tostring = function() return &#39;custom tostring behavior!&#39; end
})
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the metamethods that you can define, and their behavior&lt;/p&gt;
&lt;h3 id=&quot;operators&quot; tabindex=&quot;-1&quot;&gt;Operators&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;In an argument signature like &lt;code&gt;f(a, b)&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; don&#39;t necessarily have to be instances of your metatable. One of them will always be, but not necessarily the first. Beware!&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;calculation-operators&quot; tabindex=&quot;-1&quot;&gt;Calculation operators&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__add(a, b)&lt;/code&gt;: the addition (+) operation. If any operand for an addition is not a number, Lua will try to call a metamethod. It starts by checking the first operand (even if it is a number); if that operand does not define a metamethod for &lt;code&gt;__add&lt;/code&gt;, then Lua will check the second operand. If Lua can find a metamethod, it calls the metamethod with the two operands as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, if no metamethod is found, Lua raises an error.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__sub(a, b)&lt;/code&gt;: the subtraction (-) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__mul(a, b)&lt;/code&gt;: the multiplication (*) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__div(a, b)&lt;/code&gt;: the division (/) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__unm(a)&lt;/code&gt;: the negation (unary -) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__mod(a, b)&lt;/code&gt; &lt;em&gt;(Lua 5.1)&lt;/em&gt;: the modulo (%) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__pow(a, b)&lt;/code&gt; &lt;em&gt;(Lua 5.1)&lt;/em&gt;: the exponentiation (^) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__idiv(a, b)&lt;/code&gt; &lt;em&gt;(Lua 5.3)&lt;/em&gt;: the floor division (//) operation. Behavior similar to the addition operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;bitwise-operators-em-lua-5-3-em&quot; tabindex=&quot;-1&quot;&gt;Bitwise operators &lt;em&gt;(Lua 5.3)&lt;/em&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__band(a, b)&lt;/code&gt;: the bitwise AND (&amp;amp;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod if any operand is neither an integer nor a float coercible to an integer (see &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#3.4.3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;§3.4.3&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__bor(a, b)&lt;/code&gt;: the bitwise OR (|) operation. Behavior similar to the bitwise AND operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__bxor(a, b)&lt;/code&gt;: the bitwise exclusive OR (binary ~) operation. Behavior similar to the bitwise AND operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__bnot(a)&lt;/code&gt;: the bitwise NOT (unary ~) operation. Behavior similar to the bitwise AND operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__shl(a, b)&lt;/code&gt;: the bitwise left shift (&amp;lt;&amp;lt;) operation. Behavior similar to the bitwise AND operation.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__shr(a)&lt;/code&gt;: the bitwise right shift (&amp;gt;&amp;gt;) operation. Behavior similar to the bitwise AND operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;equation-operators&quot; tabindex=&quot;-1&quot;&gt;Equation operators&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__eq(a, b)&lt;/code&gt;: the equal (=) operation. Behavior similar to the addition operation, except that Lua will try a metamethod only when the values being compared are either both tables or both full userdata and they are not primitively equal. The result of the call is always converted to a boolean.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__lt(a, b)&lt;/code&gt;: the less than (&amp;lt;) operation. Behavior similar to the addition operation, except that Lua will try a metamethod only when the values being compared are neither both numbers nor both strings. Moreover, the result of the call is always converted to a boolean.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__le(a, b)&lt;/code&gt;: the less equal (&amp;lt;=) operation. Behavior similar to the less than operation.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;misc-operators&quot; tabindex=&quot;-1&quot;&gt;Misc operators&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__concat(a, b)&lt;/code&gt;: the concatenation (..) operation. Behavior similar to the addition operation, except that Lua will try a metamethod if any operand is neither a string nor a number (which is always coercible to a string).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__len(a)&lt;/code&gt; &lt;em&gt;(Lua 5.1)&lt;/em&gt;: the length (#) operation. If the object is not a string, Lua will try its metamethod. If there is a metamethod, Lua calls it with the object as argument, and the result of the call (always adjusted to one value) is the result of the operation. If there is no metamethod but the object is a table, then Lua uses the table length operation (see &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#3.4.7&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;§3.4.7&lt;/a&gt;). Otherwise, Lua raises an error.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;behavioral-methods&quot; tabindex=&quot;-1&quot;&gt;Behavioral methods&lt;/h3&gt;
&lt;h4 id=&quot;indexing&quot; tabindex=&quot;-1&quot;&gt;Indexing&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__index&lt;/code&gt;: The indexing access operation &lt;code&gt;table[key]&lt;/code&gt;. This event happens when &lt;code&gt;table&lt;/code&gt; is not a table or when &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;table&lt;/code&gt;. The metavalue is looked up in the metatable of &lt;code&gt;table&lt;/code&gt;.&lt;br /&gt;
The metavalue for this event can be either a function, a table, or any value with an &lt;code&gt;__index&lt;/code&gt; metavalue. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt; and &lt;code&gt;key&lt;/code&gt; as arguments, and the result of the call (adjusted to one value) is the result of the operation. Otherwise, the final result is the result of indexing this metavalue with &lt;code&gt;key&lt;/code&gt;. This indexing is regular, not raw, and therefore can trigger another &lt;code&gt;__index&lt;/code&gt; metavalue.&lt;br /&gt;
&lt;strong&gt;Examples&lt;/strong&gt;:&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local tab1 = {foo = &#39;bar&#39;}
local tab2 = setmetatable({}, {__index = tab1})

print(tab2.foo) --&amp;gt; &#39;bar&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;local tab = setmetatable({count = 0}, {
  __index = function(self, _k)
    self.count = self.count + 1
    return self.count
  end
})

print(tab.index) --&amp;gt; 1
print(tab.indexagain) --&amp;gt; 2
print(tab.asdfasdf) --&amp;gt; 3
print(tab[1234]) --&amp;gt; 4
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__newindex&lt;/code&gt;: The indexing assignment &lt;code&gt;table[key] = value&lt;/code&gt;. Like the index event, this event happens when &lt;code&gt;table&lt;/code&gt; is not a table or when &lt;code&gt;key&lt;/code&gt; is not present in &lt;code&gt;table&lt;/code&gt;. The metavalue is looked up in the metatable of &lt;code&gt;table&lt;/code&gt;.&lt;br /&gt;
Like with indexing, the metavalue for this event can be either a function, a table, or any value with an &lt;code&gt;__newindex&lt;/code&gt; metavalue. If it is a function, it is called with &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;key&lt;/code&gt;, and &lt;code&gt;value&lt;/code&gt; as arguments. Otherwise, Lua repeats the indexing assignment over this metavalue with the same key and value. This assignment is regular, not raw, and therefore can trigger another &lt;code&gt;__newindex metavalue.&lt;/code&gt;&lt;br /&gt;
Whenever a &lt;code&gt;__newindex&lt;/code&gt; metavalue is invoked, Lua does not perform the primitive assignment. If needed, the metamethod itself can call rawset to do the assignment.&lt;br /&gt;
&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code class=&quot;language-lua&quot;&gt;t = setmetatable({}, {
  __newindex = function(t, key, value)
    if type(value) == &#39;number&#39; then
      rawset(t, key, value * value)
    else
      rawset(t, key, value)
    end
  end
})

t.foo = &#39;foo&#39;
t.bar = 4
t.la = 10
print(t.foo) --&amp;gt; &#39;foo&#39;
print(t.bar) --&amp;gt; 16
print(t.la) --&amp;gt; 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;calling&quot; tabindex=&quot;-1&quot;&gt;Calling&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__call(args)&lt;/code&gt;: The call operation &lt;code&gt;func(args)&lt;/code&gt;. This event happens when Lua tries to call a non-function value (that is, &lt;code&gt;func&lt;/code&gt; is not a function). The metamethod is looked up in &lt;code&gt;func&lt;/code&gt;. If present, the metamethod is called with &lt;code&gt;func&lt;/code&gt; as its first argument, followed by the arguments of the original call (&lt;code&gt;args&lt;/code&gt;). All results of the call are the results of the operation. This is the only metamethod that allows multiple results.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;garbage-collection-and-amp-memory-management&quot; tabindex=&quot;-1&quot;&gt;Garbage collection &amp;amp; memory management&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__mode&lt;/code&gt;: Controls how &amp;quot;weak&amp;quot; a table is. If present, must be one of the following strings: &lt;code&gt;&amp;quot;k&amp;quot;&lt;/code&gt;, for a table with weak keys; &lt;code&gt;&amp;quot;v&amp;quot;&lt;/code&gt;, for a table with weak values; or &lt;code&gt;&amp;quot;kv&amp;quot;&lt;/code&gt;, for a table with both weak keys and values.&lt;br /&gt;
A table with weak keys and strong values is also called an ephemeron table. In an ephemeron table, a value is considered reachable only if its key is reachable. In particular, if the only reference to a key comes through its value, the pair is removed. (see &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#2.5.4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;§2.5.4&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__close(value, err?)&lt;/code&gt; &lt;em&gt;(Lua 5.4)&lt;/em&gt;: Called when a variable is closed (see &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#3.3.8&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;§3.3.8&lt;/a&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__gc()&lt;/code&gt;: Called when the the garbage collector detects that the corresponding table or userdata is dead. See &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#2.5.3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;§2.5.3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;misc&quot; tabindex=&quot;-1&quot;&gt;Misc&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__tostring()&lt;/code&gt;: If the metatable of &lt;code&gt;v&lt;/code&gt; has a &lt;code&gt;__tostring&lt;/code&gt; field, then &lt;code&gt;tostring&lt;/code&gt; calls the corresponding value with &lt;code&gt;v&lt;/code&gt; as the argument, and uses the result of the call as its result. Otherwise, if the metatable of &lt;code&gt;v&lt;/code&gt; has a &lt;code&gt;__name&lt;/code&gt; field with a string value, tostring may use that string in its final result.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__metatable&lt;/code&gt;: Changes the behavior of &lt;code&gt;getmetatable&lt;/code&gt;. If object does not have a metatable, returns &lt;code&gt;nil&lt;/code&gt;. Otherwise, if the object&#39;s metatable has a &lt;code&gt;__metatable&lt;/code&gt; field, returns the associated value. Otherwise, returns the metatable of the given object.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__name&lt;/code&gt;: Used very rarely internally (see &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#luaL_newmetatable&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;luaL_newmetatable&lt;/code&gt;&lt;/a&gt;) and by &lt;code&gt;tostring()&lt;/code&gt; if the &lt;code&gt;__tostring&lt;/code&gt; metamethod is missing.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;__pairs()&lt;/code&gt;: Affects iteration when using the &lt;code&gt;pairs()&lt;/code&gt; function, letting you define a custom iterator function (see &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#pdf-pairs&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;pairs()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#pdf-next&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;&lt;code&gt;next()&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;references&quot; tabindex=&quot;-1&quot;&gt;References&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.lua.org/manual/5.4/manual.html#2.4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.lua.org/manual/5.4/manual.html#2.4&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://ebens.me/post/lua-metatables-tutorial/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://ebens.me/post/lua-metatables-tutorial/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.lua.org/versions.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.lua.org/versions.html&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.lua.org/manual/5.4/contents.html#index&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.lua.org/manual/5.4/contents.html#index&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/langauges/lua/" >
        </entry>
        <entry>
            <title>
                JavaScript
                
            </title>
            <updated>2025-05-23T13:03:45.396Z</updated>
            <id>https://janek.ing/code/langauges/java-script/</id>
            <content type="html">
                &lt;h2 id=&quot;achtung&quot; tabindex=&quot;-1&quot;&gt;Achtung&lt;/h2&gt;
&lt;h3 id=&quot;na-n&quot; tabindex=&quot;-1&quot;&gt;NaN&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;NaN === NaN; // false
NaN == NaN; // false
Number.isNaN(NaN) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;var-vs-let-implicit-var&quot; tabindex=&quot;-1&quot;&gt;var vs let, implicit var&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;// var declarations are hoisted to beginning of function
function varTest(bool) {
	if (bool) {
		var test = 4;
	} else {
		var test = 2;
	}
	return test; // 2 or 4
}
// Is the same as
function varTest(bool) {
	var test;
	if (bool) {
		test = 4;
	} else {
		test = 2;
	}
	return test; // 2 or 4
}
// Achtung! Das folgende erzeugt nach dem Aufruf eine variable &amp;quot;test&amp;quot; im globalen Kontext! (implicit var)
function varTest(bool) {
	test = 3;
}

// let declarations are block-level (hoisted, but not initialized in temporal dead-zone)
function letTest(bool) {
	var test = 1;
	if (bool) {
		test = 3; // ReferenceError
		let test = 4;
	} else {
		let test = 2;
	}
	return test; // returns 1
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;const-is-not-const&quot; tabindex=&quot;-1&quot;&gt;const is not const&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;const val = 3;
val = 4; // TypeError
const obj = { &amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot; };
obj.foo = &amp;quot;baz&amp;quot;; // allowed
obj = { &amp;quot;test&amp;quot;: 123 } // TypeError
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;automatic-semicolon-insertion&quot; tabindex=&quot;-1&quot;&gt;Automatic Semicolon Insertion&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;function ReturnsUndefined() {
	return
	{
		&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
	}
}
// returns undefined
// a semicolon is automatically inserted by the parser after &amp;quot;return&amp;quot;, so the object is never passed to it

function ReturnsCorrectly() {
	return {
		&amp;quot;foo&amp;quot;: &amp;quot;bar&amp;quot;
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;array-sort&quot; tabindex=&quot;-1&quot;&gt;Array.sort()&lt;/h3&gt;
&lt;p&gt;Array.sort() sortiert alle Einträge zu String konvertiert! Daher im Folgenden &amp;quot;2&amp;quot; -&amp;gt; &amp;quot;33&amp;quot; -&amp;gt; &amp;quot;8&amp;quot;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const numbers = [33, 2, 8];
numbers.sort();
console.log(numbers[1]); // 33 (numbers is [2,33,8])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Grund dafür ist, dass Arrays Einträge mit unterschiedlichen Typen beinhalten können: &lt;code&gt;[&amp;quot;1&amp;quot;, true, 3, {}]&lt;/code&gt;. Alle Typen können aber in String konvertiert werden.&lt;/p&gt;
&lt;h3 id=&quot;type-bullshit&quot; tabindex=&quot;-1&quot;&gt;Type bullshit&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/denysdovhan/wtfjs?tab=readme-ov-file#-examples&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub - denysdovhan/wtfjs: 🤪 A list of funny and tricky JavaScript examples&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Equality comparisons and sameness - JavaScript | MDN (mozilla.org)&lt;/a&gt;&lt;br /&gt;
&lt;code&gt;==&lt;/code&gt; Abstract Equality konvertiert die meisten Typen zu Number, wenn die Typen nicht gleich sind ([Quelle](&lt;a href=&quot;https://262.ecma-international.org/11.0/#sec-abstract-equality-comparison&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;ECMAScript® 2020 Language Specification (ecma-international.org)&lt;/a&gt;))&lt;br /&gt;
&lt;code&gt;===&lt;/code&gt; Strict Equality macht keine Typen-Konvertierung&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;0 == false // true (false -&amp;gt; 0)
&amp;quot;&amp;quot; == false // true (Number(&amp;quot;&amp;quot;) -&amp;gt; 0, Number(false) -&amp;gt; 0)
&amp;quot;0&amp;quot; == false // true (same as above)
0 == &#39;0&#39; // true (&#39;0&#39; -&amp;gt; 0)

&#39;0&#39; == !{} // true (!{} is false -&amp;gt; both converted to 0)
[] == ![] // true ([] -&amp;gt; 0, ![] -&amp;gt; false -&amp;gt; 0)
!![] // true ([] is truthy, so !![] -&amp;gt; true)
[] == false // true (false -&amp;gt; 0, [] -&amp;gt; 0)
[] == 0 // true ([] -&amp;gt; 0)
[] == &amp;quot;&amp;quot; // true
[] == &#39;0&#39; // false
[0] == &amp;quot;&amp;quot; // false
[0] == &#39;0&#39; // true
[null] == &amp;quot;&amp;quot; // true
[null] == &amp;quot;0&amp;quot; // false
[null] == [] // false

false == &#39;0o0&#39; // true (0o is octal-prefix)
!!&amp;quot;false&amp;quot; == !!&amp;quot;true&amp;quot; // true (non-emoty string is truthy)
&amp;quot;b&amp;quot; + &amp;quot;a&amp;quot; + +&amp;quot;a&amp;quot; + &amp;quot;a&amp;quot; // &#39;baNaNa&#39;

!!null == false // true (null is falsy, so !![] -&amp;gt; false)
null == false // false (false -&amp;gt; 0 != null)
null == undefined // true (explicit rule)

&amp;quot;[object Object]&amp;quot; == {foo:&amp;quot;bar&amp;quot;} // true (object -&amp;gt; &amp;quot;[object Object]&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Truthy:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object (empty or otherwise)&lt;/li&gt;
&lt;li&gt;Array (empty or otherwise)&lt;/li&gt;
&lt;li&gt;Non-empty string&lt;/li&gt;
&lt;li&gt;Numbers != 0&lt;/li&gt;
&lt;li&gt;etc.&lt;br /&gt;
Falsy:&lt;/li&gt;
&lt;li&gt;Empty string (&amp;quot;&amp;quot;)&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;0&lt;/li&gt;
&lt;li&gt;NaN&lt;/li&gt;
&lt;li&gt;false&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://es5.github.io/#x11.9.3&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Annotated ES5&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String comparison can be forced by: &lt;code&gt;&amp;quot;&amp;quot; + a == &amp;quot;&amp;quot; + b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Numeric comparison can be forced by: &lt;code&gt;+a == +b&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Boolean comparison can be forced by: &lt;code&gt;!a == !b&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;array-out-of-bounds&quot; tabindex=&quot;-1&quot;&gt;Array out-of-bounds&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;let array = [1,2,3]
array[5] = 9;
console.log(array); // [1, 2, 3, undefined, undefined, 6]
console.log(array[5]); // undefined
let array2 = new Array(5);
array2[3] = 9;
console.log(array2); // [ 2 empty items, 9, 2 empty items ]
console.log(array2[2]); // undefined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Arrays werden dynamisch vergrößert. Lücken sind immer undefined.&lt;/p&gt;
&lt;h3 id=&quot;strings&quot; tabindex=&quot;-1&quot;&gt;Strings&lt;/h3&gt;
&lt;p&gt;sind als &lt;a href=&quot;https://en.wikipedia.org/wiki/Rope_(data_structure)&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ropes&lt;/a&gt; implementiert (TL;DR: Binärbaum anstatt Array)&lt;/p&gt;
&lt;h3 id=&quot;operator-precedence&quot; tabindex=&quot;-1&quot;&gt;Operator precedence&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;wie bei C/C++&lt;/li&gt;
&lt;li&gt;bitwise Operatoren werden nach fast allen anderen interpretiert (+,&amp;lt;=,%,&amp;lt;&amp;lt;,etc)&lt;/li&gt;
&lt;li&gt;bitwise: AND &amp;amp; -&amp;gt; XOR ^ -&amp;gt; OR |&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;default-values&quot; tabindex=&quot;-1&quot;&gt;Default values&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;function test(param) {
	// filters all falsy values (null, undefined, 0, false, etc.)
	// only works if default value is falsy or valid values are never falsy, otherwise it might overwrite falsy values of param (e.g. 0)
	param = param || 0;
	// filters only undefined specifically (param was not passed)
	if (param === undefined) param = 0;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Speed wise both options seem to be about the same.&lt;/p&gt;
&lt;h2 id=&quot;for-vs-for-each&quot; tabindex=&quot;-1&quot;&gt;for vs forEach&lt;/h2&gt;
&lt;p&gt;Array Alternativen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for (let i = 0; i &amp;lt; array.length; ++i) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (const element of array) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for (const {member1, member2} of array) { ... }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array.forEach((element, index, array) =&amp;gt; {...})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array.reduce((accumulator, element, index, array) =&amp;gt; { ... })&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array.map((element, index, array) =&amp;gt; (...)})&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;array.map(({member1, member2}) =&amp;gt; (...))&lt;/code&gt;&lt;br /&gt;
Die klassische, imperative for-Schleife ist deutlich schneller, als forEach, map.reduce, array.map, etc.&lt;br /&gt;
Bei kleinen Arrays (&amp;lt;1000 Elemente) macht dies in der Praxis keinen großen Unterschied.&lt;br /&gt;
for..of ist ähnlich schnell wie for.&lt;br /&gt;
Mikro-Optimierungen, wie z.B. das Cachen von &amp;quot;array.length&amp;quot; vor dem Loop bringen keine Verbesserung (macht der Compiler vermutlich eh).&lt;br /&gt;
&lt;a href=&quot;https://leanylabs.com/blog/js-forEach-map-reduce-vs-for-for_of/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Performance of JavaScript .forEach, .map and .reduce vs for and for..of (leanylabs.com)&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240301103722.png&quot; alt=&quot;Pasted image 20240301103722.png&quot; /&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240301103739.png&quot; alt=&quot;Pasted image 20240301103739.png&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Eine pre-Allokation eines Ergebnis-Arrays ist deutlich schneller, als Elemente einzeln zu pushen (gilt in jeder Sprache)&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;// bad
for (const elem of source)
	result.push(elem.x + elem.y);
// good
const result = Array.new(source.length);
for (let i=0; i &amp;lt; source.length; ++i)
	result[i] = source[i].x + source[i].y
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;string-template-literals&quot; tabindex=&quot;-1&quot;&gt;String template literals&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;var foo = 3.14;
console.log(`Pi is ${foo}. This inserts a line break:
	half of Pi is ${foo / 2}. This does not line break:&#92;
	both retain the tab character at the start`);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;async-order&quot; tabindex=&quot;-1&quot;&gt;Async Order&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=flzlEmyxMs8&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;3 Questions: You Don&#39;t Know JavaScript | Prime Reacts (youtube.com)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;// resolve is done immediately, then is added to microtask queue
Promise.resolve().then(() =&amp;gt; console.log(1));
// added to microtask queue
queueMicrotask(() =&amp;gt; console.log(2));
// added to Web API, on next tick added to macrotask queue
// macrotask queue is executed when microtask queue is empty (so adding microtasks in a loop can starve marcotask queue)
setTimeout(() =&amp;gt; console.log(3), 0);
// just executed, this tick puts setTimeout onto macrotask queue
console.log(4);
// body of constructor is executed synchronously (only Promise.resolve is async)
new Promise(() =&amp;gt; console.log(5));
// immediately invoked async function - body is run synchronously (only awaited value is async)
(async () =&amp;gt; console.log(6))()

// Logs in order: 4 - 5 - 6 - 1 - 2 - 3
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;classes&quot; tabindex=&quot;-1&quot;&gt;Classes&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;class Person {
	constructor(name, money) {
		this.name = name;
		this.money = money;
	}
	transferFunds(otherPerson, amount) { }
	changeName(newName) { }
}
const andy = new Person(&amp;quot;Andy&amp;quot;, 100);
const paul = new Person(&amp;quot;Paul&amp;quot;, 42);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Funktionen sind nicht in Klasseninstanz gespeichert, sondern im gemeinsamen Prototyp.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;class Person {
	constructor(name, money) {
		this.name = name;
		this.money = money;
		this.transferFunds = function(otherPerson, amount) { }
		this.changeName = function(newName) { }
	}
}
const andy = new Person(&amp;quot;Andy&amp;quot;, 100);
const paul = new Person(&amp;quot;Paul&amp;quot;, 42);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Jede Klasseninstanz besitzt eigene Instanzen der Funktionen -&amp;gt; nehmen mehr Speicher in Anspruch.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;class Dog {
	constructor(name) {
		this.name = name;
		this.wagTail = () =&amp;gt; {
			return &amp;quot;Wagging tail!&amp;quot;
		}
	}

	bark() {
		return &amp;quot;Woof!&amp;quot;;
	}
}
const dog1 = new Dog(&amp;quot;Max&amp;quot;);
const dog2 = new Dog(&amp;quot;Spot&amp;quot;);

// return value is same string constant
dog1.wagTail() === dog2.wagTail() // true
// wagTail is defined in constructor = different for each instance
dog1.wagTail === dog2.wagTail // false
// bark is defined in common prototype
dog1.bark === dog2.bark // true
// Prototype of both is the same
Object.getPrototypeOf(dog1) === Object.getPrototypeOf(dog2) // true
// constructor is defined in common prototype
dog1.constructor === dog2.constructor // true
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;generators&quot; tabindex=&quot;-1&quot;&gt;Generators&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-JS&quot;&gt;function* genFunc() {
	yield 1;
	yield 2;
	yield 3;
	return 4;
};
const iterator = genFunc();
iterator.next(); // {value: 1, done:false}
iterator.next(); // {value: 2, done:false}
iterator.next(); // {value: 3, done:false}
iterator.next(); // {value: 4, done:true}

// Once all values are used up, iterator returns undefined
iterator.next(); // {value: undefined, done: true}
console.log([...iterator]); // []

// Only yielded values are returned here:
console.log([...genFunc()]); // [1, 2, 3]
for (const value of genFunc()) {
	console.log(value);
} // 1 2 3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Stern nach &amp;quot;function&amp;quot; Keyword erzeugt einen &amp;quot;Generator&amp;quot;.&lt;br /&gt;
Gute Anwendung: Filesystem walkers&lt;br /&gt;
Achtung: In for..of Loops und spread operators wird der Wert nach dem &amp;quot;return&amp;quot; nicht ausgegeben! -&amp;gt; idealerweise am Ende &amp;quot;return null&amp;quot; machen (oder kein return = implicit &amp;quot;return undefined&amp;quot;), um zu signalisieren, dass man fertig ist.&lt;/p&gt;
&lt;h2 id=&quot;bitshift&quot; tabindex=&quot;-1&quot;&gt;Bitshift&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning]&lt;br /&gt;
Shift Operatoren konvertieren den Input in 32-bit signed int.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&amp;lt; &amp;gt;&amp;gt; Signed shift (converts all numbers to 32bit signed int)
&amp;gt;&amp;gt;&amp;gt; Unsigned right shift
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://stackoverflow.com/a/6798829&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/a/6798829&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/langauges/java-script/" >
        </entry>
        <entry>
            <title>
                Go
                
            </title>
            <updated>2025-07-09T09:22:07.305Z</updated>
            <id>https://janek.ing/code/langauges/go/</id>
            <content type="html">
                &lt;h2 id=&quot;cheatsheet&quot; tabindex=&quot;-1&quot;&gt;Cheatsheet&lt;/h2&gt;
&lt;h3 id=&quot;types-and-zero-values&quot; tabindex=&quot;-1&quot;&gt;Types and Zero-Values&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;bool - false
string - &amp;quot;&amp;quot;
int (int8..int64), uint (uint8..uint64) - 0
float32, float64 - 0
complex64, complex128 - 0
uintptr, byte (uint8), rune (int32) - 0
interface{} (any) - nil
[slice, map, pointer] - nil
[struct] - all members = their zero-value
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;var-const&quot; tabindex=&quot;-1&quot;&gt;var, const&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;var name string = &amp;quot;val&amp;quot; // = val optional
name := &amp;quot;val&amp;quot; // implicit typing (name is string)
intVal := int(true) // type conversion
const Pi = 3.14 // no :=
X, Y := 1, 2 // X=1, Y=2
ptr := &amp;amp;name // type is *string
var any interface{}
any = Pi
any = &amp;quot;hello&amp;quot;
name,ok := any.(string) // type assertion
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;struct&quot; tabindex=&quot;-1&quot;&gt;struct&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type Vertex struct {
	X, y float64 // X is public, y is private
}
p := Vertex{1, 3}
p == Vertex{1, 3} // true (only shallow check!)
var p2 = Vertex{X:3.14} // Y:0 is implicit
pp := &amp;amp;Vertex{} // type *Vertex, X,Y=0
val := pp.X // access via dot (unlike C)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;array-slice&quot; tabindex=&quot;-1&quot;&gt;Array, slice&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;var array [10]float32 // initialized, size is fixed
array2 := [4]int{1,2,3,4}
var slice []int = array2[0:2] // [start,end) -&amp;gt; 1,2
len, cap := len(slice), cap(slice) // 2, 4
newSlice := make([]float32, 2, 3) // dynamic, len=2, cap=3 
newSlice = append(newSlice, Pi, 42.13) // always re-assign!
newSlice = append([]float32{1.0}, newSlice...) // prepend
copy(destSlice, sourceSlice)
var nilSlice []int = nil
nilSlice = append(nilSlice, 10) // works
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;map-operations&quot; tabindex=&quot;-1&quot;&gt;Map operations&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;var m map[string]float32 // not initialized!
m = make(map[string]float32)
m2 := map[string]Vertex {
	&amp;quot;foo&amp;quot;: {1,2},
}
delete(m2, &amp;quot;foo&amp;quot;)
v, ok := m2[&amp;quot;foo&amp;quot;] // v={0,0} (zero value), ok=false
clear(m2) // Go 1.21, also works on slices
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;loops-switch&quot; tabindex=&quot;-1&quot;&gt;Loops, switch&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;for i := 0; i &amp;lt; len(str); i++ // all optional, for -&amp;gt; while
for i, value := range array // _,value or just i pssible
for i := range 10 // 0..9
switch os := runtime.GOOS; os { // condition optional
	case &amp;quot;linux&amp;quot;:
		fallthrough // implicit break, explicit fallthrough
	case getWorstOs(): // not just static values
	default:
	case val == test(): // alt. if no condition
}
switch v := i.(type) { // type switch
	case int: // v will int value
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;return-values-error-handling&quot; tabindex=&quot;-1&quot;&gt;Return values, error handling&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;// ignore return values, if with statement, error handling
if _, err := funcWithErr(); err != nil {
	println(err) // print to stderr
} else {
	// do else, err still valid here
}
// err no longer valid here
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;functions&quot; tabindex=&quot;-1&quot;&gt;Functions&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;func add(x, y int) (int, error) { } // return val
func sub(x, y int) (result int) { } // naked return
func compute(worker func(int, int) int) int { }
fn := func(x int) bool { }
func varArgs(vals ...int) // for i,v := range vals
type act func(index int) (res int)
go anyFunction(1,2,&amp;quot;foo&amp;quot;) // leightweight thread
// same address space, needs synchronization
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;methods&quot; tabindex=&quot;-1&quot;&gt;Methods&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;func (v Vertex) DotProduct(other Vertex) int {
	return v.X * other.X + v.Y * other.Y
}
func (v *Vertex) Scale(f int) { 
	v.X *= f
	v.Y *= f
} // = func Scale(v *Vertex,f int), Scale(&amp;amp;p,4)
angle := p.DotProduct(Vertex{3,4})
p.Scale(4) // same operator for pointer and value
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;interfaces&quot; tabindex=&quot;-1&quot;&gt;Interfaces&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type Abser interface { // define
	Abs() float64
}
func (v *Vertex) Abs() float64 { // implement implicitly
	if (v == nil) { return 0 } // need only for pointers
	return math.Sqrt(v.X*v.X + v.Y*v.Y)
}
var a Abser
val := a.Abs() // panic, since a does not hold a value
v := Vertex{3,4}
a = &amp;amp;v // Vertex* implements Abser, so we can assign
fmt.Printf(&amp;quot;%v %v %T&#92;n&amp;quot;,a.Abs(),a,a) //5 &amp;amp;{3 4} *main.Vertex
var v2 *Vertex
a = v2 // v2 is nil, can still call methods of it:
fmt.Printf(&amp;quot;%v %v %T&#92;n&amp;quot;,a.Abs(),a,a) //0 &amp;lt;nil&amp;gt; *main.Vertex
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;channels&quot; tabindex=&quot;-1&quot;&gt;Channels&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;c := make(chan int)
c &amp;lt;- 42 // send value to channel c (blocking)
x := &amp;lt;-c // receive value from channel c (blocking)
fmt.Printf(&amp;quot;%v %v&#92;n&amp;quot;, &amp;lt;-c, &amp;lt;-c)
// buffered channel (blocks: send on full, receive on empty)
cb := make(chan int, 100) // capacity of 100 values
close(c) // close channel (only sender!, optional)
v, ok := &amp;lt;-c // ok is false if channel is empty and closed
for i := range c // loop until channel is empty and closed
select { // blocks until one case can be run (random if 2+)
	case c &amp;lt;- x: // same syntax as switch, no break needed
	case &amp;lt;-quit:
	default: // run if nothing is ready
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;public-private-exported-names&quot; tabindex=&quot;-1&quot;&gt;Public / Private (exported names)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;[!important] Capitalization is access/scope management&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type Example struct {
    PublicField  string
    privateField int // unexported field
}
func Add(val int) int { ... } // exported
func subt(val int) int { ... } // not exported
&lt;/code&gt;&lt;/pre&gt;
&lt;/blockquote&gt;
&lt;p&gt;struct members and functions starting with a Capital letter are public/exported, those with lowercase letters are private/unexported (i.e. can only be accessed from the same module and will not be used in marshalling)&lt;/p&gt;
&lt;h2 id=&quot;organizing-modules&quot; tabindex=&quot;-1&quot;&gt;Organizing Modules&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://go.dev/doc/modules/layout&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Organizing a Go module - The Go Programming Language&lt;/a&gt;&lt;br /&gt;
Unofficial (for big projects): &lt;a href=&quot;https://github.com/golang-standards/project-layout&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;GitHub - golang-standards/project-layout: Standard Go Project Layout&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;go mod init &amp;lt;modulename&amp;gt;
go get &amp;lt;modulename&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;program-with-main&quot; tabindex=&quot;-1&quot;&gt;Program with main&lt;/h3&gt;
&lt;p&gt;-&amp;gt; standalone, will usually not be imported into other projects&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;//// go.mod file
// module name needs to be unique in workspace
// name can be anything, but url is preferred if public repo,
// because this enables installation by:
// go install github.com/someuser/modname@latest
module github.com/someuser/modname

go 1.22.1

require (
	// external packages (get added by go get)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;//// main.go file
// filename can be anything
// package should be main
package main

func main() {
	// ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;packages-libraries&quot; tabindex=&quot;-1&quot;&gt;Packages / Libraries&lt;/h3&gt;
&lt;p&gt;-&amp;gt; might be imported into other projects&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;//// go.mod file
// path to code repository, so it can be easily imported by
// import &amp;quot;github.com/someuser/modname&amp;quot;
module github.com/someuser/modname

go 1.22.1

require (
	// external packages (get added by go get)
)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!INFO] Exported Symbols&lt;br /&gt;
Symbols (e.g. types and functions) of a module that you want to export, need a name starting with an uppercase letter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;//// modname.go file
// package name = folder name of project (last component of module name)
package modname

func main() { // not exported
	// ...
}

func Exported() {
    // ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;multiple-files-folders&quot; tabindex=&quot;-1&quot;&gt;Multiple files / folders&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Main program or library code should be in root directory (next to go.mod)&lt;/li&gt;
&lt;li&gt;All go files in the same directory declare the same package name&lt;/li&gt;
&lt;li&gt;Sub-packages should reside in their own directories. Their package name again should be the name of the directory (e.g. &lt;code&gt;hash/hash.go&lt;/code&gt; -&amp;gt; &lt;code&gt;package hash&lt;/code&gt;)
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import &amp;quot;github.com/someuser/modname/hash&amp;quot;&lt;/code&gt; (assuming module name from example above)&lt;/li&gt;
&lt;li&gt;No separate go.mod file required&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go will not import packages placed in an &lt;code&gt;internal&lt;/code&gt;folder from outside of the project (e.g. &lt;code&gt;internal/trace/trace.go&lt;/code&gt; will only be available to its module)&lt;/li&gt;
&lt;li&gt;Mixing of program and libraries in same module/folder is possible&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;project-root-directory/
  go.mod
  modname.go          -&amp;gt; main module
  modname_test.go     -&amp;gt; test code
  auth/
    auth.go           -&amp;gt; public package auth
    auth_test.go
    token/
      token.go        -&amp;gt; public package auth/token
      token_test.go
  hash/
    hash.go           -&amp;gt; public package hash
  internal/
    trace/
      trace.go        -&amp;gt; private package trace
  cmd/
    prog1/
      main.go         -&amp;gt; test or helper program
    prog2/
      main.go         -&amp;gt; another bundled command
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;local-overrides&quot; tabindex=&quot;-1&quot;&gt;Local overrides&lt;/h3&gt;
&lt;p&gt;In &lt;code&gt;go.mod&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;replace domain.ext/path/lib =&amp;gt; ../local/path
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Will load library from local files, instead of external repo/cache. Good for testing changes in library modules.&lt;/p&gt;
&lt;h3 id=&quot;update-modules&quot; tabindex=&quot;-1&quot;&gt;Update modules&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;go get -u
go mod tidy
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;testing&quot; tabindex=&quot;-1&quot;&gt;Testing&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.dev/doc/tutorial/add-a-test&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Add a test - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Package: &lt;code&gt;auth.go&lt;/code&gt; -&amp;gt; Test Code: &lt;code&gt;auth_test.go&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;same package name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;import &amp;quot;testing&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;func TestSomething(t *testing.T) { }&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t.Fatalf(&amp;quot;Some error occurred!&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;go test -v&lt;/code&gt; to execute tests&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;package greetings

import (
    &amp;quot;testing&amp;quot;
    &amp;quot;regexp&amp;quot;
)

// Hello() is external function under test
func TestHelloName(t *testing.T) {
    name := &amp;quot;Gladys&amp;quot;
    want := regexp.MustCompile(`&#92;b`+name+`&#92;b`)
    msg, err := Hello(&amp;quot;Gladys&amp;quot;)
    if !want.MatchString(msg) || err != nil {
        t.Fatalf(`Hello(&amp;quot;Gladys&amp;quot;) = %q, %v, want match for %#q, nil`, msg, err, want)
    }
}

func TestHelloEmpty(t *testing.T) {
    msg, err := Hello(&amp;quot;&amp;quot;)
    if msg != &amp;quot;&amp;quot; || err == nil {
        t.Fatalf(`Hello(&amp;quot;&amp;quot;) = %q, %v, want &amp;quot;&amp;quot;, error`, msg, err)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;useful-modules&quot; tabindex=&quot;-1&quot;&gt;useful modules&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;fmt
strings
strconv
ioutil
os
flag
json
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;enum-iota&quot; tabindex=&quot;-1&quot;&gt;enum / iota&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;const (
	c0 = iota  // c0 == 0
	c1 = iota  // c1 == 1
	c2 = iota  // c2 == 2
)

const (
	a = 1 &amp;lt;&amp;lt; iota  // a == 1 (iota has been reset)
	b = 1 &amp;lt;&amp;lt; iota  // b == 2
	c = 1 &amp;lt;&amp;lt; iota  // c == 4
)

const (
	u         = iota * 42  // u == 0     (untyped integer constant)
	v float64 = iota * 42  // v == 42.0  (float64 constant)
	w         = iota * 42  // w == 84    (untyped integer constant)
)

const x = iota  // x == 0 (iota has been reset)
const y = iota  // y == 0 (iota has been reset)

const (
	bit0, mask0 = iota, 1&amp;lt;&amp;lt;iota - 1  // bit0 == 0, mask0 == 0
	bit1, mask1                      // bit1 == 1, mask1 == 1
	_, _                             // skips iota == 2
	bit3, mask3                      // bit3 == 3, mask3 == 7
)

const (
	c0 = -1
	c1         // c1 == -1
	c2 = iota  // c2 == 2
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;json&quot; tabindex=&quot;-1&quot;&gt;JSON&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;`json:&amp;quot;...&amp;quot;`&lt;/code&gt;  strings to add compile time encoding information. First argument is the exported name of the member. &lt;code&gt;omitempty&lt;/code&gt; can be used to remove null values from the export.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!IMPORTANT]&lt;br /&gt;
You need to rename fields, if you want to have lowercase starting letters for fields, since only &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#public-private-exported-names&quot;&gt;exported fields&lt;/a&gt; are included in the marshalling process and exported fields need to start with a capital letter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!WARNING] nil slices ≠ empty slices in JSON&lt;br /&gt;
Nil slices (unitialized slices) are exported as &amp;quot;null&amp;quot;, while empty slices (len=0, cap=0) are exported as empty array []. Other than that they behave mostly the same in Go. See &lt;a href=&quot;https://stackoverflow.com/questions/44305170/nil-slices-vs-non-nil-slices-vs-empty-slices-in-go-language&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;null - nil slices vs non-nil slices vs empty slices in Go language - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type Payload struct {
	Array []int `json:&amp;quot;arr&amp;quot;`
	Array2 []int `json:&amp;quot;other&amp;quot;`
	Array3 []int `json:&amp;quot;three,omitempty`
	foo int // not exported, not considered in json marshal/unmarshal
}
var s1 []int         // nil slice
s2 := []int{}        // non-nil, empty slice
s3 := make([]int, 0) // internally same as s2
pl := Payload{s1,s2,s3}
bytes, err := json.Marshal(pl) 
// result: {&amp;quot;arr&amp;quot;:null,&amp;quot;other&amp;quot;:[]}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;marshal-unmarshal&quot; tabindex=&quot;-1&quot;&gt;Marshal/Unmarshal&lt;/h3&gt;
&lt;p&gt;Marshal = Encoding (&lt;code&gt;json.Marshal(var)&lt;/code&gt; gibt json string als &lt;code&gt;[]byte&lt;/code&gt; zurück)&lt;br /&gt;
Unmarshal = Decoding (&lt;code&gt;json.Unmarshal(byteArray, outVar)&lt;/code&gt; dekodiert das json byte array in outVar)&lt;/p&gt;
&lt;h2 id=&quot;embedded-struct&quot; tabindex=&quot;-1&quot;&gt;Embedded struct&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type Point struct {
	X, Y float64
}
type Rect struct {
	Point
	W, H float64
}
// on init, have to go through embedded type explicitly
r := Rect{Point: Point{0,2}, W:0, H:4}
// on access we can use the sub-member names directly
r.X = 1
r.W = 3
fmt.Println(r) // {{1 2} 3 4}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;closures&quot; tabindex=&quot;-1&quot;&gt;Closures&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;func adder() func(int) int {
	sum := 0
	// return func has access to sum, which is bound to return func
	return func(x int) int {
		sum += x
		return sum
	}
}

func main() {
	// each adder has own context and sum value
	pos, neg := adder(), adder()
	for i := 1; i &amp;lt; 4; i++ {
		fmt.Println(
			pos(i),
			neg(-2*i),
		)
	}
}
// 1 -2
// 3 -6
// 6 -12
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;defer&quot; tabindex=&quot;-1&quot;&gt;Defer&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;package main
import &amp;quot;fmt&amp;quot;
func main() {
	fmt.Print(&amp;quot;say: &amp;quot;)
	defer func() {
		fmt.Println(&amp;quot;!&amp;quot;)
	}()
	defer fmt.Print(&amp;quot; world&amp;quot;)
	fmt.Print(&amp;quot;hello&amp;quot;)
}
// say: hello world!
// defers are executed in LIFO order
// defers with anonymous functions can access surrounding variables
// useful for closing files, channels, etc.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;mutex&quot; tabindex=&quot;-1&quot;&gt;Mutex&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;import &amp;quot;sync&amp;quot;
var mu sync.Mutex
mu.Lock()
mu.Unlock()
defer mu.Unlock() // useful to make sure mutex is unlocked
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;nil-interfaces-expanded&quot; tabindex=&quot;-1&quot;&gt;Nil Interfaces (expanded)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;type I interface {
	M()
}
type T struct {
	S string
}
func (t *T) M() {
	if t == nil {
		fmt.Println(&amp;quot;&amp;lt;nil&amp;gt;&amp;quot;)
		return
	}
	fmt.Println(t.S)
}
func main() {
	var i I
	var t *T // t is nil
	i = t // i is nil
	// calling interface methods of nil values is possible
	i.M() // prints &amp;lt;nil&amp;gt;
	
	var i2 I // nil interface holds no value or type
	i2.M() // runtime exception (panic) - Go does not know which method to call
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;channels-expanded&quot; tabindex=&quot;-1&quot;&gt;Channels (expanded)&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://dave.cheney.net/2014/03/19/channel-axioms&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Channel Axioms | Dave Cheney&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;nil channels (default value) = BAD
&lt;ul&gt;
&lt;li&gt;send + receive on nil channels block forever&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Caution with closed channels
&lt;ul&gt;
&lt;li&gt;send on a closed channel panics&lt;/li&gt;
&lt;li&gt;receive on a closed channel (with empty buffer) immediately returns with the zero value&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;common-interfaces&quot; tabindex=&quot;-1&quot;&gt;Common interfaces&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;// Stringer (e.g. for fmt.Println())
import &amp;quot;fmt&amp;quot;
type Person struct {
	Name string
	Age  int
}
func (p Person) String() string {
	return fmt.Sprintf(&amp;quot;%v (%v years)&amp;quot;, p.Name, p.Age)
}
// Error (e.g. for returning error from func)
type MyError struct {
	When time.Time
	What string
}
func (e *MyError) Error() string {
	return fmt.Sprintf(&amp;quot;at %v, %s&amp;quot;,
		e.When, e.What)
}
// Reader (implemented by files, network, compressors, etc.)
import &amp;quot;io&amp;quot;
// interface: func (T) Read(b []byte) (n int, err error)
r := strings.NewReader(&amp;quot;Hello, Reader!&amp;quot;)
b := make([]byte, 8)
for {
	n, err := r.Read(b)
	fmt.Printf(&amp;quot;n = %v err = %v b = %v&#92;n&amp;quot;, n, err, b)
	fmt.Printf(&amp;quot;b[:n] = %q&#92;n&amp;quot;, b[:n])
	if err == io.EOF {
		break
	}
}
// n = 8 err = &amp;lt;nil&amp;gt; b = [72 101 108 108 111 44 32 82]
// b[:n] = &amp;quot;Hello, R&amp;quot;
// n = 6 err = &amp;lt;nil&amp;gt; b = [101 97 100 101 114 33 32 82]
// b[:n] = &amp;quot;eader!&amp;quot;
// n = 0 err = EOF b = [101 97 100 101 114 33 32 82]
// b[:n] = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;generics&quot; tabindex=&quot;-1&quot;&gt;Generics&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;// Index returns the index of x in s, or -1 if not found.
// comparable is a special builtin interface for Generics
func Index[T comparable](s []T, x T) int {
	for i, v := range s {
		// v and x are type T, which has the comparable
		// constraint, so we can use == here.
		if v == x {
			return i
		}
	}
	return -1
}
// Defining your own Generics interface
type Number interface {
	int | int32 | int64 | float32 | float64
}
func sum[T Number](nums []T) T {
	var result T
	for i := range nums {
		result += numbers[i]
	}
	return result
}
// List represents a singly-linked list that holds values of any type.
type List[T any] struct {
	next *List[T]
	val T
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;break-labels&quot; tabindex=&quot;-1&quot;&gt;Break Labels&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;    done := time.After(1 * time.Millisecond)
    numbers := make(chan int)
outer:
    for {
        select {
        case &amp;lt;-done:
            break outer
        case num := &amp;lt;-numbers:
            fmt.Println(num)
        }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;format-time-string&quot; tabindex=&quot;-1&quot;&gt;Format time string&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;fmt.Println(time.Now().Format(&amp;quot;20060102150405&amp;quot;))

const (
    stdLongMonth      = &amp;quot;January&amp;quot;
    stdMonth          = &amp;quot;Jan&amp;quot;
    stdNumMonth       = &amp;quot;1&amp;quot;
    stdZeroMonth      = &amp;quot;01&amp;quot;
    stdLongWeekDay    = &amp;quot;Monday&amp;quot;
    stdWeekDay        = &amp;quot;Mon&amp;quot;
    stdDay            = &amp;quot;2&amp;quot;
    stdUnderDay       = &amp;quot;_2&amp;quot;
    stdZeroDay        = &amp;quot;02&amp;quot;
    stdHour           = &amp;quot;15&amp;quot;
    stdHour12         = &amp;quot;3&amp;quot;
    stdZeroHour12     = &amp;quot;03&amp;quot;
    stdMinute         = &amp;quot;4&amp;quot;
    stdZeroMinute     = &amp;quot;04&amp;quot;
    stdSecond         = &amp;quot;5&amp;quot;
    stdZeroSecond     = &amp;quot;05&amp;quot;
    stdLongYear       = &amp;quot;2006&amp;quot;
    stdYear           = &amp;quot;06&amp;quot;
    stdPM             = &amp;quot;PM&amp;quot;
    stdpm             = &amp;quot;pm&amp;quot;
    stdTZ             = &amp;quot;MST&amp;quot;
    stdISO8601TZ      = &amp;quot;Z0700&amp;quot;  // prints Z for UTC
    stdISO8601ColonTZ = &amp;quot;Z07:00&amp;quot; // prints Z for UTC
    stdNumTZ          = &amp;quot;-0700&amp;quot;  // always numeric
    stdNumShortTZ     = &amp;quot;-07&amp;quot;    // always numeric
    stdNumColonTZ     = &amp;quot;-07:00&amp;quot; // always numeric
    stdFracSecond0    = &amp;quot;.0&amp;quot;, &amp;quot;.00&amp;quot; // trailing zeros included
    stdFracSecond9    = &amp;quot;.9&amp;quot;, &amp;quot;.99&amp;quot; // trailing zeros omitted
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;reading-a-file&quot; tabindex=&quot;-1&quot;&gt;Reading a file&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;// full file into memory
wholeFile, err := ioutil.ReadFile(&amp;quot;file.txt&amp;quot;)

// line-by-line
file, err := os.Open(&amp;quot;file.txt&amp;quot;)
if err != nil { log.Fatal(err) }
defer file.Close()
scanner := bufio.NewScanner(file)
for scanner.Scan() {
	fmt.Println(scanner.Text())
}
if err := scanner.Err(); err != nil { log.Fatal(err) }
// by words
scanner := bufio.NewScanner(file)
scanner.Split(bufio.ScanWords)
for Scanner.Scan() {
	fmt.Println(scanner.Text())
}

// in chunks
file, err := os.Open(&amp;quot;file.txt&amp;quot;)
if err != nil { log.Fatal(err) }
defer file.Close()
const chunkSize = 256
buffer := make([]byte, chunkSize)
for {
	n, err := file.Read(buffer)
	if err != nil &amp;amp;&amp;amp; err != io.EOF { log.Fatal(err) }
	if err == io.EOF { break }
	fmt.Println(string(buffer[:n]))
	// print the data like in a hex editor
	fmt.Printf(&amp;quot;%s&amp;quot;, hex.Dump(buffer))
}
file.Seek(0,0) // return to beginning
file.Seek(6,0) // to byte 6 in file
file.Seek(6,1) // to byte 6 from location (=12)
offset, err := file.Seek(6,2) // to offset=length-6

// File stats
fileinfo, err := file.Stat()
type FileInfo interface {
	Name() string       // base name of the file
	Size() int64        // length in bytes for regular files; system-dependent for others
	Mode() FileMode     // file mode bits
	ModTime() time.Time // modification time
	IsDir() bool        // abbreviation for Mode().IsDir()
	Sys() any           // underlying data source (can return nil)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;command-line-arguments&quot; tabindex=&quot;-1&quot;&gt;Command Line Arguments&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-go&quot;&gt;import (&amp;quot;flag&amp;quot;)

// Return values are pointers (never nil!)
brokerAddr := flag.String(&amp;quot;broker&amp;quot;, &amp;quot;ssl://broker.hivemq.com:8883&amp;quot;, &amp;quot;Broker address including connection type and port&amp;quot;)
username := flag.String(&amp;quot;user&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;Username for the MQTT connection (optional)&amp;quot;)
intervalMs := flag.Int(&amp;quot;interval&amp;quot;, 1000, &amp;quot;Send interval per instance in ms&amp;quot;)
// Use existing variables
var decryptFlag bool
flag.BoolVar(&amp;amp;decryptFlag, &amp;quot;d&amp;quot;, false, &amp;quot;decrypt the input&amp;quot;) // shorthand
flag.BoolVar(&amp;amp;decryptFlag, &amp;quot;decrypt&amp;quot;, false, &amp;quot;decrypt the input&amp;quot;)

flag.Usage = func() {
	w := flag.CommandLine.Output()

	fmt.Fprintf(w, &amp;quot;Usage of %s:&#92;n&amp;quot;, os.Args[0])
	fmt.Fprintln(w)
	const usageStr = `Spawns a set number of clients, 
which send messages with random values to a MQTT broker.`
	fmt.Fprintln(w, usageStr)
	fmt.Fprintln(w)

	// Prints all flags and description text (last argument + default value)
	flag.PrintDefaults()
}

// fills up the variables with data from args
// variables will get their default values (second to last argument) when ommitted
flag.Parse()

// After parsing, any unparsed flags/positional arguments can be handled
cnt := flag.NArg()
arg := flag.Arg(i)
for i,v := range flag.Args() {}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Usage&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-flag, -flag=x, --flag, --flag=x&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-flag x, --flag x&lt;/code&gt; (non-boolean flags only)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Positional arguments are not handled as expected! Flag stops parsing on the first positional argument / unhandled flag, so named flags have to come first (while order usually does not matter).&lt;br /&gt;
Workaround: &lt;a href=&quot;https://stackoverflow.com/a/74146375&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/a/74146375&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Shorthand: &lt;a href=&quot;https://www.antoniojgutierrez.com/posts/2021-05-14-short-and-long-options-in-go-flags-pkg/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Short and Long Options with Go flag standard package (antoniojgutierrez.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;printing-errors&quot; tabindex=&quot;-1&quot;&gt;Printing Errors&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-Go&quot;&gt;log.Fatalf(&amp;quot;ERROR: %q&#92;n&amp;quot;, err)
// Prints: 2024/10/31 15:08:52 ERROR: &amp;quot;error message&amp;quot;
fmt.Printf(&amp;quot;ERROR: %q&#92;n&amp;quot;, err)
os.Exit(1)
// Prints: ERROR: &amp;quot;error message&amp;quot;
panic(err)
// Prints: panic: error message&#92;n&#92;n&amp;lt;stacktrace&amp;gt;
// exit code 2
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://janek.ing/code/langauges/go/" >
        </entry>
        <entry>
            <title>
                CSS
                
            </title>
            <updated>2025-05-23T12:53:37.739Z</updated>
            <id>https://janek.ing/code/langauges/css/</id>
            <content type="html">
                &lt;h2 id=&quot;selectors&quot; tabindex=&quot;-1&quot;&gt;Selectors&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;/*** Element types ***/
a
img
body
/*** Attributes ***/
a[title] /* a element with title attribute */
h1[class~=&amp;quot;logo&amp;quot;] /* h1 element whose class contains logo */
/*** Classes ***/
.myClass
li.myClass /* only applies to li elements */
.myClass.other /* only when both myClass and other present */
/*** IDs ***/
#test /* all elements with ID test */
[id=test] /* same thing */
/*** universal ***/
* /* all elements */
*.warning /* all elements with class warning */
/*** Pseudo-classes ***/
:hover /* mouse over */
:active /* user actives, i.e. clicks button/link */
:focus /* inout element with focus (e.g. active text-box) */
:focus-within /* element or descendants have focus */
:visited /* link/a element that has been visited */
:target /* element with id matching fragment of URL (i.e. http://www.example.com/index.html#section2 -&amp;gt; id=&amp;quot;section2&amp;quot;) */
:first-child, :last-child
:disabled, :read-only, :invalid, :checked
/* there are many more */
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;combinators&quot; tabindex=&quot;-1&quot;&gt;Combinators&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-CSS&quot;&gt;li li /* li elements with ancestor li - i.e. 2nd+ nested li */
.center img /* img with any ancestor with class center */
.content &amp;gt; div.nice /* div with class nice and direct parent with class content */
img + p /* element p directly following img and same parent */
img ~ p /* any element p following an img with the same parent */
span, div /* apply same style to both span and div */
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;class-nesting-example&quot; tabindex=&quot;-1&quot;&gt;Class nesting example&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/k6wxec39/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;JSFiddle - Code Playground&lt;/a&gt;&lt;br /&gt;
&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020240311124103.png&quot; alt=&quot;Pasted image 20240311124103.png&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;em-rem&quot; tabindex=&quot;-1&quot;&gt;em, rem&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;em&lt;/code&gt; is factor of font pixel-size in parent container&lt;br /&gt;
&lt;code&gt;rem&lt;/code&gt; works the same, but always references the root element &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;. Default &lt;code&gt;font-size&lt;/code&gt; is 16px.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;html&amp;gt;
	This text is 16px big
	&amp;lt;div style=&amp;quot;font-size:10px&amp;quot;&amp;gt;
		This text is 10px big
		&amp;lt;div style=&amp;quot;font-size:2em&amp;quot;&amp;gt;
			This text is 20px big (2 * 10px)
			&amp;lt;div style=&amp;quot;font-size:1.5em&amp;quot;&amp;gt;
				This text is 30px big (1,5 * 2 * 10px)
			&amp;lt;/div&amp;gt;
			&amp;lt;div style=&amp;quot;font-size:1.5rem&amp;quot;&amp;gt;
				This text is 24px big (1,5 * 16px)
			&amp;lt;/div&amp;gt;
		&amp;lt;/div&amp;gt;
	&amp;lt;/div&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://jsfiddle.net/d5rbwqza/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://jsfiddle.net/d5rbwqza/&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/langauges/css/" >
        </entry>
        <entry>
            <title>
                C
                
            </title>
            <updated>2025-05-28T12:02:35.399Z</updated>
            <id>https://janek.ing/code/langauges/c/</id>
            <content type="html">
                &lt;h2 id=&quot;strncpy-strncat&quot; tabindex=&quot;-1&quot;&gt;strncpy, strncat&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;char * strncpy ( char * destination, const char * source, size_t num );

char * strncat ( char * destination, const char * source, size_t num );
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning] warning&lt;br /&gt;
destination ist nicht null-terminiert, wenn &lt;code&gt;strlen(source) &amp;gt;= num&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Besser ist Folgendes:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Ineffizient wenn src deutlich kürzer, weil Rest von dest mit 0 gefüllt wird
char dest[64] = &amp;quot;&amp;quot;;
strncpy(dest, src, sizeof(dest) - 1);
dest[sizeof(dest)-1] = 0
// Besser (-1 als Platz fur &#92;0)
dest[0] = 0;
strncat(dest, src, sizeof(dest) - 1);
// Anhängen an Vorhandenes
strncat(dest, src, sizeof(dest) - strlen(dest) - 1);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;strncpy füllt Buffer komplett mit 0 auf, wenn &lt;code&gt;strlen(source) &amp;lt; num&lt;/code&gt;, daher bei strings mit deutlich unterschiedlicher Länger als Alternative strncat oder memmove in Betracht ziehen!&lt;/p&gt;
&lt;h2 id=&quot;operator-precedence&quot; tabindex=&quot;-1&quot;&gt;Operator Precedence&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/c/language/operator_precedence&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://en.cppreference.com/w/c/language/operator_precedence&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning] warning&lt;br /&gt;
&lt;code&gt;a &amp;amp; b == c&lt;/code&gt; wird als &lt;code&gt;a &amp;amp; (b == c)&lt;/code&gt; evaluiert (gleiches gilt für die anderen bitwise Operatoren &lt;code&gt;^ |&lt;/code&gt; und Vergleiche &lt;code&gt;&amp;lt; &amp;gt; &amp;lt;= &amp;gt;=&lt;/code&gt;).&lt;br /&gt;
Evaluations Reihenfolge: (quasi alle Operatoren) -&amp;gt; &amp;amp; AND -&amp;gt; ^ XOR -&amp;gt; | OR -&amp;gt; Logical -&amp;gt; ternary -&amp;gt; assignment -&amp;gt; comma operator&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning]&lt;br /&gt;
&lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; und &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; werden nach &lt;code&gt;+-*/&lt;/code&gt; evaluiert, aber vor den meisten anderen Operatoren&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;dynamischer-array-ohne-templates&quot; tabindex=&quot;-1&quot;&gt;Dynamischer Array ohne Templates&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tree-sitter/tree-sitter/blob/master/lib/src/array.h&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://github.com/tree-sitter/tree-sitter/blob/master/lib/src/array.h&lt;/a&gt;&lt;br /&gt;
Nutzt macro zur Definition eines eigenen structs pro Type.&lt;/p&gt;
&lt;h2 id=&quot;malloc-sizeof&quot; tabindex=&quot;-1&quot;&gt;malloc + sizeof&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct someStruct *var = malloc(sizeof(struct someStruct));
// better (code does not need to change if type changes):
struct someStruct *var = malloc(sizeof(*var));
// usually even better (fills with 0)
struct someStruct *var = calloc(1, sizeof(*var));
// usually even better (shorter, on stack, 0 init when static or one member is set in struct literal):
// NOTE: inits to default values in C++ (0 if no defaults given)
struct someStruct var = {.member = 1, ...};
struct someStruct var = {0};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://felipec.wordpress.com/2024/03/03/c-skill-issue-how-the-white-house-is-wrong/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://felipec.wordpress.com/2024/03/03/c-skill-issue-how-the-white-house-is-wrong/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;offsetof-container-of-macro&quot; tabindex=&quot;-1&quot;&gt;offsetof, container_of macro&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/c/types/offsetof&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;offsetof&lt;/a&gt; gets the byte offset for a member in a struct:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Check if order of memers in two structs are equal
// So one can be casted into the other
static_assert(offsetof(Vector2, x) == offsetof(Rectangle, x) &amp;amp;&amp;amp; offsetof(Vector2, y) == offsetof(Rectangle, y));
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;container_of() is part of the Linux kernel and basically does the reverse, pass in a pointer to a member and get a pointer for the surrounding type: &lt;a href=&quot;https://radek.io/2012/11/10/magical-container_of-macro/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://radek.io/2012/11/10/magical-container_of-macro/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;macro-stringification&quot; tabindex=&quot;-1&quot;&gt;Macro stringification&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#define MAKESTRING(n) STRING(n)
#define STRING(n) #n

// prints __LINE__ (not expanded)
std::cout &amp;lt;&amp;lt; STRING(__LINE__) &amp;lt;&amp;lt; std::endl;
// prints 42 (line number)
std::cout &amp;lt;&amp;lt; MAKESTRING(__LINE__) &amp;lt;&amp;lt; std::endl;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the stringize operation, it will produce a string literal from macro parameter (&lt;code&gt;n&lt;/code&gt;). Two lines are required to allow extra expansion of macro parameter. (&lt;a href=&quot;https://stackoverflow.com/a/48464280&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/a/48464280&lt;/a&gt;)&lt;/p&gt;
&lt;h2 id=&quot;open-mp-simple-parallelisierung&quot; tabindex=&quot;-1&quot;&gt;OpenMP - Simple Parallelisierung&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nullprogram.com/blog/2017/03/01/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;OpenMP and pwrite() (nullprogram.com)&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;/* schedule(dynamic, 1): treat the loop like a work queue */
#pragma omp parallel for schedule(dynamic, 1)
for (int i = 0; i &amp;lt; num_frames; i++) {
    struct frame *frame = malloc(sizeof(*frame));
    float theta = compute_theta(i);
    compute_frame(frame, theta, beta);
    // only one thread at a time can be in the critical section
    #pragma omp critical
    {
        write(STDOUT_FILENO, frame, sizeof(*frame));
    }
    free(frame);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;#pragma&lt;/code&gt; wird ignoriert, wenn OpenMP nicht unterstützt wird -&amp;gt; Code läuft normal ab, wird nur nicht parallelisiert.&lt;br /&gt;
Wird auch von Windows unterstützt (bis OpenMP 2.0)&lt;/p&gt;
&lt;h2 id=&quot;switch&quot; tabindex=&quot;-1&quot;&gt;switch&lt;/h2&gt;
&lt;p&gt;switch wird in Assembler als Jump-Table umgesetzt. Input wird in Speicheradresse umgerechnet, an der sich der Code für die korrekte Anweisung aus dem switch befindet.&lt;br /&gt;
Complexity: O(1) + C&lt;br /&gt;
if-tree Complexity: O(n) + K | K &amp;lt; C&lt;br /&gt;
-&amp;gt; schneller als if-tree wenn man viele Bedingungen hat&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=fjUG_y5ZaL4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=fjUG_y5ZaL4&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;compiler-linker&quot; tabindex=&quot;-1&quot;&gt;Compiler, Linker&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;Preprocessor only:
&amp;gt; gcc -E main.c -o main.i
Compiler:
&amp;gt; gcc -S main.i -o main.s
Assembler:
&amp;gt; as main.s -o main.o
Preprocessor + Compiler + Assembler:
&amp;gt; gcc -c main.c -o main.o
Linker:
&amp;gt; ld obj1.o /usr/lib/obj2.o -lc main.o -dynamic-linker dynamiclib.so -o main.exe
Full pipeline:
&amp;gt; gcc -o out.exe ./main.c -llibraryname -LLibrary/directory
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compiler generiert Object-Datei (.o, .obj). Diese enthält Assembler + Informationen zu Abhängigkeiten und Aufbau für Linker.&lt;br /&gt;
Linker verbindet mehrere Objekt-Dateien zu einer Executable.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Dump Assembler:
&amp;gt; gcc -S file.c
&amp;gt; gcc -S -o asm_output.s file.c

Dump from Object-file:
(-S intermixes source code)
(-rwC show symbol relocations, disable line-wrapping, demangle)
&amp;gt; objdump -S -d -rwC -Mintel file.o &amp;gt; file.dump

Dump Assembler optimized:
https://stackoverflow.com/a/38552509
&amp;gt; g++ -fno-asynchronous-unwind-tables -fno-exceptions -fno-rtti -fverbose-asm -Wall -Wextra   foo.cpp   -O3 -masm=intel -S -o- | less

Show dependencies:
ldd main.exe
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;p-null-vs-null-p&quot; tabindex=&quot;-1&quot;&gt;p == NULL vs NULL == p&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void *p = malloc(8);
if (p = NULL) {} // no error, p is assigned NULL
if (NULL = p) {} // error, we wanted to write NULL == p
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;main&quot; tabindex=&quot;-1&quot;&gt;main()&lt;/h2&gt;
&lt;p&gt;main() wird vom Compiler anders optimiert, da die Funktion nur einmal aufgerufen wird (Aussage irgendwo bei Stackoverflow gelesen)&lt;/p&gt;
&lt;h2 id=&quot;bit-hacks&quot; tabindex=&quot;-1&quot;&gt;Bit Hacks&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel&lt;/a&gt;&lt;br /&gt;
Count set bits in an int32 and more...&lt;/p&gt;
&lt;h2 id=&quot;bitmask-with-more-than-64-entries&quot; tabindex=&quot;-1&quot;&gt;Bitmask with more than 64 entries&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;internal b32
EntityHasProperty(Entity *entity, EntityProperty property)
{
    return !!(entity-&amp;gt;properties[property / 64] &amp;amp; (1ull &amp;lt;&amp;lt; (property % 64)));
}

internal Entity *
SetEntityProperty(Entity *entity, EntityProperty property)
{
    entity-&amp;gt;properties[property / 64] |= 1ull &amp;lt;&amp;lt; (property % 64);
    return entity;
}

enum EntityProperty {
	ENT_PROP_NONE=0,
	ENT_PROP_TOGGLE,
	//...
	EntityProperty_MAX
}

#define EntityProperty_MAX 123
struct Entity {
	u64 properties[(EntityProperty_MAX+63)/64];
	// ...
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Simple solution of using an &amp;quot;automatically&amp;quot; scaling array (at compile time) and accessor functions, which target the right entry for a given value.&lt;/p&gt;
&lt;h2 id=&quot;stack-space&quot; tabindex=&quot;-1&quot;&gt;Stack space&lt;/h2&gt;
&lt;p&gt;Stack space is limited and you can run out, especially if you place a large array on it.&lt;br /&gt;
Default limits&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MSVC: 1MB&lt;/li&gt;
&lt;li&gt;Linux: 8MB (defined by OS)&lt;br /&gt;
To increase the limit&lt;/li&gt;
&lt;li&gt;MSVC: &lt;code&gt;/F&lt;/code&gt; compiler option &lt;a href=&quot;https://learn.microsoft.com/en-us/cpp/build/reference/f-set-stack-size?view=msvc-170&amp;amp;redirectedfrom=MSDN&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;GCC (Windows): &lt;code&gt;-Wl,--stack,&amp;lt;bytes&amp;gt;&lt;/code&gt; option &lt;a href=&quot;https://stackoverflow.com/a/54838059&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Linux: &lt;code&gt;ulimit -s&lt;/code&gt; (globally) or &lt;a href=&quot;https://stackoverflow.com/questions/2275550/change-stack-size-for-a-c-application-in-linux-during-compilation-with-gnu-com&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;locally&lt;/a&gt;&lt;br /&gt;
If you run out of stack due to allocations, the program might crash directly after startup (usually without an error message). The error will be in the &lt;code&gt;chkstk.asm&lt;/code&gt; module. &lt;a href=&quot;https://stackoverflow.com/questions/38854133/app-crash-after-modifying-a-structure&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;c++ - App crash after modifying a structure - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;opaque-struct&quot; tabindex=&quot;-1&quot;&gt;Opaque struct&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-c&quot;&gt;// foo.h
typedef struct foo foo;
foo *init();
void doStuff(foo *f);
void freeFoo(foo *f);

// foo.c
struct foo {
    int x;
    int y;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hides internal details, datamembers and functions of a struct from the user (i.e. only the struct name is known to the public API). Essentially this means: do not access the internals of this struct manually, only pass it to the accompanying API functions. Is the equivalent of making things protected/private in C++.&lt;br /&gt;
Advantage: Implementation details of struct can change and user-code is unaffected.&lt;/p&gt;
&lt;h2 id=&quot;bitshift&quot; tabindex=&quot;-1&quot;&gt;Bitshift&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// &amp;gt;&amp;gt; shifts all bits right and fills with 0 (+int and uint) or 1 (-int, preserves sign bit, technically compiler dependant)
// -1 is all bits=1 in two&#39;s complement
// &amp;lt;&amp;lt; always fills with 0 and preserves sign bit on int

int test = 1;
printf(&amp;quot;%d | %d&#92;n&amp;quot;, test &amp;lt;&amp;lt; 2, test &amp;gt;&amp;gt; 2);
// prints 4 | 0
test = -1;
printf(&amp;quot;%d %d&#92;n&amp;quot;, test &amp;lt;&amp;lt; 2, test &amp;gt;&amp;gt; 2);
// prints -4 | -1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://en.wikipedia.org/wiki/Bitwise_operations_in_C#Right_shift_%3E%3E&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://en.wikipedia.org/wiki/Bitwise_operations_in_C#Right_shift_&amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;rounding&quot; tabindex=&quot;-1&quot;&gt;Rounding&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt; val | cast | floorf | roundf | ceilf
-1.9 |   -1 |   -2.0 |   -2.0 | -1.0
-1.5 |   -1 |   -2.0 |   -2.0 | -1.0
-1.2 |   -1 |   -2.0 |   -1.0 | -1.0
-0.9 |    0 |   -1.0 |   -1.0 | -0.0
-0.5 |    0 |   -1.0 |   -1.0 | -0.0
-0.1 |    0 |   -1.0 |   -0.0 | -0.0
 0.1 |    0 |    0.0 |    0.0 |  1.0
 0.5 |    0 |    0.0 |    1.0 |  1.0
 0.9 |    0 |    0.0 |    1.0 |  1.0
 1.2 |    1 |    1.0 |    1.0 |  2.0
 1.5 |    1 |    1.0 |    2.0 |  2.0
 1.9 |    1 |    1.0 |    2.0 |  2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;(int)-cast not recommended for values that can be both positive and negative, since the range (-1,1) gets mapped to 0, basically introducing an off-by-one error whenever we cross 0 (e.g. when dealing with 2D/3D coordinates)&lt;/li&gt;
&lt;li&gt;floorf and ceilf are more consistent and map the same amount of values to a single int across the whole range of float/double&lt;/li&gt;
&lt;li&gt;roundf is also fine in that regard, one just has to deal with the fact, that the switch from one int to the next happens in the middle of it&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdout.h&amp;gt;

int main()
{
    float values[] = {-1.9, -1.5, -1.2, -0.9, -0.5, -0.1, 0.1, 0.5, 0.9, 1.2, 1.5, 1.9};
    printf(&amp;quot; val | cast | floorf | roundf | ceilf&#92;n&amp;quot;);
    for (int idx = 0; idx &amp;lt; sizeof(values) / sizeof(values[0]); ++idx)
    {
        float v = values[idx];
        printf(&amp;quot;% 4.1f | %4d | % 6.1f | % 6.1f | % 4.1f&#92;n&amp;quot;, v, (int)v, floorf(v), roundf(v), ceilf(v));
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;int-sizes&quot; tabindex=&quot;-1&quot;&gt;int sizes&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;lt;stdint.h&amp;gt;
int64_t test = -(1ULL &amp;lt;&amp;lt; 32) - 2;
int32_t test2 = test;
printf(&amp;quot;%lld %d&#92;n&amp;quot;, test, test2);
// prints: -4294967298 -2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Casting a bigger int type to a smaller one will preserve the lower N-1 bits and the sign (or lower N bits for unsigned types)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;implicit-conversions&quot; tabindex=&quot;-1&quot;&gt;Implicit conversions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://en.cppreference.com/w/c/language/conversion&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Implicit conversions - cppreference.com&lt;/a&gt;&lt;br /&gt;
Breaking it down to practical rules (ignoring niche use-cases like complex and imaginary types).&lt;br /&gt;
Two different types as argument in an arithmetic operation are converted as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;an integer is converted to match a floating type&lt;/li&gt;
&lt;li&gt;the smaller type is converted to match the larger type&lt;/li&gt;
&lt;li&gt;signed integers are converted to unsigned, unless the signed type can represent all possible values of the unsigned type (i.e. the signed type is bigger)&lt;br /&gt;
Examples:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// rule 1
1.f + 20000001 // 20000001 is converted to float 20000000.f
               // result after addition is float 20000000.f
               // (since 20000001.f is not representable)
// rule 2
1.f + 2.0      // 1.f is converted to double 1.0
               // result after addition is double 3.0
(char)&#39;a&#39; + 1L // (char)&#39;a&#39; is converted to long 97
               // result after addition is signed long 98
5UL - 2ULL     // 2UL is converted to unsigned long long 2
               // result after addition is unsigned long long 3
// rule 3 (+ rule 2)
2u - 10        // 10 is converted to unsigned int 10
               // result after addition is unsigned int 
               // 4294967288 (-8 modulo 2^32 -&amp;gt; overflow)
0UL - 1LL      // 0UL is converted to signed long long 0
               // result after addition is signed long long -1
               // NOTE: this example is different on 
               // cppreference and depends on the size of 
               // (unsigned) long which is 32-bits in my case
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;files-text-vs-binary-mode&quot; tabindex=&quot;-1&quot;&gt;Files - text vs. binary mode&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;FILE *f = fopen(&amp;quot;somefile.txt&amp;quot;, &amp;quot;r+&amp;quot;); // text mode
FILE *b = fopen(&amp;quot;somefile.txt&amp;quot;, &amp;quot;r+b&amp;quot;); // binary mode
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Text mode converts &lt;code&gt;&#92;r&#92;n&lt;/code&gt; to &lt;code&gt;&#92;n&lt;/code&gt; on input and the other way around on output on a Windows machine (and maybe other characters too)&lt;/li&gt;
&lt;li&gt;because of this, fseek-ing into the middle of &lt;code&gt;&#92;r&#92;n&lt;/code&gt; has some unexpected effects (probably undefined behavior)
&lt;ul&gt;
&lt;li&gt;reading might not produce the expected result and actually move the file pointer backwards before the &lt;code&gt;&#92;r&#92;n&lt;/code&gt; sequence&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;this is one reason why fseek() should only be called with values of ftell() for text files (as per standard definition)&lt;/li&gt;
&lt;li&gt;reading from a text file or fseek-ing into it is slower than with a binary file
&lt;ul&gt;
&lt;li&gt;counting line breaks is about 2-3x faster with a binary file (using fread(), a for loop and a 65K buffer)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;if the file is a text file fscanf, fgets, etc. work in both modes as expected (so if line endings do not matter, using binary mode can still be faster)&lt;/li&gt;
&lt;li&gt;Links
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/20863959/difference-between-opening-a-file-in-binary-vs-text&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;c++ - Difference between opening a file in binary vs text - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;utf-8&quot; tabindex=&quot;-1&quot;&gt;UTF8&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;in both modes: watch out for &lt;a href=&quot;https://stackoverflow.com/a/2223926&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;UTF8 BOM&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;first 3 bytes&lt;/li&gt;
&lt;li&gt;hex: &lt;code&gt;0xEF, 0xBB, 0xBF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;uint: &lt;code&gt;239, 187, 191&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;char: &lt;code&gt;-17, -69, -65&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Will probably not appear in a text editor and taken into account when calculating position (e.g. in Notepad++)&lt;/li&gt;
&lt;li&gt;Does appear in read chars in both text and binary mode and affects ftell()&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;UTF8 characters (which may be more than 1 Byte) can be read in both modes. Generally it is best to just treat them as bytes/char* and pass them unmodified to printf/puts/etc. (which &amp;quot;just works&amp;quot;), if looking into single characters is not required.
&lt;ul&gt;
&lt;li&gt;Note that strlen will not produce the &amp;quot;expected&amp;quot; results with multi-byte chars (i.e. count them as 2+)&lt;/li&gt;
&lt;li&gt;also the buffer holding them needs to account for this and potentially be bigger&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Links
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/21737906/how-to-read-write-utf8-text-files-in-c&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;linux - How to Read/Write UTF8 text files in C? - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/15528359/printing-utf-8-strings-with-printf-wide-vs-multibyte-string-literals&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;c - Printing UTF-8 strings with printf - wide vs. multibyte string literals - Stack Overflow&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;unity-build&quot; tabindex=&quot;-1&quot;&gt;Unity build&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;#include&lt;/code&gt; all .c files in one file and only send that to the compiler&lt;/li&gt;
&lt;li&gt;Faster than non-incremental builds&lt;/li&gt;
&lt;li&gt;Slower than &amp;quot;clever&amp;quot; incremental builds with tools like cmake+ninja&lt;/li&gt;
&lt;li&gt;Is also what raddbg uses (main .c file &lt;code&gt;#includes&lt;/code&gt; all .h and .c files - module .c files barely &lt;code&gt;#include&lt;/code&gt;anything on their own - not even the corresponding .h file)&lt;br /&gt;
&lt;a href=&quot;https://hereket.com/posts/cpp-unity-compile-inkscape/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Comparing C/C++ unity build with regular build on a large codebase | Hereket&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sidenote: The C compiler is up to 10x faster than C++ compiler if templates and such are used in the C++ code&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;macro-best-practices&quot; tabindex=&quot;-1&quot;&gt;Macro best practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;For multiple statements: wrap in do ... while(0) loop&lt;/li&gt;
&lt;li&gt;Rationale: This prevents incorrect usage in unbracketed if statements, which would most likely lead to unexpected results. Also statements require a semicolon at the end as delimiter.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#define foo(x) bar(x); baz(x)
if (x &amp;gt; 3)
	foo(x)
// will lead to
if (x &amp;gt; 3)
	bar(x);
baz(x);

#define foo_fix(x) do { bar(x); baz(x); } while(0)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;When a macro should not be defined in one case (e.g. debug builds), replace it with ((void)0) instead of leaving it blank&lt;/li&gt;
&lt;li&gt;Rationale: This will still work if the macro is used with the comma expression or ternary operator&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#ifdef NDEBUG
	#define debug_print(s) printf(s)
#else
	#define debug_print(s) ((void)0)
#endif

for (int idx = 0; idx &amp;lt; len; ++idx, debug_print(&amp;quot;foo&amp;quot;)) { ... }
x &amp;gt; 0 ? debug_print(&amp;quot;greater&amp;quot;) : debug_print(&amp;quot;smaller&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;For macros that return a value, which is not needed, consider explicitly discarding that value to avoid compiler warnings and misuse&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#define textf(f) ((void)snprintf(tempBuf, sizeof(tempBuf), f))
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;msvc-build-insights&quot; tabindex=&quot;-1&quot;&gt;MSVC Build Insights&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://devblogs.microsoft.com/cppblog/finding-build-bottlenecks-with-cpp-build-insights/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Finding build bottlenecks with C++ Build Insights - C++ Team Blog&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Use the following to get insights into the build process of your C/C++ app. Find out which files are included way too often, which files take long to parse or compile.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://janek.ing/img/user/_attachments/Pasted%20image%2020250528140213.png&quot; alt=&quot;Pasted image 20250528140213.png&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Download and install the latest &lt;a href=&quot;https://visualstudio.microsoft.com/downloads/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Visual Studio 2019&lt;/a&gt;. (vcperf seems to also be included in the Visual Studio Build Tools 2022)&lt;/li&gt;
&lt;li&gt;Obtain WPA by downloading and installing the &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/get-started/adk-install&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;latest Windows ADK&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;NOTE: I do not remember doing the following two steps, so maybe they can be skipped as of 05/2025&lt;/li&gt;
&lt;li&gt;Copy the &lt;em&gt;perf_msvcbuildinsights.dll&lt;/em&gt; file from your Visual Studio 2019’s MSVC installation directory to your newly installed WPA directory. This file is the C++ Build Insights WPA add-in, which must be available to WPA for correctly displaying the C++ Build Insights events.
&lt;ol&gt;
&lt;li&gt;MSVC’s installation directory is typically: &lt;code&gt;C:&#92;Program Files (x86)&#92;Microsoft Visual Studio&#92;2019&#92;{Edition}&#92;VC&#92;Tools&#92;MSVC&#92;{Version}&#92;bin&#92;Hostx64&#92;x64&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;WPA’s installation directory is typically: &lt;code&gt;C:&#92;Program Files (x86)&#92;Windows Kits&#92;10&#92;Windows Performance Toolkit&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Open the &lt;em&gt;perfcore.ini&lt;/em&gt; file in your WPA installation directory and add an entry for the &lt;em&gt;perf_msvcbuildinsights.dll&lt;/em&gt; file. This tells WPA to load the C++ Build Insights add-in on startup.&lt;/li&gt;
&lt;li&gt;Open an elevated &lt;strong&gt;&lt;em&gt;x64 Native Tools Command Prompt for VS 20XX&lt;/em&gt;&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Obtain a trace of your build:
&lt;ol&gt;
&lt;li&gt;Run the following command: &lt;code&gt;vcperf /start MySessionName&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Build your C++ project from anywhere, even from within Visual Studio (&lt;em&gt;vcperf&lt;/em&gt; collects events system-wide).&lt;/li&gt;
&lt;li&gt;Run the following command: &lt;code&gt;vcperf /stop MySessionName outputFile.etl&lt;/code&gt;. This command will stop the trace, analyze all events, and save everything in the &lt;em&gt;outputFile.etl&lt;/em&gt; trace file.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Open the trace you just collected in WPA.&lt;/li&gt;
&lt;/ol&gt;

            </content>
            <link href="https://janek.ing/code/langauges/c/" >
        </entry>
        <entry>
            <title>
                Batch
                
            </title>
            <updated>2025-07-14T06:54:15.883Z</updated>
            <id>https://janek.ing/code/langauges/batch/</id>
            <content type="html">
                &lt;h2 id=&quot;best-practices&quot; tabindex=&quot;-1&quot;&gt;Best practices&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@echo off&lt;/code&gt; (disable echo by default)&lt;/li&gt;
&lt;li&gt;when setting variables surround whole statement with quotes &lt;code&gt;set &amp;quot;var=value&amp;quot;&lt;/code&gt; (this handles spaces and other special characters better)&lt;/li&gt;
&lt;li&gt;Better not handle passwords, if you really need to see &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#handle-passwords&quot;&gt;#Handle passwords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;surround whole script with &lt;code&gt;setlocal&lt;/code&gt; and &lt;code&gt;endlocal&lt;/code&gt; (to not pollute the variable space)&lt;/li&gt;
&lt;li&gt;Use these instead of hard-coded paths: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#useful-windows-variables&quot;&gt;#Useful Windows variables&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;for %%a in (%*) do (set &amp;quot;%%a=1&amp;quot;)&lt;/code&gt; is the simplest parser for flags&lt;/li&gt;
&lt;li&gt;Keep conditions (if/else) to a minimum (many pitfalls: brackets may break comments, variables are expanded only once, code becomes less linear, etc. - goto avoids some of these, but makes the code even less linear)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cheatsheet&quot; tabindex=&quot;-1&quot;&gt;Cheatsheet&lt;/h2&gt;
&lt;h3 id=&quot;echo&quot; tabindex=&quot;-1&quot;&gt;echo&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: turn off echoing all commands executed
@echo off
:: @-symbol: run one command without echo
@set somevar=1
:: echo Text and variable
echo Hello, %username%
:: Blank line
echo.
:: echo message with brackets need escaping when in if/for
if condition (echo text ^(hint^))

rem This is a comment
:: This is also a comment, but causes problems in if/for blocks
:: see: https://www.robvanderwoude.com/comments.php
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;variables&quot; tabindex=&quot;-1&quot;&gt;Variables&lt;/h3&gt;
&lt;h4 id=&quot;set&quot; tabindex=&quot;-1&quot;&gt;Set&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: set without %, use surrounded with %
:: if value contains spaces, surround whole statement with &amp;quot;&amp;quot;
set &amp;quot;var=path&#92;to&#92;exe --whatever&amp;quot;
echo %var%
:: Prints: path&#92;to&#92;exe --whatever
:: if only value is surrounded, &amp;quot;&amp;quot; will become part of value
:: value of %var% will be baked into %var2% at this point
set var2=&amp;quot;pre&#92;%var%&amp;quot;
echo %var2%
:: Prints: &amp;quot;pre&#92;path&#92;to&#92;exe --whatever&amp;quot;
:: numeric vars (val == 6)
set /A val=3+3
:: promt user input
set /P &amp;quot;uservar=just a comment, will be overwritten&amp;quot;
:: set multiple vars
:: make sure to use &amp;quot;&amp;quot; else space before &amp;amp; will be included in value
set &amp;quot;foo=bar&amp;quot; &amp;amp; set &amp;quot;poo=bear&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;compare&quot; tabindex=&quot;-1&quot;&gt;Compare&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: Surround var to ensure correct behavior 
:: use &amp;quot;&amp;quot; if value cannot contain &amp;quot; (or it will error)
:: use [] if value cannot contain spaces
:: do not use single quotes &#39;&#39;
%var%==true
[%var%]==[some text]
&amp;quot;%1&amp;quot;==&amp;quot;-h &amp;amp; shift&amp;quot;
&amp;quot;%1&amp;quot; NEQ &amp;quot;&amp;quot;
&amp;quot;%foo%&amp;quot; EQU &amp;quot;%bar%&amp;quot;
:: numeric comparisons
:: LSS, LEQ, GTR, GEQ
if (3 gtr 1) (echo true)
if (&amp;quot;B3&amp;quot; gtr &amp;quot;b2&amp;quot;) (echo compares char by char, case-insensitive, b&amp;gt;a)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;test-existance&quot; tabindex=&quot;-1&quot;&gt;Test existance&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: no % signs!
if defined var (echo yay) else (echo nay)
:: for arguments save to temp var first:
set &amp;quot;var=%~1&amp;quot;
:: Test for existance of foo (not test!)
set test=foo
if not defined %test% (echo foo not defined)
:: alternative (test if empty)
if &amp;quot;%~1&amp;quot;==&amp;quot;&amp;quot; (echo not defined or empty)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;replace-and-substring&quot; tabindex=&quot;-1&quot;&gt;Replace and Substring&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;:: Replace &amp;quot;to&amp;quot; with &amp;quot;from&amp;quot;
set var3=%var:to=from%
:: Substring -&amp;gt; th&#92;to&#92;exe --whatev
set var4=%var:~2,-2%
:: Remove spaces
set var5=%var:=%
:: Remove quotes
set &amp;quot;var6=%var:&amp;quot;=%&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://ss64.com/nt/if.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://ss64.com/nt/if.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;useful-windows-variables&quot; tabindex=&quot;-1&quot;&gt;Useful Windows variables&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/en-us/windows/deployment/usmt/usmt-recognized-environment-variables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Recognized environment variables - Windows Deployment | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%userprofile%        -&amp;gt; C:&#92;Users&#92;schaja
%homepath%           -&amp;gt; &#92;Users&#92;schaja
%username%           -&amp;gt; schaja
%appdata%            -&amp;gt; C:&#92;Users&#92;schaja&#92;AppData&#92;Roaming
%tmp%                -&amp;gt; C:&#92;Users&#92;schaja&#92;AppData&#92;Local&#92;Temp
%systemroot%         -&amp;gt; C:&#92;Windows
%programfiles%       -&amp;gt; C:&#92;Program Files
%programfiles(x86)%  -&amp;gt; C:&#92;Program Files (x86)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;arguments-command-line-parameters&quot; tabindex=&quot;-1&quot;&gt;Arguments / Command Line Parameters&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://learn.microsoft.com/de-de/windows-server/administration/windows-commands/call&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Aufruf | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;file.bat &amp;quot;C:&#92;path&#92;to&#92;big file.exe&amp;quot; otherfile.wav -foo
%0    -&amp;gt; file.bat
%1    -&amp;gt; &amp;quot;C:&#92;path&#92;to&#92;big file.exe&amp;quot;
%~1   -&amp;gt; C:&#92;path&#92;to&#92;big file.exe [quotes removed]
%~d1  -&amp;gt; C:
%~n1  -&amp;gt; big file
%~p1  -&amp;gt; &#92;path&#92;to&#92;
%~x1  -&amp;gt; .exe
%~a1  -&amp;gt; --a-------- (file attributes)
%~t1  -&amp;gt; 30.08.2021 13:42 (last change date)
%~z1  -&amp;gt; 1823 (file size in bytes)
%~dp1 -&amp;gt; C:&#92;path&#92;to&#92; (combination of d and p parameters)
%~f1  -&amp;gt; C:&#92;path&#92;to&#92;big file.exe
%f1   -&amp;gt; f1 [needs tilde]
%2    -&amp;gt; otherfile.wav
%~2   -&amp;gt; otherfile.wav
%~d2  -&amp;gt; [current drive]
%~p2  -&amp;gt; [path to current folder]
%~f2  -&amp;gt; [drive+Path to current folder]&#92;otherfile.wav
%3    -&amp;gt; -foo
%*    -&amp;gt; &amp;quot;path/to/big file.exe&amp;quot; otherfile.wav -foo
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;[!info] Dropping files&lt;br /&gt;
When dropping a file onto a batch file (in Windows Explorer), the batch is called with the path to the dropped file as first argument &lt;code&gt;%1&lt;/code&gt; (similar to how exes behave).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!info] Spaces&lt;br /&gt;
Paths values with spaces in them need to be quoted, otherwise they will be split into multiple arguments.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;[!warning] Special values and PowerShell&lt;br /&gt;
Values with a &lt;code&gt;=&lt;/code&gt; in them have to be quoted as well. If the batch script is executed from a PowerShell both single and double quotes are necessary! &lt;code&gt;&#39;&amp;quot;foo=bar&amp;quot;&#39;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;for-loop&quot; tabindex=&quot;-1&quot;&gt;for loop&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;:: Variable name in loop has to be one letter
:: but must not conflict with path parameters (see above)
:: Loop over integer (start=1, increment=2, end&amp;lt;=100)
for /l %%i in (1, 2, 100) do (echo %%i)

:: Loop over all files (no folders) in current directory and subdirectories
for /r %%a in (*) do (echo %%a)
:: Loop over all folders is current directory
for /D %%a in (*) do (echo %%a)

:: Loop over all arguments
:LoopArgs
if [%1]==[] (goto AfterLoop)
if [%1]==[-h] (goto PrintHelp)
if [%1]==[-i] (set &amp;quot;target=%2&amp;quot; &amp;amp; shift)
shift
goto LoopArgs
:AfterLoop

:: Loop over arguments as flags and set variables
:: .&#92;file.bat compile run -&amp;gt; %compile%==&amp;quot;1&amp;quot;, %run%=&amp;quot;1&amp;quot;
for %%a in (%*) do (set &amp;quot;%%a=1&amp;quot;)

:: Read file line by line
for /f &amp;quot;tokens=*&amp;quot; %%a in (%file%) do (echo %%a)

:: Read file properties (see arguments above)
for %%a in (%file%) do (echo %%~ta)

:: for i in (&#39;where cmake.exe&#39;) do (echo i in (&#39;powershell -command &amp;quot;$password = Read-Host -AsSecureString -Prompt &#39;Enter password&#39;; $plainPassword = [System.Runtime.InteropServices.Marshal]::PtrToStringAutoSecureStringToBSTR($password)); Write-Output $plainPassword&amp;quot;&#39; do (
    set &amp;quot;password=i in (*) do set LIST=%LIST% %%i
:: LIST is just last file found

set _html=Hello^&amp;gt;World
echo %_html%
:: creates a file called World

set /p &amp;quot;var=&amp;quot;
:: enter Hello^World!
echo %var%
:: prints HelloWorld!

setlocal EnableDelayedExpansion
set VAR=before
if &amp;quot;%VAR%&amp;quot; == &amp;quot;before&amp;quot; (
    set VAR=after
    if &amp;quot;!VAR!&amp;quot; == &amp;quot;after&amp;quot; @echo If you see this, it worked
)
set LIST=
for %%i in (*) do set LIST=!LIST! %%i
:: LIST contains all files

set _html=Hello^&amp;gt;World
echo !_html!
:: Prints normally

set /p &amp;quot;var=&amp;quot;
:: enter Hello^World!
echo %var%
:: prints Hello^World!

endlocal
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://ss64.com/nt/delayedexpansion.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;EnableDelayedExpansion - Windows CMD - SS64.com&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/6679907/how-do-setlocal-and-enabledelayedexpansion-work&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;batch file - How do SETLOCAL and ENABLEDELAYEDEXPANSION work? - Stack Overflow&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;pitfalls-of-enable-delayed-expansion&quot; tabindex=&quot;-1&quot;&gt;Pitfalls of EnableDelayedExpansion&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;! in strings will need to be escaped&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;Hello World^!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;every line with a ! on it in the batch will lead to any carets on that line being treated as escape chars&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;echo &amp;quot;^^Hello^World!foo^^^bar&amp;quot;
:: Prints &amp;quot;^^Hello^World!foo^^^bar&amp;quot;
setlocal EnableDelayedExpansion
echo &amp;quot;^^Hello^World!foo^^^bar&amp;quot;
:: Prints &amp;quot;^HelloWorldfoo^bar&amp;quot;
endlocal
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;handling filenames with ! in them in a for loop will fail, because the string will be interpreted as a variable name&lt;/li&gt;
&lt;li&gt;same goes for the usual way of masking passwords using powershell, since a for loop is used a password with ! in them will not be passed properly&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tidbits&quot; tabindex=&quot;-1&quot;&gt;Tidbits&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-batch&quot;&gt;title My cool window title
pause
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://administrator.de/tutorial/wie-arbeite-ich-mit-batch-umgebungsvariablen-erstellung-umgang-erweiterungen-veraenderungen-117069.html#toc13&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wie Arbeite ich mit Batch UmgebungsVariablen Erstellung Umgang Erweiterungen Veränderungen - Administrator&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;execution-order&quot; tabindex=&quot;-1&quot;&gt;Execution order&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/4095133#4095133&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;parsing - How does the Windows Command Interpreter (CMD.EXE) parse scripts? - Stack Overflow&lt;/a&gt;&lt;br /&gt;
&lt;strong&gt;Phase 0) Read Line:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 1) Percent Expansion:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 2) Process special characters, tokenize, and build a cached command block:&lt;/strong&gt; This is a complex process that is affected by things such as quotes, special characters, token delimiters, and caret escapes.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 3) Echo the parsed command(s)&lt;/strong&gt; Only if the command block did not begin with &lt;code&gt;@&lt;/code&gt;, and ECHO was ON at the start of the preceding step.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 4) FOR &lt;code&gt;%X&lt;/code&gt; variable expansion:&lt;/strong&gt; Only if a FOR command is active and the commands after DO are being processed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 5) Delayed Expansion:&lt;/strong&gt; Only if delayed expansion is enabled&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 5.3) Pipe processing:&lt;/strong&gt; Only if commands are on either side of a pipe&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 5.5) Execute Redirection:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 6) CALL processing/Caret doubling:&lt;/strong&gt; Only if the command token is CALL&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 7) Execute:&lt;/strong&gt; The command is executed&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/langauges/batch/" >
        </entry>
        <entry>
            <title>
                Game Programming
                
            </title>
            <updated>2025-05-28T14:57:26.066Z</updated>
            <id>https://janek.ing/code/game-programming/</id>
            <content type="html">
                &lt;h2 id=&quot;lerp-smoothing&quot; tabindex=&quot;-1&quot;&gt;Lerp Smoothing&lt;/h2&gt;
&lt;p&gt;Advantage: Nice smoothing of animations in-place, without having to know/store the start of an animation (like you need for easing functions).&lt;/p&gt;
&lt;p&gt;Standard version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// a - current pos
// b - target pos
// t - factor to move a towards b in each step (0..1)
float lerp(float a,b,t) {
	return (1-t)*a + t*b;
}
void update() {
	a = lerp(a,b,0.01); // move a 1% closer to b each frame
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-&amp;gt; This is framerate dependent and stops working when framerate is not constant.&lt;br /&gt;
-&amp;gt; Cannot simply multiply t by dt, since &lt;code&gt;2*dt&lt;/code&gt; is not the same as calling lerp 2 times (kinda works, but is unstable and can explode if &lt;code&gt;t*dt &amp;gt; 1&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;Continuous (non recursive) version:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// F = fraction to move after one frame
// frame based version (n = frame counter)
f(n) = (a-b)*(1-F)^n+b
// time based version
f(t) = (a-b)*(1-F)^(t/dt)+b
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;-&amp;gt; still framerate dependent&lt;/p&gt;
&lt;p&gt;Framerate independent version:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// dt = delta time for last frame in s (Unity: Time.deltaTime)
float lerp_r(float a,b,r,dt) { // r = remainder (in %) after dt
	return b + (a-b)*pow(r,dt);
	// NOTE: pow() is about 8x slower than exp()
}
float lerp_hl(float a,b,hl,dt) { // hl = half life time in s
	return b + (a-b)*exp2(-dt/hl); // exp2(n) = 2^n
}

// Generally use this one (fastest, easy to use):
float lerp_decay(float a,b,l,dt) { // l = decay constant
	return b + (a-b)*exp(-l*dt);
	// useful range for l: 1..25 (slow to fast decay)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Source: &lt;a href=&quot;https://www.youtube.com/watch?v=LSNQuFEDOyQ&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=LSNQuFEDOyQ&lt;/a&gt;&lt;br /&gt;
Better article with detailed explanations (and also springs!): &lt;a href=&quot;https://theorangeduck.com/page/spring-roll-call&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://theorangeduck.com/page/spring-roll-call&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;engine&quot; tabindex=&quot;-1&quot;&gt;Engine&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=1740&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=1740&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;For strategy/puzzle/simulation-type games (Chess, Sokoban):
&lt;ul&gt;
&lt;li&gt;Rules have to be executed exactly with reproducible results. Players have very precise expectations and the game has to satisfy them and communicate accordingly.&lt;/li&gt;
&lt;li&gt;Recommended: Isolate code that deals with the rules of the game and keep all of it in one place, so it is clear, condensed, easily understandable and debug-able.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For action games (Doom, C&amp;amp;C):
&lt;ul&gt;
&lt;li&gt;There is some room of wiggle room, because players do not expect a very precise outcome (much more so in Doom than C&amp;amp;C though)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store game state and render state in the same structure for simplicity.
&lt;ul&gt;
&lt;li&gt;Basically follow the &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#fat-flat-struct-behaviors&quot;&gt;#Fat/Flat struct (behaviors)&lt;/a&gt; approach&lt;/li&gt;
&lt;li&gt;Maintain separate values for actual game state (e.g., health, ammo) and display state (e.g., display health, display ammo).&lt;/li&gt;
&lt;li&gt;Consider &amp;quot;two-sided death&amp;quot; for entities: logical removal from the game state and gradual removal through animation.&lt;/li&gt;
&lt;li&gt;DON&#39;T: Have a lot separate classes and interfaces for this stuff. Game state and rendering is strongly linked. One has to be able to quickly add stuff to this, especially in the beginning prototype phase.&lt;/li&gt;
&lt;li&gt;DON&#39;T: duplicate your data and logic everywhere (e.g. by introducing an event system or animation system to smoothly interpolate display health values). This will increase complexety and introduce bugs in having to sync all these systems.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store game state after each frame for easy undo/playback/demo recording.
&lt;ul&gt;
&lt;li&gt;Can always compress it, if needed (e.g. XOR-RLE)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keep all entities in a flat array and don&#39;t bother removing elements
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/drCnFueS4og?t=4079&amp;amp;feature=shared&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/drCnFueS4og?t=4079&amp;amp;feature=shared&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;on death, just mark as dead for gameplay, but keep data for display death Animation (see two-sided-death above)&lt;/li&gt;
&lt;li&gt;no null pointer dereferences, no access violation, no targeting the wrong entity (because the slot got refilled with new data)&lt;/li&gt;
&lt;li&gt;entity data is usually small (few Megabytes)&lt;/li&gt;
&lt;li&gt;can be compressed, if needed. E.g. by using ring buffer&lt;/li&gt;
&lt;li&gt;Alternative methods, like multiple lists, handles or a message system (to broadcast death events) are much more complicated to achieve the same goal&lt;/li&gt;
&lt;li&gt;This worked great and was very simple to implement in MathTD&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Use stable IDs for entities (e.g., towers) to manage their state and animations effectively.
&lt;ul&gt;
&lt;li&gt;In MathTD we just used the tower array index, which would only increment (never decrement or rollover)&lt;/li&gt;
&lt;li&gt;A more robust approach would be to generate a random 32 or 64bit id for each new entity and store that in the entity struct. Reference entities by their ID. IDs reach into a hashmap, e.g. by using the bottom 8-12 bits (depending on how many entities can be alive at any point divided by max fill rate -&amp;gt; see &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/data-structures-and-algorithms/#hash-tables&quot;&gt;Data Structures &amp;amp; Algorithms#Hash Tables&lt;/a&gt;) to get an index and then compare the requested ID to the ID of the entity in that slot. -&amp;gt; see &lt;a href=&quot;https://youtu.be/NW6PhVdq9R8?feature=shared&amp;amp;t=1150&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/NW6PhVdq9R8?feature=shared&amp;amp;t=1150&lt;/a&gt; (4mins)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Separate game rules from display and animation logic for clarity (as represented by the data -&amp;gt; see above)&lt;/li&gt;
&lt;li&gt;Ensure your code is flexible enough to incorporate changes and optimizations based on observed gameplay needs. First explore then decide on the correct structure. Don&#39;t add too much abstraction up front, because it might be wrong and will hinder exploration and iteration and is harder to change later.&lt;/li&gt;
&lt;li&gt;Use the prototyping phase not only to refine design and gameplay, but also to identify common operations and performance bottlenecks.
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=5000&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=5000&lt;/a&gt; (10min)&lt;/li&gt;
&lt;li&gt;Understand that performance requirements might evolve as the game design matures.&lt;/li&gt;
&lt;li&gt;Start with the simplest implementation. There will be a lot of changes in the beginning, code should be as simple as possible, because it needs to be changed frequently or thrown out. Speed of iteration matters most in the beginning.&lt;/li&gt;
&lt;li&gt;For example: for a small game (&amp;lt;1000 entities), just loop over the array for collision checking (O(N^2)). Even 1M checks is easily doable for a modern PC. This method always works, is easy to implement and debug. Optimization can happen later, but will make the code more complex.&lt;/li&gt;
&lt;li&gt;NOTE: This only works for small games or an explicit prototyping phase. On large projects, once the architecture is in place it will be very hard to change and optimize, so you will need to test beforehand and plan ahead. (see &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/architecture/#premature-optimization&quot;&gt;Architecture#Premature Optimization&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;For games with complex rules and a lot of dependencies between elements (e.g. Sokoban), a global event queue might be a good approach
&lt;ul&gt;
&lt;li&gt;Don&#39;t apply changes (take health, kill entity, change state, etc.) immediately, instead add these requests to a queue&lt;/li&gt;
&lt;li&gt;Can always inspect the queue during a frame to see what is going on&lt;/li&gt;
&lt;li&gt;Can re-order or filter the queue based on events that happened later&lt;/li&gt;
&lt;li&gt;Finally can apply queue to get new state for next frame&lt;/li&gt;
&lt;li&gt;This pattern also helped during development of the item ELFE (message queues)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Important for performance: Batching
&lt;ul&gt;
&lt;li&gt;TODO: Find more details&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;entity-systems&quot; tabindex=&quot;-1&quot;&gt;Entity systems&lt;/h2&gt;
&lt;p&gt;General approaches to a unit/entity system.&lt;br /&gt;
Preferred way for moderately complex games: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#fat-flat-struct-behaviors&quot;&gt;#Fat/Flat struct (behaviors)&lt;/a&gt;&lt;br /&gt;
For simple games this can also work well (MathTD): &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/#naive-fat-flat-struct-entity-types&quot;&gt;#Naive fat/flat struct (entity types)&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;oop&quot; tabindex=&quot;-1&quot;&gt;OOP&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-C++&quot;&gt;class UnitBase {
	Vec2 pos;
	Vec2 vel;
	int health;
	virtual void simulate(float dt)=0;
}
class UnitGoblin : public UnitBase {
	int damage;
	void calcDmg();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Base Class (has general properties like position, velocity, sprite - sometimes implements general behavior, otherwise functions are virtual or abstract) and child classes (which inherit Base Class, add properties and implement/overwrite behavior)&lt;/li&gt;
&lt;li&gt;Store all entities in one array, by storing a pointer to BaseClass* and type casting if specific stuff needs to be accessed&lt;/li&gt;
&lt;li&gt;Disadvantage: Additional layers of indirection through pointers and v-table indirections. Very cache unfriendly. Have to do type checks for each element (or add the same type enum as in the union approach) when processing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;discriminated-struct-union&quot; tabindex=&quot;-1&quot;&gt;Discriminated struct/union&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Approach 1:
enum EntityType {
	etNone=-1,
	etPlayer,
	etGoblin,
	etChest,
};
struct PlayerData {
	int holdingItemId;
	int potionCount;
};
struct GoblinData {
	int damage;
};
struct Entity {
	EntityType type;
	union {
		struct PlayerData;
		struct GoblinData;
	};
};
// Approach 2:
enum DataType {
	dtNone=-1,
	dtPosition,
	dtHealthAndDamage,
};
struct PositionData {
	int x,y;
};
struct HealthAndDamage {
	int hp, dmg;
};
struct Data {
	DataType type;
	union {
		struct PositionData;
		struct HealthAndDamage;
	}
};
struct Entity {
	Data *data; // array
	int size;
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;struct with general data, a &amp;quot;type&amp;quot; flag and a union of structs for storing the data of the different types.&lt;/li&gt;
&lt;li&gt;Advantage: Can be stored in a flat array for quick and cache friendly iterating over all entities&lt;/li&gt;
&lt;li&gt;Disadvantage: a union is basically an if/else branch in the type, so you have to handle that type check everywhere (the correct type is hidden behind one layer of indirection, same as OOP approach). This can become confusing and very complex. Code amount multiplies by number of types, since you have to check each combination (at least to filter the correct ones). Problems arise when type checking is missed and wrong data is accessed/changed.&lt;/li&gt;
&lt;li&gt;Unions are a way to compress data. One has to ask: Is the compression worth it, what do we gain from it? Entity data usually is very small anyway.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;naive-fat-flat-struct-entity-types&quot; tabindex=&quot;-1&quot;&gt;Naive fat/flat struct (entity types)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct RenderSprite {
	uint8_t *data;
	int len;
	int w, h;
};
struct ControlledByUser {
	Input in;
};
struct Hostile {
	int damage;
	int aggroRange;
};
struct Player { 
	struct RenderSprite, 
	struct ControlledByUser, 
	struct HasPhysicsShape,
};
struct Tree { 
	struct RenderSprite, 
	struct HasPhysicsShape, 
	struct IsStatic, 
};
struct Jelly { 
	struct RenderSprite, 
	struct ChasePlayer, 
	struct HasPhysicsShape, 
	struct Hostile 
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Have data bundled by features in structs (without union), switch by type&lt;/li&gt;
&lt;li&gt;Advantage: No indirection for the type check. More transparent, code knows exactly what data it is getting. One array per type is very cache friendly for iterating (not so much when working across types).&lt;/li&gt;
&lt;li&gt;Disadvantage: No union compression. Combinatoric explosion for handler functions, if there are a lot of properties.&lt;/li&gt;
&lt;li&gt;This can still work for simple games with few distinct types (like MathTD)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;fat-flat-struct-behaviors&quot; tabindex=&quot;-1&quot;&gt;Fat/Flat struct (behaviors)&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// but instead of Player, Tree, etc.:
enum EntityProperties {
	epRenderSprite = 1&amp;lt;&amp;lt;0,
	epControlledByPlayer = 1&amp;lt;&amp;lt;1,
	epHasPhysicsShape = 1&amp;lt;&amp;lt;2,
	epIsStatic = 1&amp;lt;&amp;lt;3,
	// ...
};
struct Entity {
	uint64_t props; // bitmask for active props
	// Sprite
	struct Texture sprite;
	Vec2 pos;
	// Movement
	Vec2 vel;
	Vec2 acc;
	// Control
	int controllerId;
	int health;
	int damage;
	// etc.
};
// Helper functions for entity &amp;quot;types&amp;quot;:
Entity *MakePlayer() {
	Entity *entity = AllocateEntity();
	SetEntProp(entity, epRenderSprite);
	entity-&amp;gt;sprite = ...;
	SetEntProp(entity, epControlledByPlayer);
	entity-&amp;gt;controllerId = ...;
	//...
	return entity;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Have all data for all functionality in one struct and a properties bitmask, which enables/disables part of the behavior.&lt;/li&gt;
&lt;li&gt;Advantage: No need for type checks, code is getting all the data. Switch by feature/property instead of entity type. Compared to the union, code branches become about the behavior (which is more important). No combinatoric explosion, you just handle properties in a flat/linear manner (O(N) mapping to code-paths).&lt;/li&gt;
&lt;li&gt;Disadvantage: struct can become fairly big (but still small in comparison to other data like textures, so does it even matter?)&lt;/li&gt;
&lt;li&gt;Fully orthogonal structs should be separated and handled differently.&lt;/li&gt;
&lt;li&gt;You may map struct data 1:1 to properties, but sometimes multiple (exclusive) properties can share the same data or properties can use no data at all. This style does not enforce any mapping. Be careful and explicit with sharing data though, else you can run into nasty side-effects.&lt;/li&gt;
&lt;li&gt;Similar to ECS (e.g. in Unity), but ECS has a 1:1 mapping between data and behavior and Unity also splits each into its own file (which you probably don&#39;t want, since it spreads behavior out a lot and makes it harder to debug).&lt;/li&gt;
&lt;li&gt;Nice approach for procedural games: You can easily create a 2^N feature space (by looping over the properties) and explore which combinations make sense and which one to disable.&lt;/li&gt;
&lt;li&gt;Alternative to bitmask when more than 64 features are required: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/langauges/c/#bitmask-with-more-than-64-entries&quot;&gt;C#Bitmask with more than 64 entries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Example: &lt;a href=&quot;https://web.archive.org/web/20220121023442/https://hatebin.com/oykukwtnoo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;hatebin - oykukwtnoo&lt;/a&gt; with sort-of explanations here &lt;a href=&quot;https://hero.handmade.network/forums/code-discussion/t/7896-why_don%2527t_use_discriminated_union_rather_than_sparse_system_for_entity_system#24630&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Why don&#39;t use discriminated union rather than Sparse System for entity system? | Handmade Network&lt;/a&gt; (read posts by Ryan Fleury). A little bit more background here: &lt;a href=&quot;https://web.archive.org/web/20221126193541/https://media.handmade-seattle.com/metadesk/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;The Yin and Yang of Data Formats&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Similar kinds of features can be packed into one struct (similar to a discriminated union):&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;// Property: epTrigger
enum TriggerKind { ... };
struct Trigger
{
    TriggerKind kind;
    Input input;
    Shape shape;
    EntityHandle source_entity;
    // for type tkChest:
    ItemKind collect_item_kind;
    Item *collect_item;
    // for type tkHazard:
    f32 seconds_to_allow_source_entity;
    AttackFlags attack_flags;
    // can pack the variables associated with
    // types into an union: more compression, but
    // can only access data after type check
};
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;You can also build a tree of Entities and assign certain behaviors only to parts:
&lt;ul&gt;
&lt;li&gt;e.g. PlayerBody -&amp;gt; Hand -&amp;gt; Weapon and only Weapon has &amp;quot;do damage&amp;quot; property, only PlayerBody has &amp;quot;health&amp;quot; and &amp;quot;damage-able&amp;quot; property&lt;/li&gt;
&lt;li&gt;or you can have per component health and the hand can be damaged separately from the body (all with the same system)&lt;/li&gt;
&lt;li&gt;If some data maps to multiple features you can have a combination by having multiple entities (instead of duplicating the data one each entity)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;struct Entity
{
  Entity *first_child;
  Entity *last_child;
  Entity *next;
  Entity *prev;
  Entity *parent;
  // other data ...
};
&lt;/code&gt;&lt;/pre&gt;

            </content>
            <link href="https://janek.ing/code/game-programming/" >
        </entry>
        <entry>
            <title>
                Error handling
                
            </title>
            <updated>2025-05-23T13:07:08.858Z</updated>
            <id>https://janek.ing/code/error-handling/</id>
            <content type="html">
                &lt;ul&gt;
&lt;li&gt;is error recoverable? -&amp;gt; if yes, do it!&lt;/li&gt;
&lt;li&gt;should User know about error? -&amp;gt; return it / display it in the UI (ideally non-modal, but still not easily missable. Only do modal, if error is critical)&lt;/li&gt;
&lt;li&gt;should developer know about error? -&amp;gt; return it / log it&lt;/li&gt;
&lt;li&gt;Handle the error as close to the source as possible. Don&#39;t be lazy and just throw it up. By throwing you will lose context (or you have to go out of your way to include it with custom error types and whatnot) and the less you will be able to handle it or provide a meaningful error message.
&lt;ul&gt;
&lt;li&gt;This is one reason why explicit error handling (e.g. in Go) is superior to implicit error handling (e.g. in Typescript). Sure the Go way is more verbose. You will write a lot of &lt;code&gt;if err != nil&lt;/code&gt;, but the language forces you to think about every error. You will be more inclined to handle it and throwing will happen less involuntarily. In Java you sometimes don&#39;t even realize an error can happen until it is too late.&lt;/li&gt;
&lt;li&gt;And it&#39;s not like you can ignore most errors.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;handle error at correct Level
&lt;ul&gt;
&lt;li&gt;transmission error (e.g. bitflip) -&amp;gt; CRC, not app code&lt;/li&gt;
&lt;li&gt;user input error -&amp;gt; UI (but probably also database)
&lt;ul&gt;
&lt;li&gt;do not change user input on the fly (see &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/design/ui-ux/&quot;&gt;UI - UX&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Think about the harm of silently changing values (i.e. some value is out of bounds -&amp;gt; clamping it)
&lt;ul&gt;
&lt;li&gt;Will the user be confused by the value change?&lt;/li&gt;
&lt;li&gt;Will the change allow the program to continue to function (instead of crashing without the change)?&lt;/li&gt;
&lt;li&gt;This will obfuscate that an error even happened (and probably the source/cause of it) -&amp;gt; probably a good idea to at least log something&lt;/li&gt;
&lt;li&gt;This descision will always be a trade-off&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Provide meaningful error messages (-&amp;gt; &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/design/ui-ux/&quot;&gt;UI - UX&lt;/a&gt;). &amp;quot;Unexpected error&amp;quot; is not helpful for anybody!&lt;/li&gt;
&lt;li&gt;user input
&lt;ul&gt;
&lt;li&gt;always check for plausibility&lt;/li&gt;
&lt;li&gt;never trust anything&lt;/li&gt;
&lt;li&gt;be as permissive as makes sense, if intention of user is clear, e.g.
&lt;ul&gt;
&lt;li&gt;add/remove trailing slashes from paths&lt;/li&gt;
&lt;li&gt;but: do not change integer values out of range. Better to throw error (see above)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/code/error-handling/" >
        </entry>
        <entry>
            <title>
                Data Structures &amp; Algorithms
                
            </title>
            <updated>2025-05-24T11:06:16.203Z</updated>
            <id>https://janek.ing/code/data-structures-and-algorithms/</id>
            <content type="html">
                &lt;h2 id=&quot;hash-tables&quot; tabindex=&quot;-1&quot;&gt;Hash Tables&lt;/h2&gt;
&lt;p&gt;Guide: &lt;a href=&quot;https://benhoyt.com/writings/hash-table-in-c/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;How to implement a hash table (in C) (benhoyt.com)&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create Array of certain size (generally any power of 2)&lt;/li&gt;
&lt;li&gt;Generate Hash from key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hash(key) &amp;amp; (len(array)-1)&lt;/code&gt; -&amp;gt; storage position
&lt;ul&gt;
&lt;li&gt;Modulo would be the general case, but since size is 2&lt;sup&gt;n&lt;/sup&gt; we can use binary-AND which is much faster&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Probe position. If already occupied (collision):
&lt;ul&gt;
&lt;li&gt;Open addressing, linear probing: Add 1 to index and try again (until empty slot found)&lt;/li&gt;
&lt;li&gt;Separate chaining: Store values as linked list of results&lt;/li&gt;
&lt;li&gt;Other methods: &lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_table#Collision_resolution&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hash table - Wikipedia&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Store value as well as hash in the resulting position
&lt;ul&gt;
&lt;li&gt;Hash is needed to resolve collisions&lt;/li&gt;
&lt;li&gt;Some tables put the data separately in a flat array and only store hash+index, this saves space for large data structs&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Lookup is constant (O(1) amortized) as &lt;code&gt;index = hash(key) &amp;amp; (len(array)-1)&lt;/code&gt; + collision resolution&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;Certain details of the general approach listed above can vary in practice (e.g. some tables &lt;a href=&quot;https://facebookincubator.github.io/velox/develop/hash-table.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;have other probing strategies&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Entries of the hash table are usually called &amp;quot;slots&amp;quot;. Some tables allocate multiple slots at once in &amp;quot;buckets&amp;quot; (usually the size of a cache line). Sometimes the words are used interchangeably.&lt;/li&gt;
&lt;li&gt;&amp;quot;Tombstones&amp;quot; are special values often used with open addressing to mark deleted slots (since you cannot mark them as empty, which would break probing chains). They are re-used on insertion and should count towards the load factor.&lt;/li&gt;
&lt;li&gt;For open addressing hash table may never be too full. Usually load factors between 0.5 and 0.9 are used, based on the tables collision resolution technique (0.75 or 0.9 seem common). Else storing and lookups can become really slow (infinite loop when table is 100% full)&lt;/li&gt;
&lt;li&gt;The linked list approach requires extra memory allocations during store and handling a linked list is slower in general (not cache friendly)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://abseil.io/about/design/swisstables&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;High performance tables&lt;/a&gt; use SIMD for probing by storing a small part of the hash in a separate array, skipping to a &amp;quot;general region&amp;quot; of that array with most of the hash bits and then checking multiple slots with SIMD + the remainder of the hash&lt;/li&gt;
&lt;li&gt;Benchmark: &lt;a href=&quot;https://jacksonallan.github.io/c_cpp_hash_tables_benchmark/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;An Extensive Benchmark of C and C++ Hash Tables | A comparative, extendible benchmarking suite for C and C++ hash-table libraries.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implementation with detailed explanation: &lt;a href=&quot;https://craftinginterpreters.com/hash-tables.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Hash Tables · Crafting Interpreters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;linked-list-vs-array&quot; tabindex=&quot;-1&quot;&gt;Linked List vs Array&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://baptiste-wicht.com/posts/2012/11/cpp-benchmark-vector-vs-list.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;C++ benchmark - std::vector VS std::list | Blog blog(&amp;quot;Baptiste Wicht&amp;quot;); (baptiste-wicht.com)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rfleury.com/p/in-defense-of-linked-lists&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.rfleury.com/p/in-defense-of-linked-lists&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;!&lt;a class=&quot;internal-link is-unresolved&quot; href=&quot;https://janek.ing/404&quot; target=&quot;&quot;&gt;memory-layout.mp4&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;sorting&quot; tabindex=&quot;-1&quot;&gt;Sorting&lt;/h2&gt;
&lt;p&gt;Vergleich mit Animation: &lt;a href=&quot;https://www.toptal.com/developers/sorting-algorithms&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Sorting Algorithms Animations | Toptal®&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;insertion-sort&quot; tabindex=&quot;-1&quot;&gt;Insertion Sort&lt;/h3&gt;
&lt;p&gt;Einer der besten Algorithmen, wenn Liste bereits fast sortiert ist. Ebenfalls gut, wenn Datenmenge klein ist. Wird daher oft in anderen Algorithmen verwendet, wenn Liste in kleinere Stücke geteilt wurde.&lt;br /&gt;
Nicht gut geeignet wenn Liste invertiert ist.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i ← 1
while i &amp;lt; length(A)
    x ← A[i]
    j ← i
    while j &amp;gt; 0 and A[j-1] &amp;gt; x
        A[j] ← A[j-1]
        j ← j - 1
    end while
    A[j] ← x
    i ← i + 1
end while
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;quicksort&quot; tabindex=&quot;-1&quot;&gt;Quicksort&lt;/h3&gt;
&lt;p&gt;Gut bei großen Datenmengen.&lt;br /&gt;
Sehr gut wenn Liste invertiert ist.&lt;br /&gt;
Nicht so gut wenn Liste bereits fast sortiert ist.&lt;br /&gt;
Grundsätzlich für die meisten Anwendungen gut geeignet.&lt;br /&gt;
&amp;quot;in memory&amp;quot; sort, braucht keinen zusätzlichen Speicher (außer eine handvoll temporäre Variablen für Wertetausch, Pivot, Iteratoren).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Sorts a (portion of an) array, divides it into partitions, then sorts those
algorithm quicksort(A, lo, hi) is 
  if lo &amp;gt;= 0 &amp;amp;&amp;amp; hi &amp;gt;= 0 &amp;amp;&amp;amp; lo &amp;lt; hi then
    p := partition(A, lo, hi) 
    quicksort(A, lo, p) // Note: the pivot is now included
    quicksort(A, p + 1, hi) 

// Divides array into two partitions
algorithm partition(A, lo, hi) is 
  // Pivot value
  pivot := A[lo] // Choose the first element as the pivot

  // Left index
  i := lo - 1 

  // Right index
  j := hi + 1

  loop forever 
    // Move the left index to the right at least once and while the element at
    // the left index is less than the pivot
    do i := i + 1 while A[i] &amp;lt; pivot
    
    // Move the right index to the left at least once and while the element at
    // the right index is greater than the pivot
    do j := j - 1 while A[j] &amp;gt; pivot

    // If the indices crossed, return
    if i &amp;gt;= j then return j
    
    // Swap the elements at the left and right indices
    swap A[i] with A[j]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In C:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void qsort( void* ptr, size_t count, size_t size,
            int (*comp)(const void*, const void*) );

// ptr - start of array
// count elements of size bytes each
// comp - comparison function (returns -1 if first arg is &amp;lt; second arg, 1 if &amp;gt; and 0 if equal)

// Is not guaranteed to use quicksort, some implementations use insertion sort for small arrays or merge sort
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;stl::sort vs qsort: &lt;a href=&quot;https://www.geeksforgeeks.org/c-qsort-vs-c-sort/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;C qsort() vs C++ sort() - GeeksforGeeks&lt;/a&gt;, &lt;a href=&quot;https://travisdowns.github.io/blog/2019/05/22/sorting.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Beating Up on Qsort | Performance Matters&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stl::sort is faster because the compiler can inline the comparison code generated by the templates&lt;/li&gt;
&lt;li&gt;qsort on the other hand relies on indirect function pointers, which are opaque for compilers&lt;/li&gt;
&lt;li&gt;qsort can be made faster by copying implementation and inlining comparator&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;radix-sort&quot; tabindex=&quot;-1&quot;&gt;Radix Sort&lt;/h3&gt;
&lt;p&gt;Super fast, but only for integers: &lt;a href=&quot;https://travisdowns.github.io/blog/2019/05/22/sorting.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Beating Up on Qsort | Performance Matters&lt;/a&gt;&lt;br /&gt;
Directly sorts numbers into their final buckets by comparing them &amp;quot;digit by digit&amp;quot; basically (usually base-256 is used instead of base-10).&lt;br /&gt;
Needs additional memory for the buckets (which can slow it down, if not properly optimized).&lt;br /&gt;
Time complexity is O(n) instead of O(n*log(n)) for most other sorting algorithms.&lt;br /&gt;
Also needs special attention if negative numbers are involved (additional sort on the sign bit).&lt;/p&gt;
&lt;h2 id=&quot;quadtrees-and-grids&quot; tabindex=&quot;-1&quot;&gt;Quadtrees and Grids&lt;/h2&gt;
&lt;p&gt;Great set of posts:&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/41946007/efficient-and-well-explained-implementation-of-a-quadtree-for-2d-collision-det&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;data structures - Efficient (and well explained) implementation of a Quadtree for 2D collision detection - Stack Overflow&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/59795569/what-is-a-coarse-and-fine-grid-search&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;performance - What is a coarse and fine grid search? - Stack Overflow&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/code/data-structures-and-algorithms/" >
        </entry>
        <entry>
            <title>
                Collision Detection
                
            </title>
            <updated>2025-05-23T13:06:13.098Z</updated>
            <id>https://janek.ing/code/collision-detection/</id>
            <content type="html">
                &lt;p&gt;Bestes Buch zum Thema: Real Time Collision Detection von Christer Ericson&lt;/p&gt;
&lt;h2 id=&quot;broad-phase-vs-narrow-phase&quot; tabindex=&quot;-1&quot;&gt;Broad-Phase vs. Narrow-Phase&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Ersteres für grobe Paarbildung von kollidierenden Objekten. Schnell, aber ungenau.&lt;/li&gt;
&lt;li&gt;Letzteres für genaue Berechnung der Kollision und notwendigen Daten zur Auflösung/Vermeidung der Kollision&lt;/li&gt;
&lt;li&gt;Zuerst wird Broad-Phase durchgeführt, um die Anzahl an Paaren zu reduzieren, dann Narrow-Phase auf die verbleibenden Paare&lt;/li&gt;
&lt;li&gt;Algorithmen
&lt;ul&gt;
&lt;li&gt;Broad-Phase
&lt;ul&gt;
&lt;li&gt;Sweep and Prune&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Narrow Phase
&lt;ul&gt;
&lt;li&gt;AABB&lt;/li&gt;
&lt;li&gt;Separating Axis Theorem&lt;/li&gt;
&lt;li&gt;GJK&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;sweep-and-prune&quot; tabindex=&quot;-1&quot;&gt;Sweep and Prune&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Sortieren der Objekte auf einer (oder mehreren) Achsen&lt;/li&gt;
&lt;li&gt;Wenn eine Achse: Ermöglicht frühen Abbruch des n × m Loops zum Testen auf Kollision, da A &amp;lt; C wenn A &amp;lt; B und B &amp;lt; C&lt;/li&gt;
&lt;li&gt;Bei mehreren Achsen: Ermöglicht groben boolschen Test auf Kollision: &lt;a href=&quot;https://www.youtube.com/watch?v=E-cQaDnapjo&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=E-cQaDnapjo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Es wird ausgenutzt, dass sich die Objekte pro Zeitstep kaum bewegen, daher behält man die sortierten Listen bei und nutzt bspw. Insertion Sort (sehr effizient bei bereits fast sortierten Listen), anstatt die Liste immer neu zu erstellen&lt;/li&gt;
&lt;li&gt;Meist wird (implizit) die AABB-Hülle eines komplexeren Körpers für das Sortieren genutzt&lt;/li&gt;
&lt;li&gt;Buch: Kapitel 7.5, S. 329&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanrada.com/notes/sweep-and-prune/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://leanrada.com/notes/sweep-and-prune/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Sweep_and_prune&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Wikipedia&lt;/a&gt; (nicht wirklich verständlich imo)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;separating-axis-theorem-sat&quot; tabindex=&quot;-1&quot;&gt;Separating Axis Theorem (SAT)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Guter Algorithmus für 2D&lt;/li&gt;
&lt;li&gt;Funktioniert mit Kreisen und konvexen Polygonen
&lt;ul&gt;
&lt;li&gt;konkave Polygone müssen in mehrere konvexe geteilt werden&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Liefert boolsches Ergebnis oder (mit etwas mehr Aufwand) Vektor und Schnitttiefe zurück&lt;/li&gt;
&lt;li&gt;Prüft, ob es auf einer Achse der Körper einen Spalt gibt&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=Zgf1DYrmSnk&amp;amp;list=PLSlpr6o9vURwq3oxVZSimY8iC-cdd3kIs&amp;amp;index=6&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Separating Axis Theorem (SAT) - Let&#39;s Make a Physics Engine 05 - YouTube&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;gilbert-johnson-keerthi-gjk&quot; tabindex=&quot;-1&quot;&gt;Gilbert–Johnson–Keerthi (GJK)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Schneller als SAT&lt;/li&gt;
&lt;li&gt;Funktioniert im n-dimensionalen Raum mit konvexen Objekten jeder Art&lt;/li&gt;
&lt;li&gt;Liefert nur boolsches Ergebnis&lt;/li&gt;
&lt;li&gt;Lässt sich gut für unterschiedliche Typen von Körpern abstrahieren, da die Form nur einen Schritt des Algorithmus beeinflusst&lt;/li&gt;
&lt;li&gt;Prüft ob die Differenz der Körper den Nullpunkt einschließt&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://caseymuratori.com/blog_0003&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://caseymuratori.com/blog_0003&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/code/collision-detection/" >
        </entry>
        <entry>
            <title>
                Architecture
                
            </title>
            <updated>2025-06-16T12:36:10.402Z</updated>
            <id>https://janek.ing/code/architecture/</id>
            <content type="html">
                &lt;h2 id=&quot;golden-rules&quot; tabindex=&quot;-1&quot;&gt;Golden Rules&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Fight abstractions&lt;/li&gt;
&lt;li&gt;Understand the domain&lt;/li&gt;
&lt;li&gt;Follow Standards&lt;/li&gt;
&lt;li&gt;Know your Tech&lt;/li&gt;
&lt;li&gt;Refactor with caution&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Quelle: &lt;a href=&quot;https://youtu.be/NiljDyzAOcI?feature=shared&amp;amp;t=773&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/NiljDyzAOcI?feature=shared&amp;amp;t=773&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eigener Ansatz:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Prototyp bauen (max. 1-3 Monate) mit Fokus auf bekannte Anforderungen und Funktionen (nicht zu weit in die Zukunft schauen, zu viele Dinge annehmen. Abstraktionen minimal halten!)&lt;/li&gt;
&lt;li&gt;Währenddessen: Requirements und Annahmen prüfen und anpassen&lt;/li&gt;
&lt;li&gt;Prototyp wegwerfen&lt;/li&gt;
&lt;li&gt;Software komplett neu schreiben (mit Learnings aus Prototyp)&lt;/li&gt;
&lt;li&gt;Alle 2-3 Jahre (sofern aktiv an Software gearbeitet wird und sich Anforderungen ändern/hinzukommen): Technisches Brainstorming mit Senior Ingenieuren &amp;quot;Greenfield Ansatz: Wie würden wir die Software nach heutigem Stand bauen&amp;quot; -&amp;gt; Mit Realität abgleichen und ggf. Refactoring einleiten&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;separation-of-concerns-vs-locality-of-behavior&quot; tabindex=&quot;-1&quot;&gt;Separation of Concerns VS Locality of Behavior&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SoC: Trennung von Styling/Modell und Logik/Controller&lt;/li&gt;
&lt;li&gt;LoB: alle Teile von einem Element/Feature an einem Platz&lt;/li&gt;
&lt;li&gt;pro SoC: kein Mix von Arbeit aus unterschiedlichen Domänen (zb Backend und Frontend)&lt;/li&gt;
&lt;li&gt;pro LoB: alle Infos an einem Platz, einfacher in Gänze zu verstehen und zu debuggen&lt;/li&gt;
&lt;li&gt;ich bin pro LoB in vielen Fällen&lt;/li&gt;
&lt;li&gt;ich hasse code (meist oop im Endstadium) der eigentlich nichts macht, aber auf 100 dateien verteilt ist (Beispiel th-drivers-sdk, &lt;a href=&quot;https://qntm.org/clean&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Clean-Code&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=IqHaGd9J42s&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Video&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/LriHRa9t1fQ?feature=shared&amp;amp;t=2803&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/LriHRa9t1fQ?feature=shared&amp;amp;t=2803&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://htmx.org/essays/locality-of-behaviour/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://htmx.org/essays/locality-of-behaviour/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;globaler-state-nebeneffekte&quot; tabindex=&quot;-1&quot;&gt;Globaler State / Nebeneffekte&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Funktionen mit Nebeneffekten sind oft eine Quelle von Bugs und Komplexität
&lt;ul&gt;
&lt;li&gt;state changes werden dadurch verdeckt und lassen sich schlecht nachvollziehen (wann wird welche variable verändert? Welche Funktionen lesen nur, welche schreiben?)&lt;/li&gt;
&lt;li&gt;Zustand der Applikation zu einem bestimmten Zeitpunkt wird unklarer (man muss sich mehr darum kümmern, dass ein sauberer init und cleanup des shared state passiert)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;State eines Programms zu verstehen, ist essentiell um das Programm an sich zu verstehen -&amp;gt; Zentraler Punkt in Architektur
&lt;ul&gt;
&lt;li&gt;Veränderungen des States müssen sichtbar und vorhersehbar sein&lt;/li&gt;
&lt;li&gt;State in einem struct bündeln hilft&lt;/li&gt;
&lt;li&gt;Globaler State und Nebeneffekte sind problematisch&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Küchen Analogie: mehl bleibt an messbecher hängen und fällt einem entgegen wenn man Messbecher aus dem Schrank nimmt. Abhängigkeiten müssen immer im kopf behalten werden. Erzeugen Overhead oder probleme wenn man sie nicht bedenkt. Besser: Mehl und Messbecher können unabhängig voneinander entnommen werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;duplikation-von-funktionalitaet&quot; tabindex=&quot;-1&quot;&gt;Duplikation von Funktionalität&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Duplikation von Funktionalität (bspw. In backend und Frontend) ist quelle für bugs
&lt;ul&gt;
&lt;li&gt;alle solche Quellen müssen synhron gehalten werden&lt;/li&gt;
&lt;li&gt;bei einer Änderung des Datenformats müssen alle quellen verändert werden&lt;/li&gt;
&lt;li&gt;kein single source of truth&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;kiss-abstraktionen&quot; tabindex=&quot;-1&quot;&gt;KISS / Abstraktionen&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;All Problems in computer science can be solved by another level of indirection, except for the problem of too many layers of indirection.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;David Wheeler&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nitter.net/transmutrix/status/1750563200708309466#m&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://nitter.net/transmutrix/status/1750563200708309466#m&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Nicht mit Abstraktionen starten&lt;/li&gt;
&lt;li&gt;Wenn man nicht die einfachste single-file-procedural Lösung schreiben kann, wird man auch an der abstrahierten, generischen Lösung scheitern.&lt;/li&gt;
&lt;li&gt;Mit der konkreten Lösung des Problems anfangen und von dort aus weiter arbeiten.&lt;/li&gt;
&lt;li&gt;Die Ideen, welche Systeme man überhaupt braucht und welche Probleme man lösen will, kommen erst mit der Zeit, die man sich praktisch damit beschäftigt und Sachen umsetzt (nicht alleine mit dem theoretischen Gedanken darüber). Also einfach loslegen!&lt;/li&gt;
&lt;li&gt;&amp;quot;Some people are paralyzed by fear of being &amp;quot;wrong&amp;quot;—which is poison if you want to do anything creative which requires iterative refinement&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Abstraction has value after you have a strong hold on what you need and want to do, not before. Students would often fall into this trap, trying to solve &amp;quot;I don&#39;t know how to make noodles&amp;quot; by attempting to build a noodle factory. It doesn&#39;t work that way&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Understanding why you might want some abstraction is required to reap its benefits&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;Structure comes from doing the concrete, then noticing patterns and generalizing. Only w/ exp can you jump right to abstractions&amp;quot;&lt;/li&gt;
&lt;li&gt;MVP!&lt;/li&gt;
&lt;li&gt;Code, den man wie eine Zeitung lesen kann, ist viel einfacher zu verstehen, als Code der über mehrere Dateien wild umher springt&lt;/li&gt;
&lt;li&gt;nur so viele abstraktionslayer wie notwenig, so wenig wie möglich
&lt;ul&gt;
&lt;li&gt;jeder layer ermöglicht ggf eine effizientere arbeit&lt;/li&gt;
&lt;li&gt;gleichzeitig ist jeder layer Quelle für bugs&lt;/li&gt;
&lt;li&gt;jeder layer verschlechtert Performance&lt;/li&gt;
&lt;li&gt;closed source layer (oder generell code den man nicht kennt) muss blind vertraut werden. Bugs in diesem layer zu debuggen wird nahezu unmöglich und extrem viel zeit in Anspruch nehmen. Die Quelle eines neuen Bugs ist immer unklar! Sie könnte in einem dieser layer sein!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;quot;Expect the unexpected&amp;quot; -&amp;gt; Abstraktionen eigenen sich nur begrenzt dafür, den Code agil zu halten. Per Definition wird man immer mal wieder falsch liegen und hat dann die falsche Abstraktion gebaut, da die gewünschte Änderung unerwartet war. Dann ist &amp;quot;einfacher&amp;quot;, linearer Code schneller geändert, als eine Abstraktionsebene umgeschrieben.
&lt;ul&gt;
&lt;li&gt;Lieber mit den Domäne-Experten reden und das Problem richtig verstehen. Dann PoC bauen, Feedback einholen.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/NiljDyzAOcI?feature=shared&amp;amp;t=766&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/NiljDyzAOcI?feature=shared&amp;amp;t=766&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://grugbrain.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://grugbrain.dev/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&amp;quot;grug know cut point when grug see cut point, just take time to build skill in seeing, patience&amp;quot;&lt;/li&gt;
&lt;li&gt;Splitten von Code in mehrere Strukturen produziert in den meisten Fällen (Ausnahme: SOA vs AOS) keinen besseren Code für den Computer. Es ist eine Methode, um Bugs wie &amp;quot;Zugriff auf die falschen Daten&amp;quot; zur Compile-Time abzufangen. Wenn man nicht um diese Bugs besorgt ist und man im Anwendungscode diszipliniert ist diese zu verhindern, sollte man keine Abstraktionen einbauen. Jede Abstraktion, jedes Splitten erzeugt zusätzlichen Overhead, da die Schnittstellen synchron gehalten werden müssen, man zum Verständnis des Codes zwischen mehr Stellen springen muss, etc.
&lt;ul&gt;
&lt;li&gt;Man sollte einen guten Grund für jede Abstraktion/Separation von Code oder Daten haben (z.B. um mentalen Overhead reduzieren, wenn gut gekapselte Systeme wie Datenbank, Webserver-Requests, etc. abgespalten werden - oder um typische Bugs zu verhindern). Immer hinterfragen: Warum brauche ich die Abstraktion? Am besten sollte dieser Grund dann auch dokumentiert werden.&lt;/li&gt;
&lt;li&gt;Man kann nur selbst bewerten, ob sich der zeitliche Aufwand für eine Abstraktion durch Einsparungen an anderer Stelle auszahlt.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=3012&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=3012&lt;/a&gt; (bis ca. 1:00:00)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Immer mit möglichst wenig Abstraktion und Separation starten und Grenzen später einziehen. Es ist immer einfacher eine Abstraktion aufzubauen, als eine bereits genutzte wieder abzubauen. Dies betrifft insbesondere unerforschte Bereiche des Problems. Annahmen müssen erst validiert und Entscheidungen gff. revidiert werden. Daher nicht zu viel am Anfang starr designen (außer man weiß, was man tut und hat es schon 100x gemacht).
&lt;ul&gt;
&lt;li&gt;PoC Phase zum Lernen des Problems und dann rückwärts überlegen, welche Struktur angemessen ist, ist besser als anders herum.&lt;/li&gt;
&lt;li&gt;PoC muss so einfach und schnell wie möglich iteriert werden können.&lt;/li&gt;
&lt;li&gt;zu viel Struktur am Anfang schränkt Lösungsraum unnötig ein&lt;/li&gt;
&lt;li&gt;Go saying: dont opt into an interface, refactor to an interface&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Küchen Analogie: gestapelte Töpfe. Man muss immer alle Töpfe entnehmen, um an den untersten zu kommen. Zusätzlicher Aufwand für Kapselung.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;dry-vs-inline-code&quot; tabindex=&quot;-1&quot;&gt;DRY vs inline code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Don&#39;t DRY: Zu kurze Funktionen, die nur andere Funktionen aufrufen, die nur wieder eine andere Funktion aufrufen sind so schwierig nachzuvollziehen, weil man Kontext im Kopf aufbauen muss und viel hin- und herspringt. Eine größere Funktion, die die gesamte Arbeit erledigt, ist auf einen Blick zu erfassen oder lässt sich zumindest wie eine Zeitung von oben nach unten lesen.&lt;/li&gt;
&lt;li&gt;Martin Fowler: Refactor wenn man sich 3x wiederholt&lt;/li&gt;
&lt;li&gt;Small Focused Functions that don&#39;t do anything meaningful -&amp;gt; man muss zu viel im Code springen, um zu verstehen, was er macht. Context fehlt.&lt;/li&gt;
&lt;li&gt;Every function should do something &lt;strong&gt;meaningful&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Idee: Code sollte im Stile einer StackOverflow Antwort geschrieben sein. Macht etwas sinnvolles und beinhaltet allen notwendigen Kontext. (&lt;a href=&quot;https://youtu.be/NiljDyzAOcI?feature=shared&amp;amp;t=1150&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/NiljDyzAOcI?feature=shared&amp;amp;t=1150&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://htmx.org/essays/codin-dirty/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://htmx.org/essays/codin-dirty/&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=hQJcGmWXDJw&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=hQJcGmWXDJw&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is no correlation between small functions and amount of bugs (no real empirical evidence)&lt;/li&gt;
&lt;li&gt;Too many classes = too much clutter, too confusing, not coherent (same with too many small functions)&lt;/li&gt;
&lt;li&gt;Long functions have the advantage of being visible. All long functions are important and do something meaningful. The result of a lot of small functions that call each other is not immediately apparent and can hide complex operations.&lt;/li&gt;
&lt;li&gt;Many big successful projects (Chrome, Redis, etc.) have lots of long functions (100+ lines)&lt;/li&gt;
&lt;li&gt;Function length should be determined by what the function does and not be an independent metric that drives code architecture.&lt;/li&gt;
&lt;li&gt;Small functions complicate the call graph, because they (theoretically) can each be called independently. Without a debugger or an IDE it is very hard to detect who calls who in which order.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://sandimetz.com/blog/2016/1/20/the-wrong-abstraction&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Abstraktion wird eingeführt, um gleiche Funktion perfekt zu bündeln&lt;/li&gt;
&lt;li&gt;Neue Anforderung passt nur zu 90% in dieses Konzept&lt;/li&gt;
&lt;li&gt;Falsch: Anpassen der Abstraktion (mit zusätzlichen Parametern, if/else, etc.). -&amp;gt; wird noch mehrere Male wiederholt und führt zu versteckter Komplexität und unklarem Code mit Überraschungen&lt;/li&gt;
&lt;li&gt;Besser: Abstraktion rückgängig machen (code inline kopieren), notwendige Änderungen für neue Funktion durchführen, anschließend schauen, ob neue Abstraktion abgeleitet werden kann. -&amp;gt; sauber und nachhaltig&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;https://web.archive.org/web/20241125111520/https://number-none.com/blow/blog/programming/2014/09/26/carmack-on-inlined-code.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;John Carmack on Inlined Code&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If a function is only called from a single place, consider inlining it.&lt;/p&gt;
&lt;p&gt;If a function is called from multiple places, see if it is possible to arrange for the work to be done in a single place, perhaps with flags, and inline that.&lt;/p&gt;
&lt;p&gt;If there are multiple versions of a function, consider making a single function with more, possibly defaulted, parameters.&lt;/p&gt;
&lt;p&gt;If the work is close to purely functional, with few references to global state, try to make it completely functional.&lt;/p&gt;
&lt;p&gt;Try to use const on both parameters and functions when the function really must be used in multiple places.&lt;/p&gt;
&lt;p&gt;Minimize control flow complexity and “area under ifs”, favoring consistent execution paths and times over “optimally” avoiding unnecessary work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;api-design&quot; tabindex=&quot;-1&quot;&gt;API Design&lt;/h2&gt;
&lt;p&gt;Immer den Anwendungscode zuerst schreiben oder zumindest ein Mock-Up davon. Dies offenbart die notwendigen API Funktionen, ihre Parameter, Call-Order, etc.&lt;br /&gt;
Erst anschließend die Implementierung dieser Funktionen schreiben.&lt;br /&gt;
-&amp;gt; Empfehlung von Casey Muratori&lt;br /&gt;
&lt;a href=&quot;https://caseymuratori.com/blog_0024&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://caseymuratori.com/blog_0024&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Keine globalen Variablen in Library (mutable global state) -&amp;gt; nicht thread-safe und re-entrant.&lt;br /&gt;
Besser: Kontext struct anlegen, welcher der API mitgegeben wird und von ihr mit dem aktuellen Zustand beschrieben wird.&lt;br /&gt;
Bei Callbacks: Thread Local Storage benutzen&lt;br /&gt;
&lt;a href=&quot;https://nullprogram.com/blog/2014/10/12/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Global State: a Tale of Two Bad C APIs (nullprogram.com)&lt;/a&gt;&lt;br /&gt;
siehe auch (als ein Ansatz in C): &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/langauges/c/#opaque-struct&quot;&gt;C#Opaque struct&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Konstanten immer public definieren (entweder als enum oder define). -&amp;gt; Keine magic values im user-code. Macht Code deutlich lesbarer und durchsuchbarer (Konstanten findet man einfach, eine &amp;quot;1&amp;quot; ist nicht eindeutig identifizierbar). Kann einfach geändert und erweitert werden ohne, dass user-code vorm nächsten Kompilieren geändert werden muss.&lt;br /&gt;
&lt;a href=&quot;https://caseymuratori.com/blog_0025&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://caseymuratori.com/blog_0025&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;(CLI) Tools sollten mit Input aus Datei oder stdin gleich funktionieren. So kann man sie einfacher in eine Pipeline integrieren. Auch das Testen wird einfacher.&lt;br /&gt;
&lt;a href=&quot;https://youtu.be/isI1c0eGSZ0?feature=shared&amp;amp;t=300&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/isI1c0eGSZ0?feature=shared&amp;amp;t=300&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;malloc()-Calls in Library vermeiden. Besser: Memory-Allokation vom Benutzer erledigen lassen. Dann kann der Anwender auswählen, ob er auf dem Stack oder Heap allokieren will oder sogar einen eigenen Allocator benutzen.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;prepped_alloc PrepThingeeForAlloc(parameters)
{
    prepped_alloc Prep = BeginAllocPrep();
    //... bunch of macro calls here that describe all the allocations
    //... and their internal pointers to itself
    EndAllocPrep(Prep);
}

size_t GetSizeForThingee(parameters)
{
    prepped_alloc Prep = PrepThingeeForAlloc(parameters);
    size_t Result = GetSize(Prep);
    return(Result);
}

thingee *CreateThingee(void *Memory, parameters)
{
    prepped_alloc Prep = PrepThingeeForAlloc(parameters);
    thingee *Result = (thingee *)PlaceAlloc(Prep, Memory);
    return(Result);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;a href=&quot;https://hero.handmade.network/forums/code-discussion/t/763-stack_persistence_vs._api_simplicity#4335&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://hero.handmade.network/forums/code-discussion/t/763-stack_persistence_vs._api_simplicity#4335&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://stackoverflow.com/questions/59547761/should-functions-that-create-structs-return-the-struct-or-a-pointer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://stackoverflow.com/questions/59547761/should-functions-that-create-structs-return-the-struct-or-a-pointer&lt;/a&gt;&lt;br /&gt;
Kleine Strukturen können auch direkt auf dem Stack erzeugt werden und als struct (nicht als Pointer) zurückgegeben werden.&lt;br /&gt;
siehe auch: &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/stack-vs-heap/&quot;&gt;Stack vs. Heap&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;premature-optimization&quot; tabindex=&quot;-1&quot;&gt;Premature Optimization&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;The full version of the quote is &amp;quot;We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil.&amp;quot; and I agree with this. Its usually not worth spending a lot of time micro-optimizing code [i.e. counting cycles] before its obvious where the performance bottlenecks are. But, conversely, when designing software at a system level, performance issues should always be considered from the beginning. A good software developer will do this automatically, having developed a feel for where performance issues will cause problems. An inexperienced developer will not bother, misguidedly believing that a bit of fine tuning at a later stage will fix any problems.&lt;br /&gt;
-- Charles Cook&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Observation #6: Software engineers have been led to believe that their time is more valuable than CPU time; therefore, wasting CPU cycles in order to reduce development time is always a win. They&#39;ve forgotten, however, that the application users&#39; time is more valuable than their time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Quelle: &lt;a href=&quot;https://ubiquity.acm.org/article.cfm?id=1513451&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;The Fallacy of Premature Optimization (acm.org)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Performance lässt sich nicht magisch am Ende der Entwicklung herbeiführen. Insbesondere bei komplexen Systemen sind die Bottlenecks über das System verteilt, voneinander abhängig und bedingen Änderungen an der Architektur, welche am Ende sehr kostspielig und aufwendig sind.&lt;br /&gt;
Cmuratori zu diesem Thema: &lt;a href=&quot;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=5359&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://youtu.be/drCnFueS4og?feature=shared&amp;amp;t=5359&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;parallelisierung&quot; tabindex=&quot;-1&quot;&gt;Parallelisierung&lt;/h2&gt;
&lt;p&gt;Mutex / Semaphore vermeiden! Insbesondere bei steigender Komplexität (und vielen Locks) kann nicht mehr gut abgeschätzt werden, wie häufig Threads in Mutex-locks laufen und wie viel wirklich parallel gearbeitet wird.&lt;br /&gt;
Besser: API Design, welche unabhängig von Parallelität ist. Beispiel: Schreiben einer Datei in parallelen chunks: Anstatt fertige Chunks in Array zu pushen oder in Datei zu schreiben (POSIX write(), Reihenfolge abhängig von Parallelität) -&amp;gt; Thread mit offset Parameter starten und fertige Chunks mit Offset in bereits allokierten Speicher oder Datei schreiben (POSIX pwrite(), Reihenfolge unabhängig von Zeitpunkt der Fertigstellung)&lt;/p&gt;
&lt;p&gt;Quelle: &lt;a href=&quot;https://nullprogram.com/blog/2017/03/01/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;OpenMP and pwrite() (nullprogram.com)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;protobufs-daten-zwischen-services-mit-typeninformationen-teilen&quot; tabindex=&quot;-1&quot;&gt;Protobufs: Daten zwischen Services mit Typeninformationen teilen&lt;/h2&gt;
&lt;p&gt;-&amp;gt; Protobufs &lt;a href=&quot;https://protobuf.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Protocol Buffers Documentation (protobuf.dev)&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;binaerdaten&quot; tabindex=&quot;-1&quot;&gt;Binärdaten&lt;/h2&gt;
&lt;p&gt;Step 1: Platz für Versionsfeld reservieren&lt;br /&gt;
Dies gilt für alle Binärdaten, eigene Datenformate oder Protokolle (Learning von: Savegame in diversen Spielen, Goodnightlamp Update Protokoll)&lt;/p&gt;
&lt;h2 id=&quot;funktionen&quot; tabindex=&quot;-1&quot;&gt;Funktionen&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;wenn user input verwertet wird: so permissive wie möglich/notwendig. Zudem alles auf Plausibilität prüfen
&lt;ul&gt;
&lt;li&gt;ist integer im erlaubten bereich?&lt;/li&gt;
&lt;li&gt;ist integer überhaupt ein integer (wenn String konvertieren wird)&lt;/li&gt;
&lt;li&gt;hat pfad ein trailing /&lt;/li&gt;
&lt;li&gt;hat Dateiname eine typendung&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;ansonsten: so annehmen wie übergeben (möglichst wenig error handling)
&lt;ul&gt;
&lt;li&gt;caller ist für Input verantwortlich, Funktion für Output&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;oop-vs-data-oriented&quot; tabindex=&quot;-1&quot;&gt;OOP vs Data-Oriented&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;v-tables und dynamic memory allocation machen das Programm langsamer, weil Objekte im Speicher verteilt liegen und viele cache misses erzeugen: &lt;a href=&quot;https://x.com/ryanjfleury/status/1672722010399703041&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Ryan Fleury auf X: „This illustrates why it has been helpful to me to eliminate v-tables and sum-types almost everywhere. It isn’t just about performance—it’s about strong predictive power over code, staying organized, non-pessimization, and architecture which is ready to optimize later if needed.“ / X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;!&lt;a class=&quot;internal-link is-unresolved&quot; href=&quot;https://janek.ing/404&quot; target=&quot;&quot;&gt;memory-layout.mp4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;V-Tables sind &amp;quot;&lt;a href=&quot;https://en.wikipedia.org/wiki/Function_pointer&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;indirected function pointers&lt;/a&gt;&amp;quot; und stellen eine harte Grenze für den Compiler dar. Switch statements können hingegen deutlich besser optimiert werden -&amp;gt; &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/stack-vs-heap/&quot;&gt;Stack vs. Heap&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/unclebob/cmuratori-discussion/blob/main/cleancodeqa.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;cmuratori-discussion/cleancodeqa.md at main · unclebob/cmuratori-discussion&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://github.com/unclebob/cmuratori-discussion/blob/main/cleancodeqa-2.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;cmuratori-discussion/cleancodeqa-2.md at main · unclebob/cmuratori-discussion&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.rfleury.com/p/programmers-are-users-bad-performance&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.rfleury.com/p/programmers-are-users-bad-performance&lt;/a&gt;&lt;br /&gt;
OOP Ansatz:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;quot;raw_device.h&amp;quot;
class new_device : public raw_device {
public: 
	virtual file* open(char* name);
	virtual void close(file* f);
	virtual void read(file* f, size_t n, char* buf);
	virtual void write(file* f, size_t n, char* buf);
	virtual void seek(file* f, int n);
	virtual void get_name();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Data-oriented Ansatz (Typenimplementierung siehe 2. Link oben):&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;void raw_device::Handler(raw_device_request *Packet, raw_device_result *Result)
{
	switch(Packet-&amp;gt;Op)
	{
		case RIO_read:
		// etc.
		
		case RIO_write:
		// etc.
		
		case RIO_get_name:
		// etc.
		
		default:
		// write error Result
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Vorteile des &amp;quot;Data-oriented Ansatzes&amp;quot;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requests/Calls/Aufgaben können gepuffert werden (einfach Packet in einen Array packen und später abarbeiten). Dies erlaubt auch einfacheres Multi-threading -&amp;gt; Soll dies für den OOP-Ansatz implementiert werden, schreibt man meist den Data-oriented Code um den OOP-Code (implementiert letztendlich beide Lösungen)&lt;/li&gt;
&lt;li&gt;Rückwärts-Kompatibilität: Wenn eine neue Funktion eingeführt wird, können alte Treiber einfach weiter funktionieren. Sie ignorieren den Op-Code (default im switch), während neue Geräte diesen implementieren. -&amp;gt; beim OOP-Code muss die Parent-Class und damit alle Children angepasst werden&lt;/li&gt;
&lt;li&gt;Private Op-Codes, die nur von einzelnen Geräten implementiert werden sind trivial möglich.&lt;/li&gt;
&lt;li&gt;Keine V-Tables notwendig (schnellere Funktionsaufrufe, bessere Optimierbarkeit)&lt;/li&gt;
&lt;li&gt;Interne Struktur der structs und Funktionen kann sich komplett ändern. Solange die API gleich bleibt, ist user-code davon nicht betroffen. Noch besser (in C): wenn man pointer zu &lt;a class=&quot;internal-link&quot; target=&quot;&quot; data-note-icon=&quot;&quot; href=&quot;https://janek.ing/code/langauges/c/#opaque-struct&quot;&gt;C#Opaque struct&lt;/a&gt; an Funktion übergibt könnte man dies später sogar soweit ändern, dass pointer eigentlich ein index in einen internen cache ist.&lt;/li&gt;
&lt;li&gt;Ziel: den Pfad der Implementierung klein halten (Anzahl an Funktionen / Interfaces), bis man zur eigentlichen Implementierung kommt. Insbesondere wenn Daten/Funktionsaufrufe durch mehrere Stellen gehen und weitergegeben werden.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;OOP
f1 call ------ f1 handler ------ f1 code
f2      ------ f2         ------ f2
f3      ------ f3         ------ f3
Data oriented
f1 call &#92;                       / f1 code
f2      ------ fx handler ------- f2 code
f3      /                       &#92; f3 code
-&amp;gt; the more handler/passthrough layers you have, the more code you have to write/maintin in the OOP case
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;DO NOT DO:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;#include &amp;quot;devids.h&amp;quot;
#include &amp;quot;console.h&amp;quot;
#include &amp;quot;paper_tape.h&amp;quot;
#include &amp;quot;...&amp;quot;
#include &amp;quot;...&amp;quot;
void read(file* f, char* buf, int n) {
	switch(f-&amp;gt;id) {
		case CONSOLE: read_console(f, buf, n); break;
		case PAPER_TAPE_READER: read_paper_tape(f, buf n);
			break;
		case...
		case...
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;good-code-bad-code&quot; tabindex=&quot;-1&quot;&gt;Good code / bad code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;bad code can&#39;t handle small changes in requirements&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;cost-of-dependencies&quot; tabindex=&quot;-1&quot;&gt;Cost of Dependencies&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nitter.tiekoetter.com/cmuratori/status/1426299131270615040#m&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://nitter.tiekoetter.com/cmuratori/status/1426299131270615040#m&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://nitter.tiekoetter.com/Jonathan_Blow/status/1923414922484232404#m&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://nitter.tiekoetter.com/Jonathan_Blow/status/1923414922484232404#m&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every dependency, every tool, every cog in the programming machine that is your codebase has a non-zero percentage chance of breaking after a while (because of external changes, because you triggered a bug, etc.)&lt;/li&gt;
&lt;li&gt;The reliability of the system is the product of the reliability of each component (since usually your program does not keep working if one component totally breaks)&lt;/li&gt;
&lt;li&gt;So with 10 components at 99% reliability each (~chance of the component still working after one year), this gives us  only a ~90% chance the system will still work after one year
&lt;ul&gt;
&lt;li&gt;This becomes only 60% after 5 years&lt;/li&gt;
&lt;li&gt;or 36% after one year if 100 different components are involved&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;With npm and ecosystems like that 100 dependencies are quickly pulled in by just a handful of components you include directly&lt;/li&gt;
&lt;li&gt;99% reliability is very favorable if anything involving the web is included, since specs, URLs, external systems, frameworks, etc. change and break so quickly and often&lt;/li&gt;
&lt;li&gt;With such low reliability rates the amount of work spent on debugging and maintenance becomes unreasonable high&lt;/li&gt;
&lt;li&gt;To avoid this, keep dependencies and your surface to those dependencies to a minimum.&lt;/li&gt;
&lt;li&gt;JavaScript frameworks change, but math is forever.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;tiger-style&quot; tabindex=&quot;-1&quot;&gt;TigerStyle&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/tigerbeetle/tigerbeetle/blob/main/docs/TIGER_STYLE.md&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;tigerbeetle/docs/TIGER_STYLE.md at main · tigerbeetle/tigerbeetle · GitHub&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://tigerstyle.dev/&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Tiger Style&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=w3WYdYyjek4&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=w3WYdYyjek4&lt;/a&gt;&lt;br /&gt;
Style developed for writing a database for financial transactions (where speed, robustness and correctness are absolutely paramount).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;See the whole picture
&lt;ul&gt;
&lt;li&gt;Time (total cost of ownership) = Design + Coding + Testing + Incidents&lt;/li&gt;
&lt;li&gt;Don&#39;t just speed up the coding phase (there is not too much gain in there - maybe more now with AI?)&lt;/li&gt;
&lt;li&gt;Design influences all following phases, so there is a lot of gain here&lt;/li&gt;
&lt;li&gt;Design is cheap, iterating on design is fast (before coding starts). Rewrites later are expensive&lt;/li&gt;
&lt;li&gt;Testing takes a lot of time and increases exponentially for complex systems (need to test all interactions, sometimes bugs are hard to reproduce)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Painters vs. Sculptors
&lt;ul&gt;
&lt;li&gt;Music analogy: Beatles (start with a blank sheet and an idea, slowly add instruments, rythm, etc.) vs. Bob Marley (starts with a wall of sound, takes away pieces and arrives at raggae)&lt;/li&gt;
&lt;li&gt;Some programmers are painters (like to do things themselves), some are sculptors (start with libraries)&lt;/li&gt;
&lt;li&gt;Only four &amp;quot;colors&amp;quot; are important in programming: Network, Disk, Memory, CPU&lt;/li&gt;
&lt;li&gt;Napkin calculations: latency + throughput (applies to all &amp;quot;colors&amp;quot;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Define your fault models (consider what can go wrong and what your program should handle or not handle)&lt;/li&gt;
&lt;li&gt;Stateless is better than stateful (managing state is hard)&lt;/li&gt;
&lt;li&gt;Reduce surface area (less components, less functionality, less ports, etc.) - less complexity&lt;/li&gt;
&lt;li&gt;do it right the first time
&lt;ul&gt;
&lt;li&gt;if you know of a better way to do things while programming, restart and do the better way&lt;/li&gt;
&lt;li&gt;it will be more expensive (=time consuming) later on (right now you have all the context you need, later you will have forgotten things)&lt;/li&gt;
&lt;li&gt;will you even get a second chance?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;walk &amp;amp; talk (pick a design problem and walk while brainstorming solutions with other people, helps creativity)&lt;/li&gt;
&lt;li&gt;the program should run correctly or not run at all
&lt;ul&gt;
&lt;li&gt;use assertions everywhere, use assertions in production
&lt;ul&gt;
&lt;li&gt;start of function to check parameters&lt;/li&gt;
&lt;li&gt;end of functions to check return values&lt;/li&gt;
&lt;li&gt;check runtime of a loop (upper and lower bound)&lt;/li&gt;
&lt;li&gt;check cached data against the copy on disk&lt;/li&gt;
&lt;li&gt;etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;asserts document your expectations (code documents the positive space, assertions the negative space i.e. what should not happen)&lt;/li&gt;
&lt;li&gt;assertions are to catch programming errors (bugs), not to handle operating errors (these you should catch and handle)
&lt;ul&gt;
&lt;li&gt;e.g. if a malloc fails on a server, don&#39;t crash but refuse new connections&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;put expected limits on your system (e.g. Tigerbeetle allocates all memory at startup), avoid while(true) loops
&lt;ul&gt;
&lt;li&gt;this also helps to get an idea of the size and boundaries of your system&lt;/li&gt;
&lt;li&gt;keeps the system lean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;NASA Power of 10 rule for critical systems&lt;/li&gt;
&lt;li&gt;Zig: assert on arithmatic (e.g. integer overflow)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;build a simulator for your program
&lt;ul&gt;
&lt;li&gt;simulate everything, including network and disk&lt;/li&gt;
&lt;li&gt;able to test much more quickly&lt;/li&gt;
&lt;li&gt;reproduce bugs with 100% accuracy&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;practical-dod&quot; tabindex=&quot;-1&quot;&gt;Practical DOD&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://vimeo.com/649009599&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;Andrew Kelley - Practical DOD auf Vimeo&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=rX0ItVEVjHc&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;CppCon 2014: Mike Acton &amp;quot;Data-Oriented Design and C++&amp;quot;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reading from cache is slower than doing math, reading from RAM is 10x slower, allocating on the heap might be 100x slower still
&lt;ul&gt;
&lt;li&gt;don&#39;t cache values that are very fast to compute (or rarely needed)&lt;/li&gt;
&lt;li&gt;avoid memory allocations (esp. on heap) on the hot path (inside of loops)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;goal: identify where you have many things in memoryy and make the size of each thing smaller&lt;/li&gt;
&lt;li&gt;struct memory layout
&lt;ul&gt;
&lt;li&gt;alignment of struct: size of largest primitive member&lt;/li&gt;
&lt;li&gt;alignment of each (primitive) member: its own size&lt;/li&gt;
&lt;li&gt;will add padding bytes after each member to align them according to rules above&lt;/li&gt;
&lt;li&gt;size of struct has to be multiple of alignment of struct (incl. padding)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use indexes instead of pointers (indexes can be the size you want, pointers are always 8 bytes on a 64-bit system)
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://floooh.github.io/2018/06/17/handles-vs-pointers.html&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://floooh.github.io/2018/06/17/handles-vs-pointers.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;you lose some type safety&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;store elements of a struct out-of-band
&lt;ul&gt;
&lt;li&gt;example: instead of a bool flag, have two separate arrays for each type&lt;/li&gt;
&lt;li&gt;can speed up operation as well, since you probably do different things for each type and now you can batch these operations without having to check/switch on each object&lt;/li&gt;
&lt;li&gt;better cache behavior as well, since one type of object will not evict the other one while iterating&lt;/li&gt;
&lt;li&gt;example: move fields that are rarely populated into a hash map (so they are stored sparsely)&lt;/li&gt;
&lt;li&gt;example: use the Fat/Flat struct approach (use one common flags field and have extra data in an external list or map)&lt;/li&gt;
&lt;li&gt;take note of your actual use case and its memory usage and chose the layout of data accordingly&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;use SOA instead of AOS
&lt;ul&gt;
&lt;li&gt;uses no padding&lt;/li&gt;
&lt;li&gt;better cache behavior, if only certain fields are needed for computation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

            </content>
            <link href="https://janek.ing/code/architecture/" >
        </entry>
        <entry>
            <title>
                Agile
                
            </title>
            <updated>2025-05-25T19:25:54.213Z</updated>
            <id>https://janek.ing/arbeit/agile/</id>
            <content type="html">
                &lt;h2 id=&quot;eigene-erfahrung&quot; tabindex=&quot;-1&quot;&gt;Eigene Erfahrung&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Alle&lt;/strong&gt; Scrum Meetings müssen von &lt;strong&gt;allen&lt;/strong&gt; Teilnehmern gut vorbereitet sein, sonst werden sie nahezu wertlos
&lt;ul&gt;
&lt;li&gt;Dies bedeutet einen nicht unerheblichen Aufwand für diese Vorbereitung&lt;/li&gt;
&lt;li&gt;Ziel sollte es also nicht sein, die Zeit für das Meeting auszulasten, sondern das Ziel des Meetings so schnell wie möglich zu erreichen&lt;/li&gt;
&lt;li&gt;Bei langen Meetings: Materialien vorher rumschicken&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Es dürfen nur die vorgegebenen Features entwickelt werden!
&lt;ul&gt;
&lt;li&gt;Unnötige Features sind wie Lagerhaltung im Lean, sie erzeugen Probleme in jedem Schritt des weiteren Prozesses: mehr Aufwand für Testing, mehr Quellen für Bugs, mehr Aufwand für Dokumentation, ein komplexeres System mit mehr Abhängigkeiten&lt;/li&gt;
&lt;li&gt;Unnötige Features können Stück für Stück das Projekt lahm legen&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Regelmäßige Testzyklen (mit echten Usern!) sind wichtig zum Nachsteuern
&lt;ul&gt;
&lt;li&gt;dementsprechend müssen Features Bug frei sein. Ansonsten: kein review und technical debt für nächsten Sprint&lt;/li&gt;
&lt;li&gt;Tests mit echten Usern sind nicht zu ersetzen. Oftmals trifft man falsche Annahmen, was User wollen/brauchen und nur so findet man das heraus.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;je unklarer die Anforderungen zu Beginn des Projektes, desto schwieriger wird die Entwicklung und desto wichtiger sind PoCs. Lieber einen schnellen Test wegwerfen, als Jahre auf die falsche Technologie setzen.&lt;/li&gt;
&lt;li&gt;generell wird die zweite Version eines Produktes oft besser: also schnell PoC bauen, wegwerfen und dann Gelerntes bei richtigem Produkt anwenden&lt;/li&gt;
&lt;li&gt;niemals für die Probleme von morgen entwickeln, denn diese kennst du nicht (siehe unnötige Features oben)!&lt;/li&gt;
&lt;li&gt;Wichtige Säule von Scrum: Transparenz. Gilt für alle Bereiche eines Unternehmens&lt;/li&gt;
&lt;li&gt;scrum funktioniert am besten mit sehr selbständigen Entwicklern, die fokussiert arbeiten und notwendige aufgaben eigenständig entdecken, sich aber an die Regeln (feature liste) halten. Je mehr micro Management notwendig ist, desto schlechter funktioniert scrum.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO: insert vorgehen walk the board&lt;/p&gt;
&lt;h2 id=&quot;literatur&quot; tabindex=&quot;-1&quot;&gt;Literatur&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.craiglarman.com/wiki/downloads/misc/history-of-iterative-larman-and-basili-ieee-computer.pdf&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.craiglarman.com/wiki/downloads/misc/history-of-iterative-larman-and-basili-ieee-computer.pdf&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;agile/iterative Entwicklung (IID) gibt es schon seit den 70ern und länger&lt;/li&gt;
&lt;li&gt;wasserfall war ursprünglich auch agile gedacht (&amp;quot;do the process twice&amp;quot;)&lt;/li&gt;
&lt;li&gt;agile ist nur Wasserfall in wiederkehrenden, kleinen inkrementen&lt;/li&gt;
&lt;li&gt;jeder Schritt enthält auch wieder eine Design, Test und Dokumentation phase&lt;/li&gt;
&lt;li&gt;wichtig sind releaseable increments (bei Software)&lt;/li&gt;
&lt;li&gt;Timeboxen reichen von 6m bis 0,5d&lt;/li&gt;
&lt;li&gt;inspiration für scrum: japanischer IID Ansatz für Hardware bei Honda, Canon, Fujitsu: &amp;quot;shashimi&amp;quot; (slices)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;“Evolution” is a technique for producing the appearance of stability. A complex system will be most successful if it is implemented in small steps and if each step has a clear measure of successful achievement as well as a “retreat” possibility to a previous successful step upon failure. You have the opportunity of receiving some feedback from the real world before throwing in all resources intended for a system, and you can correct possible design errors…&lt;br /&gt;
-- Tom Gilb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Management does not require firm estimates of completion, time, and money for the entire project. Each (small iterative) step must meet one of the following criteria (priority order): either (a) give planned return on investment payback, or, if impossible, then (b) give breakeven (no loss); or, at least, (c) some positive user benefit measurably; or, at least (d) some user environment feedback and learning.&lt;br /&gt;
-- Tom Gilb&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;The danger in the sequence (waterfall approach) is that the project moves from being grand to being grandiose, and exceeds our human intellectual capabilities for management and control.&lt;br /&gt;
-- Harlan Mills&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;probleme&quot; tabindex=&quot;-1&quot;&gt;Probleme&lt;/h2&gt;
&lt;p&gt;Probleme mit Wasserfall nach David Parnas und Paul Clements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A system’s users seldom know exactly what they want and cannot articulate all they know.&lt;/li&gt;
&lt;li&gt;Even if we could state all requirements, there are many details that we can only discover once we are well into implementation.&lt;/li&gt;
&lt;li&gt;Even if we knew all these details, as humans, we can master only so much complexity.&lt;/li&gt;
&lt;li&gt;Even if we could master all this complexity, external forces lead to changes in requirements, some of which may invalidate earlier decisions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Probleme mit Scrum:&lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=Q25lwSfVwF8&quot; target=&quot;_blank&quot; class=&quot;external-link&quot;&gt;https://www.youtube.com/watch?v=Q25lwSfVwF8&lt;/a&gt;&lt;/p&gt;

            </content>
            <link href="https://janek.ing/arbeit/agile/" >
        </entry>
</feed>
